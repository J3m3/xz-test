	.text
	.file	"lzma_decoder.c"
	.file	0 "/home/yjs/workspace/xz-test/src" "liblzma/lzma/lzma_decoder.c" md5 0x2c8fdc3c7ad2b343844f694d47e9740c
	.file	1 "liblzma/lzma" "lzma_common.h" md5 0xce364754aa91e57f603599f25328df33
	.file	2 "liblzma/api/lzma" "base.h" md5 0x81a3070447cc5b61b56cfbed076853db
	.file	3 "liblzma/api/lzma" "lzma.h" md5 0xc59c540efa0aff44f03d71331089fff8
	.file	4 "liblzma/api/lzma" "check.h" md5 0xb07c3297e2bcc14bb477793d08325ee3
	.file	5 "/usr/include/x86_64-linux-gnu/bits" "types.h" md5 0xd108b5f93a74c50510d7d9bc0ab36df9
	.file	6 "/usr/include/x86_64-linux-gnu/bits" "stdint-uintn.h" md5 0x2bf2ae53c58c01b1a1b9383b5195125c
	.file	7 "liblzma/rangecoder" "range_common.h" md5 0x7d3e93a1bf35640522f499de026cfdad
	.file	8 "liblzma/rangecoder" "range_decoder.h" md5 0xae45a4dae71f4281c750e859340b1e3c
	.file	9 "liblzma/api/lzma" "vli.h" md5 0xe1aa51527ce08aa260777d4fb351a0b7
	.file	10 "/home/yjs/workspace" "GPUISel-llvm/build/lib/clang/19/include/__stddef_size_t.h" md5 0x2c44e821a2b1951cde2eb0fb2e656867
	.globl	lzma_lzma_decoder_create        # -- Begin function lzma_lzma_decoder_create
	.p2align	4, 0x90
	.type	lzma_lzma_decoder_create,@function
lzma_lzma_decoder_create:               # @lzma_lzma_decoder_create
.Lfunc_begin0:
	.loc	0 941 0                         # liblzma/lzma/lzma_decoder.c:941:0
	.cfi_startproc
# %bb.0:                                # %entry
	#DEBUG_VALUE: lzma_lzma_decoder_create:lz <- $rdi
	#DEBUG_VALUE: lzma_lzma_decoder_create:allocator <- $rsi
	#DEBUG_VALUE: lzma_lzma_decoder_create:opt <- $rdx
	#DEBUG_VALUE: lzma_lzma_decoder_create:lz_options <- $rcx
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	.loc	0 942 16 prologue_end           # liblzma/lzma/lzma_decoder.c:942:16
	cmpq	$0, (%rdi)
.Ltmp0:
	.loc	0 942 6 is_stmt 0               # liblzma/lzma/lzma_decoder.c:942:6
	jne	.LBB0_4
.Ltmp1:
# %bb.1:                                # %if.then
	#DEBUG_VALUE: lzma_lzma_decoder_create:lz <- $rdi
	#DEBUG_VALUE: lzma_lzma_decoder_create:allocator <- $rsi
	#DEBUG_VALUE: lzma_lzma_decoder_create:opt <- $rdx
	#DEBUG_VALUE: lzma_lzma_decoder_create:lz_options <- $rcx
	.loc	0 0 6                           # liblzma/lzma/lzma_decoder.c:0:6
	movq	%rdi, %rbx
	movq	%rdx, %r14
.Ltmp2:
	#DEBUG_VALUE: lzma_lzma_decoder_create:opt <- $r14
	movq	%rcx, %r15
.Ltmp3:
	#DEBUG_VALUE: lzma_lzma_decoder_create:lz_options <- $r15
	.loc	0 943 15 is_stmt 1              # liblzma/lzma/lzma_decoder.c:943:15
	movl	$28352, %edi                    # imm = 0x6EC0
.Ltmp4:
	#DEBUG_VALUE: lzma_lzma_decoder_create:lz <- $rbx
	callq	lzma_alloc@PLT
.Ltmp5:
	#DEBUG_VALUE: lzma_lzma_decoder_create:allocator <- [DW_OP_LLVM_entry_value 1] $rsi
	.loc	0 943 13 is_stmt 0              # liblzma/lzma/lzma_decoder.c:943:13
	movq	%rax, (%rbx)
.Ltmp6:
	.loc	0 944 17 is_stmt 1              # liblzma/lzma/lzma_decoder.c:944:17
	testq	%rax, %rax
.Ltmp7:
	.loc	0 944 7 is_stmt 0               # liblzma/lzma/lzma_decoder.c:944:7
	je	.LBB0_2
.Ltmp8:
# %bb.3:                                # %if.end
	#DEBUG_VALUE: lzma_lzma_decoder_create:lz <- $rbx
	#DEBUG_VALUE: lzma_lzma_decoder_create:allocator <- [DW_OP_LLVM_entry_value 1] $rsi
	#DEBUG_VALUE: lzma_lzma_decoder_create:opt <- $r14
	#DEBUG_VALUE: lzma_lzma_decoder_create:lz_options <- $r15
	.loc	0 947 12 is_stmt 1              # liblzma/lzma/lzma_decoder.c:947:12
	movq	$lzma_decode, 8(%rbx)
	.loc	0 948 13                        # liblzma/lzma/lzma_decoder.c:948:13
	movq	$lzma_decoder_reset, 16(%rbx)
	.loc	0 949 24                        # liblzma/lzma/lzma_decoder.c:949:24
	movq	$lzma_decoder_uncompressed, 24(%rbx)
	movq	%r15, %rcx
	movq	%r14, %rdx
.Ltmp9:
.LBB0_4:                                # %if.end5
	#DEBUG_VALUE: lzma_lzma_decoder_create:lz <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_lzma_decoder_create:allocator <- [DW_OP_LLVM_entry_value 1] $rsi
	#DEBUG_VALUE: lzma_lzma_decoder_create:opt <- $rdx
	#DEBUG_VALUE: lzma_lzma_decoder_create:lz_options <- $rcx
	#DEBUG_VALUE: lzma_lzma_decoder_create:options <- $rdx
	.loc	0 955 35                        # liblzma/lzma/lzma_decoder.c:955:35
	movl	(%rdx), %eax
	.loc	0 955 24 is_stmt 0              # liblzma/lzma/lzma_decoder.c:955:24
	movq	%rax, (%rcx)
	.loc	0 956 37 is_stmt 1              # liblzma/lzma/lzma_decoder.c:956:37
	movq	8(%rdx), %rax
	.loc	0 956 26 is_stmt 0              # liblzma/lzma/lzma_decoder.c:956:26
	movq	%rax, 8(%rcx)
	.loc	0 957 42 is_stmt 1              # liblzma/lzma/lzma_decoder.c:957:42
	movl	16(%rdx), %eax
	.loc	0 957 31 is_stmt 0              # liblzma/lzma/lzma_decoder.c:957:31
	movq	%rax, 16(%rcx)
	xorl	%eax, %eax
	.loc	0 960 1 epilogue_begin is_stmt 1 # liblzma/lzma/lzma_decoder.c:960:1
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Ltmp10:
.LBB0_2:
	.cfi_def_cfa_offset 32
	#DEBUG_VALUE: lzma_lzma_decoder_create:lz <- $rbx
	#DEBUG_VALUE: lzma_lzma_decoder_create:allocator <- [DW_OP_LLVM_entry_value 1] $rsi
	#DEBUG_VALUE: lzma_lzma_decoder_create:opt <- $r14
	#DEBUG_VALUE: lzma_lzma_decoder_create:lz_options <- $r15
	.loc	0 0 1 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:1
	movl	$5, %eax
	.loc	0 960 1 epilogue_begin          # liblzma/lzma/lzma_decoder.c:960:1
	popq	%rbx
.Ltmp11:
	#DEBUG_VALUE: lzma_lzma_decoder_create:lz <- [DW_OP_LLVM_entry_value 1] $rdi
	.cfi_def_cfa_offset 24
	popq	%r14
.Ltmp12:
	#DEBUG_VALUE: lzma_lzma_decoder_create:opt <- [DW_OP_LLVM_entry_value 1] $rdx
	.cfi_def_cfa_offset 16
	popq	%r15
.Ltmp13:
	#DEBUG_VALUE: lzma_lzma_decoder_create:lz_options <- [DW_OP_LLVM_entry_value 1] $rcx
	.cfi_def_cfa_offset 8
	retq
.Ltmp14:
.Lfunc_end0:
	.size	lzma_lzma_decoder_create, .Lfunc_end0-lzma_lzma_decoder_create
	.cfi_endproc
	.file	11 "liblzma/common" "common.h" md5 0xb445e74fc76042ed64f7e1908fcc1934
                                        # -- End function
	.p2align	4, 0x90                         # -- Begin function lzma_decode
	.type	lzma_decode,@function
lzma_decode:                            # @lzma_decode
.Lfunc_begin1:
	.loc	0 287 0 is_stmt 1               # liblzma/lzma/lzma_decoder.c:287:0
	.cfi_startproc
# %bb.0:                                # %entry
	#DEBUG_VALUE: lzma_decode:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- $rsi
	#DEBUG_VALUE: lzma_decode:in <- $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- $rcx
	#DEBUG_VALUE: lzma_decode:in_size <- $r8
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$200, %rsp
	.cfi_def_cfa_offset 256
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
.Ltmp15:
	#DEBUG_VALUE: lzma_decode:coder <- $rdi
	movq	%r8, 32(%rsp)                   # 8-byte Spill
.Ltmp16:
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	movq	%rdx, %r8
.Ltmp17:
	#DEBUG_VALUE: rc_read_init:rc <- [DW_OP_plus_uconst 28268, DW_OP_stack_value] $rdi
	#DEBUG_VALUE: rc_read_init:in <- undef
	#DEBUG_VALUE: rc_read_init:in_pos <- undef
	#DEBUG_VALUE: rc_read_init:in_size <- undef
	movl	28276(%rdi), %eax
.Ltmp18:
	.loc	8 32 29 prologue_end            # liblzma/rangecoder/range_decoder.h:32:29
	testl	%eax, %eax
	.loc	8 32 2 is_stmt 0                # liblzma/rangecoder/range_decoder.h:32:2
	je	.LBB1_4
.Ltmp19:
# %bb.1:                                # %while.body.lr.ph.i
	#DEBUG_VALUE: lzma_decode:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- $rsi
	#DEBUG_VALUE: lzma_decode:in <- $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- $rcx
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:coder <- $rdi
	#DEBUG_VALUE: rc_read_init:rc <- [DW_OP_plus_uconst 28268, DW_OP_stack_value] $rdi
	.loc	8 0 2                           # liblzma/rangecoder/range_decoder.h:0:2
	movq	(%rcx), %r14
	.loc	8 32 2                          # liblzma/rangecoder/range_decoder.h:32:2
	decl	%eax
.Ltmp20:
	.p2align	4, 0x90
.LBB1_2:                                # %while.body.i
                                        # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: lzma_decode:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- $rsi
	#DEBUG_VALUE: lzma_decode:in <- $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- $rcx
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:coder <- $rdi
	#DEBUG_VALUE: rc_read_init:rc <- [DW_OP_plus_uconst 28268, DW_OP_stack_value] $rdi
	.loc	8 33 15 is_stmt 1               # liblzma/rangecoder/range_decoder.h:33:15
	cmpq	%r14, 32(%rsp)                  # 8-byte Folded Reload
.Ltmp21:
	.loc	8 33 7 is_stmt 0                # liblzma/rangecoder/range_decoder.h:33:7
	je	.LBB1_7
.Ltmp22:
# %bb.3:                                # %if.end.i
                                        #   in Loop: Header=BB1_2 Depth=1
	#DEBUG_VALUE: lzma_decode:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- $rsi
	#DEBUG_VALUE: lzma_decode:in <- $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- $rcx
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:coder <- $rdi
	#DEBUG_VALUE: rc_read_init:rc <- [DW_OP_plus_uconst 28268, DW_OP_stack_value] $rdi
	.loc	8 36 19 is_stmt 1               # liblzma/rangecoder/range_decoder.h:36:19
	movl	28272(%rdi), %r9d
	.loc	8 36 24 is_stmt 0               # liblzma/rangecoder/range_decoder.h:36:24
	shll	$8, %r9d
	.loc	8 36 32                         # liblzma/rangecoder/range_decoder.h:36:32
	movzbl	(%r8,%r14), %r15d
	.loc	8 36 30                         # liblzma/rangecoder/range_decoder.h:36:30
	orl	%r9d, %r15d
	.loc	8 36 12                         # liblzma/rangecoder/range_decoder.h:36:12
	movl	%r15d, 28272(%rdi)
	.loc	8 37 3 is_stmt 1                # liblzma/rangecoder/range_decoder.h:37:3
	incq	%r14
	movq	%r14, (%rcx)
	.loc	8 38 3                          # liblzma/rangecoder/range_decoder.h:38:3
	movl	%eax, 28276(%rdi)
.Ltmp23:
	.loc	8 32 29                         # liblzma/rangecoder/range_decoder.h:32:29
	addl	$-1, %eax
	.loc	8 32 2 is_stmt 0                # liblzma/rangecoder/range_decoder.h:32:2
	jb	.LBB1_2
	jmp	.LBB1_5
.Ltmp24:
.LBB1_4:                                # %entry.if.end_crit_edge
	#DEBUG_VALUE: lzma_decode:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- $rsi
	#DEBUG_VALUE: lzma_decode:in <- $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- $rcx
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:coder <- $rdi
	.loc	0 308 2 is_stmt 1               # liblzma/lzma/lzma_decoder.c:308:2
	movl	28272(%rdi), %r15d
	movq	(%rcx), %r14
.Ltmp25:
.LBB1_5:                                # %if.end
	#DEBUG_VALUE: lzma_decode:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- $rsi
	#DEBUG_VALUE: lzma_decode:in <- $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- $rcx
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:coder <- $rdi
	.loc	0 0 2 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:2
	movq	%rcx, 176(%rsp)                 # 8-byte Spill
.Ltmp26:
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	.loc	0 303 19 is_stmt 1              # liblzma/lzma/lzma_decoder.c:303:19
	movq	8(%rsi), %r9
	movq	16(%rsi), %rax
	movq	%rax, 72(%rsp)                  # 8-byte Spill
	movq	24(%rsi), %rax
.Ltmp27:
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 256 64] undef
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 0 64] undef
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 64 64] $r9
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 192 64] $rax
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 320 64] undef
	#DEBUG_VALUE: lzma_decode:dict_start <- $r9
	.loc	0 308 2                         # liblzma/lzma/lzma_decoder.c:308:2
	movl	28268(%rdi), %ebx
.Ltmp28:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 311 26                        # liblzma/lzma/lzma_decoder.c:311:26
	movl	28280(%rdi), %ecx
.Ltmp29:
	#DEBUG_VALUE: lzma_decode:state <- $ecx
	.loc	0 0 26 is_stmt 0                # liblzma/lzma/lzma_decoder.c:0:26
	movl	%ecx, 4(%rsp)                   # 4-byte Spill
.Ltmp30:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	.loc	0 312 25 is_stmt 1              # liblzma/lzma/lzma_decoder.c:312:25
	movl	28284(%rdi), %ebp
.Ltmp31:
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 313 25                        # liblzma/lzma/lzma_decoder.c:313:25
	movl	28288(%rdi), %ecx
.Ltmp32:
	#DEBUG_VALUE: lzma_decode:rep1 <- $ecx
	.loc	0 0 25 is_stmt 0                # liblzma/lzma/lzma_decoder.c:0:25
	movl	%ecx, 52(%rsp)                  # 4-byte Spill
.Ltmp33:
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	.loc	0 314 25 is_stmt 1              # liblzma/lzma/lzma_decoder.c:314:25
	movl	28292(%rdi), %ecx
.Ltmp34:
	#DEBUG_VALUE: lzma_decode:rep2 <- $ecx
	.loc	0 0 25 is_stmt 0                # liblzma/lzma/lzma_decoder.c:0:25
	movl	%ecx, (%rsp)                    # 4-byte Spill
.Ltmp35:
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	.loc	0 315 25 is_stmt 1              # liblzma/lzma/lzma_decoder.c:315:25
	movl	28296(%rdi), %ecx
.Ltmp36:
	#DEBUG_VALUE: lzma_decode:rep3 <- $ecx
	#DEBUG_VALUE: lzma_decode:pos_mask <- undef
	.loc	0 0 25 is_stmt 0                # liblzma/lzma/lzma_decoder.c:0:25
	movl	%ecx, 92(%rsp)                  # 4-byte Spill
.Ltmp37:
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	.loc	0 321 30 is_stmt 1              # liblzma/lzma/lzma_decoder.c:321:30
	movq	28328(%rdi), %r12
.Ltmp38:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	.loc	0 322 27                        # liblzma/lzma/lzma_decoder.c:322:27
	movl	28336(%rdi), %ecx
.Ltmp39:
	#DEBUG_VALUE: lzma_decode:symbol <- $ecx
	#DEBUG_VALUE: lzma_decode:limit <- undef
	#DEBUG_VALUE: lzma_decode:offset <- undef
	#DEBUG_VALUE: lzma_decode:len <- undef
	#DEBUG_VALUE: lzma_decode:literal_pos_mask <- undef
	#DEBUG_VALUE: lzma_decode:literal_context_bits <- undef
	#DEBUG_VALUE: lzma_decode:pos_state <- undef
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 27 is_stmt 0                # liblzma/lzma/lzma_decoder.c:0:27
	movq	%rcx, 16(%rsp)                  # 8-byte Spill
.Ltmp40:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	.loc	0 337 30 is_stmt 1              # liblzma/lzma/lzma_decoder.c:337:30
	movq	28312(%rdi), %r11
.Ltmp41:
	#DEBUG_VALUE: lzma_decode:no_eopm <- undef
	.loc	0 0 30 is_stmt 0                # liblzma/lzma/lzma_decoder.c:0:30
	movq	%rax, %rcx
	subq	%r9, %rcx
.Ltmp42:
	.loc	0 339 14 is_stmt 1              # liblzma/lzma/lzma_decoder.c:339:14
	leaq	(%r11,%r9), %r10
	cmpq	%rcx, %r11
	cmovaeq	%rax, %r10
.Ltmp43:
	.loc	0 323 26                        # liblzma/lzma/lzma_decoder.c:323:26
	movl	28340(%rdi), %ecx
.Ltmp44:
	#DEBUG_VALUE: lzma_decode:limit <- $ecx
	.loc	0 0 26 is_stmt 0                # liblzma/lzma/lzma_decoder.c:0:26
	movq	%rcx, 64(%rsp)                  # 8-byte Spill
	movq	%r11, 192(%rsp)                 # 8-byte Spill
	.loc	0 338 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:338:4
	cmpq	$-1, %r11
.Ltmp45:
	.loc	0 339 14                        # liblzma/lzma/lzma_decoder.c:339:14
	cmoveq	%rax, %r10
.Ltmp46:
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 192 64] $r10
	.loc	0 0 14 is_stmt 0                # liblzma/lzma/lzma_decoder.c:0:14
	movq	%r10, 112(%rsp)                 # 8-byte Spill
.Ltmp47:
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	.loc	0 324 27 is_stmt 1              # liblzma/lzma/lzma_decoder.c:324:27
	movl	28344(%rdi), %eax
.Ltmp48:
	#DEBUG_VALUE: lzma_decode:offset <- $eax
	.loc	0 0 27 is_stmt 0                # liblzma/lzma/lzma_decoder.c:0:27
	movq	%rax, 8(%rsp)                   # 8-byte Spill
	.loc	0 325 24 is_stmt 1              # liblzma/lzma/lzma_decoder.c:325:24
	movl	28348(%rdi), %eax
.Ltmp49:
	#DEBUG_VALUE: lzma_decode:len <- $eax
	.loc	0 0 24 is_stmt 0                # liblzma/lzma/lzma_decoder.c:0:24
	movq	%rax, 40(%rsp)                  # 8-byte Spill
	.loc	0 344 17 is_stmt 1              # liblzma/lzma/lzma_decoder.c:344:17
	movl	28320(%rdi), %ecx
.Ltmp50:
	cmpq	$70, %rcx
	movq	%rsi, 184(%rsp)                 # 8-byte Spill
.Ltmp51:
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	.loc	0 0 17 is_stmt 0                # liblzma/lzma/lzma_decoder.c:0:17
	movq	%r9, 168(%rsp)                  # 8-byte Spill
.Ltmp52:
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 168, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	.loc	0 344 2                         # liblzma/lzma/lzma_decoder.c:344:2
	ja	.LBB1_8
.Ltmp53:
# %bb.6:                                # %if.end
	#DEBUG_VALUE: lzma_decode:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:coder <- $rdi
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 168, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 0                           # liblzma/lzma/lzma_decoder.c:0:0
	movq	(%rsi), %rax
.Ltmp54:
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 0 64] $rax
	movq	%rax, 96(%rsp)                  # 8-byte Spill
	movq	32(%rsi), %rsi
.Ltmp55:
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 256 64] $rsi
	movl	28300(%rdi), %edx
.Ltmp56:
	#DEBUG_VALUE: lzma_decode:pos_mask <- $edx
	#DEBUG_VALUE: lzma_decode:in <- $r8
	movl	28308(%rdi), %eax
.Ltmp57:
	movq	%rax, 160(%rsp)                 # 8-byte Spill
	movl	28304(%rdi), %eax
	movq	%rax, 152(%rsp)                 # 8-byte Spill
	movl	%r9d, %eax
	movl	%edx, 108(%rsp)                 # 4-byte Spill
	andl	%edx, %eax
.Ltmp58:
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	movq	%r9, 56(%rsp)                   # 8-byte Spill
	movq	%r12, %r11
	movq	16(%rsp), %r13                  # 8-byte Reload
	movl	4(%rsp), %r12d                  # 4-byte Reload
.Ltmp59:
	movq	%rsi, 80(%rsp)                  # 8-byte Spill
	.loc	0 344 2                         # liblzma/lzma/lzma_decoder.c:344:2
	jmpq	*.LJTI1_0(,%rcx,8)
.Ltmp60:
.LBB1_7:
	#DEBUG_VALUE: lzma_decode:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- $rsi
	#DEBUG_VALUE: lzma_decode:in <- $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- $rcx
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:coder <- $rdi
	#DEBUG_VALUE: rc_read_init:rc <- [DW_OP_plus_uconst 28268, DW_OP_stack_value] $rdi
	.loc	0 0 2                           # liblzma/lzma/lzma_decoder.c:0:2
	xorl	%eax, %eax
.Ltmp61:
	.loc	8 33 7 is_stmt 1                # liblzma/rangecoder/range_decoder.h:33:7
	jmp	.LBB1_465
.Ltmp62:
.LBB1_8:
	#DEBUG_VALUE: lzma_decode:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:coder <- $rdi
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 168, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	8 0 7 is_stmt 0                 # liblzma/rangecoder/range_decoder.h:0:7
	movq	%r9, %rsi
.Ltmp63:
.LBB1_9:                                # %do.body5579
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 64 64] $rsi
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 785 2 is_stmt 1               # liblzma/lzma/lzma_decoder.c:785:2
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp64:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 0 2 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:2
	movq	%rsi, 56(%rsp)                  # 8-byte Spill
.Ltmp65:
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	.loc	0 785 2                         # liblzma/lzma/lzma_decoder.c:785:2
	ja	.LBB1_12
.Ltmp66:
# %bb.10:                               # %if.then5583
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 785 2                         # liblzma/lzma/lzma_decoder.c:785:2
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
	movq	8(%rsp), %r11                   # 8-byte Reload
.Ltmp67:
	.loc	0 785 2                         # liblzma/lzma/lzma_decoder.c:785:2
	jne	.LBB1_13
.Ltmp68:
# %bb.11:                               # %if.then5586
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 785 2                         # liblzma/lzma/lzma_decoder.c:785:2
	movl	$0, 28320(%rdi)
	jmp	.LBB1_586
.Ltmp69:
.LBB1_12:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 2                           # liblzma/lzma/lzma_decoder.c:0:2
	movq	8(%rsp), %r11                   # 8-byte Reload
	.loc	0 785 2                         # liblzma/lzma/lzma_decoder.c:785:2
	jmp	.LBB1_14
.Ltmp70:
.LBB1_13:                               # %if.end5588
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 785 2                         # liblzma/lzma/lzma_decoder.c:785:2
	shll	$8, %ebx
.Ltmp71:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	shll	$8, %r15d
.Ltmp72:
	movzbl	(%r8,%r14), %eax
	incq	%r14
.Ltmp73:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %eax
.Ltmp74:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $eax
	.loc	0 0 2                           # liblzma/lzma/lzma_decoder.c:0:2
	movl	%eax, %r15d
.Ltmp75:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
.LBB1_14:                               # %do.end5600
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 786 18 is_stmt 1              # liblzma/lzma/lzma_decoder.c:786:18
	movl	$1, 28320(%rdi)
	xorl	%ecx, %ecx
	movb	$1, %dl
	movq	%r14, 32(%rsp)                  # 8-byte Spill
.Ltmp76:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- [DW_OP_plus_uconst 32, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:in_size <- undef
	.loc	0 0 18 is_stmt 0                # liblzma/lzma/lzma_decoder.c:0:18
	jmp	.LBB1_587
.Ltmp77:
.LBB1_15:                               # %while.body
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 64 64] $rcx
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 64 64] $rcx
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	movq	%rcx, 56(%rsp)                  # 8-byte Spill
.Ltmp78:
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	.loc	0 349 15 is_stmt 1              # liblzma/lzma/lzma_decoder.c:349:15
	andl	%ecx, %eax
.Ltmp79:
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
.LBB1_16:                               # %sw.bb
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 338 4                         # liblzma/lzma/lzma_decoder.c:338:4
	cmpq	$-1, 192(%rsp)                  # 8-byte Folded Reload
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
.Ltmp80:
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 353 7                         # liblzma/lzma/lzma_decoder.c:353:7
	je	.LBB1_18
.Ltmp81:
# %bb.17:                               # %sw.bb
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 7 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:7
	movq	112(%rsp), %rcx                 # 8-byte Reload
	.loc	0 353 7                         # liblzma/lzma/lzma_decoder.c:353:7
	cmpq	%rcx, 56(%rsp)                  # 8-byte Folded Reload
	je	.LBB1_576
.Ltmp82:
.LBB1_18:                               # %do.body
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 356 3 is_stmt 1               # liblzma/lzma/lzma_decoder.c:356:3
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp83:
	.loc	0 356 3 is_stmt 0               # liblzma/lzma/lzma_decoder.c:356:3
	ja	.LBB1_21
.Ltmp84:
# %bb.19:                               # %if.then45
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 356 3                         # liblzma/lzma/lzma_decoder.c:356:3
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp85:
	.loc	0 356 3                         # liblzma/lzma/lzma_decoder.c:356:3
	je	.LBB1_654
.Ltmp86:
# %bb.20:                               # %if.end50
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 3                           # liblzma/lzma/lzma_decoder.c:0:3
	movq	%r11, %rdx
	.loc	0 356 3                         # liblzma/lzma/lzma_decoder.c:356:3
	movl	%ebx, %ecx
	shll	$8, %ecx
.Ltmp87:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	shll	$8, %r15d
.Ltmp88:
	movzbl	(%r8,%r14), %r9d
	incq	%r14
.Ltmp89:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r9d, %r15d
.Ltmp90:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	.loc	0 356 3                         # liblzma/lzma/lzma_decoder.c:356:3
	movl	%ecx, %ebx
	jmp	.LBB1_22
.Ltmp91:
.LBB1_21:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 3                           # liblzma/lzma/lzma_decoder.c:0:3
	movq	%r11, %rdx
	movl	%ebx, %ecx
.Ltmp92:
.LBB1_22:                               # %do.end
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 356 3                         # liblzma/lzma/lzma_decoder.c:356:3
	shrl	$11, %ebx
	movl	%r12d, %r9d
	shlq	$5, %r9
	addq	%rdi, %r9
	movl	%eax, %r11d
	leaq	(%r9,%r11,2), %r10
	addq	$24576, %r10                    # imm = 0x6000
	movzwl	24576(%r9,%r11,2), %r11d
	imull	%r11d, %ebx
.Ltmp93:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 356 3                         # liblzma/lzma/lzma_decoder.c:356:3
	movl	%r15d, %r9d
	subl	%ebx, %r9d
.Ltmp94:
	.loc	0 356 3                         # liblzma/lzma/lzma_decoder.c:356:3
	jae	.LBB1_80
.Ltmp95:
# %bb.23:                               # %do.body65
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 3                           # liblzma/lzma/lzma_decoder.c:0:3
	movl	$2048, %eax                     # imm = 0x800
.Ltmp96:
	.loc	0 357 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:357:4
	subl	%r11d, %eax
	shrl	$5, %eax
	addl	%r11d, %eax
	movw	%ax, (%r10)
	movq	56(%rsp), %r11                  # 8-byte Reload
.Ltmp97:
	.loc	0 361 12                        # liblzma/lzma/lzma_decoder.c:361:12
	movl	%r11d, %r9d
	andl	160(%rsp), %r9d                 # 4-byte Folded Reload
	movq	152(%rsp), %r13                 # 8-byte Reload
.Ltmp98:
	movl	%r13d, %ecx
	shlq	%cl, %r9
	xorl	%ecx, %ecx
.Ltmp99:
	#DEBUG_VALUE: dict_get:dict <- undef
	#DEBUG_VALUE: dict_get:distance <- 0
	.file	12 "liblzma/lz" "lz_decoder.h" md5 0x27344aa2da5754ad4a118fbd9137003b
	.loc	12 106 16                       # liblzma/lz/lz_decoder.h:106:16
	testq	%r11, %r11
	.loc	12 106 7 is_stmt 0              # liblzma/lz/lz_decoder.h:106:7
	cmoveq	%rsi, %rcx
	movq	96(%rsp), %rax                  # 8-byte Reload
	.loc	12 105 9 is_stmt 1              # liblzma/lz/lz_decoder.h:105:9
	addq	%r11, %rax
	movzbl	-1(%rcx,%rax), %r10d
	movb	$8, %cl
.Ltmp100:
	.loc	0 361 12                        # liblzma/lzma/lzma_decoder.c:361:12
	subb	%r13b, %cl
	shrl	%cl, %r10d
	addq	%r9, %r10
	leaq	(%r10,%r10,2), %rdx
.Ltmp101:
	shlq	$9, %rdx
	addq	%rdi, %rdx
.Ltmp102:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	.loc	0 0 12 is_stmt 0                # liblzma/lzma/lzma_decoder.c:0:12
	movl	$1, %r13d
.Ltmp103:
	#DEBUG_VALUE: lzma_decode:symbol <- 1
	.loc	0 366 8 is_stmt 1               # liblzma/lzma/lzma_decoder.c:366:8
	cmpl	$6, %r12d
.Ltmp104:
	.loc	0 366 8 is_stmt 0               # liblzma/lzma/lzma_decoder.c:366:8
	ja	.LBB1_473
.Ltmp105:
# %bb.24:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- 1
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: dict_get:distance <- 0
	.loc	0 0 8                           # liblzma/lzma/lzma_decoder.c:0:8
	movq	%rdx, %r11
.Ltmp106:
.LBB1_25:                               # %do.body101
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 374 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:374:5
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp107:
	.loc	0 374 5 is_stmt 0               # liblzma/lzma/lzma_decoder.c:374:5
	ja	.LBB1_28
.Ltmp108:
# %bb.26:                               # %if.then105
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 374 5                         # liblzma/lzma/lzma_decoder.c:374:5
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp109:
	.loc	0 374 5                         # liblzma/lzma/lzma_decoder.c:374:5
	je	.LBB1_625
.Ltmp110:
# %bb.27:                               # %if.end110
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
	shll	$8, %eax
.Ltmp111:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	shll	$8, %r15d
.Ltmp112:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp113:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%ecx, %r15d
.Ltmp114:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	.loc	0 374 5                         # liblzma/lzma/lzma_decoder.c:374:5
	movl	%eax, %ebx
	jmp	.LBB1_29
.Ltmp115:
.LBB1_28:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%ebx, %eax
.Ltmp116:
.LBB1_29:                               # %do.end122
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 374 5                         # liblzma/lzma/lzma_decoder.c:374:5
	shrl	$11, %ebx
	movl	%r13d, %r9d
	movzwl	(%r11,%r9,2), %r10d
	imull	%r10d, %ebx
.Ltmp117:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 374 5                         # liblzma/lzma/lzma_decoder.c:374:5
	addl	%r13d, %r13d
.Ltmp118:
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	movl	%r15d, %ecx
	subl	%ebx, %ecx
.Ltmp119:
	.loc	0 374 5                         # liblzma/lzma/lzma_decoder.c:374:5
	jae	.LBB1_34
.Ltmp120:
# %bb.30:                               # %do.body133
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	$2048, %eax                     # imm = 0x800
.Ltmp121:
	.loc	0 374 5                         # liblzma/lzma/lzma_decoder.c:374:5
	subl	%r10d, %eax
	shrl	$5, %eax
	addl	%r10d, %eax
	movw	%ax, (%r11,%r9,2)
.Ltmp122:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
.LBB1_31:                               # %do.body171
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 375 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:375:5
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp123:
	.loc	0 375 5 is_stmt 0               # liblzma/lzma/lzma_decoder.c:375:5
	ja	.LBB1_35
.Ltmp124:
.LBB1_32:                               # %if.then175
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 375 5                         # liblzma/lzma/lzma_decoder.c:375:5
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp125:
	.loc	0 375 5                         # liblzma/lzma/lzma_decoder.c:375:5
	je	.LBB1_627
.Ltmp126:
# %bb.33:                               # %if.end180
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
	shll	$8, %eax
.Ltmp127:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	shll	$8, %r15d
.Ltmp128:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp129:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%ecx, %r15d
.Ltmp130:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	.loc	0 375 5                         # liblzma/lzma/lzma_decoder.c:375:5
	movl	%eax, %ebx
	jmp	.LBB1_36
.Ltmp131:
.LBB1_34:                               # %do.body148
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 374 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:374:5
	subl	%ebx, %eax
.Ltmp132:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 5 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:5
	movq	%r11, %rdx
	.loc	0 374 5                         # liblzma/lzma/lzma_decoder.c:374:5
	movl	%r10d, %r11d
.Ltmp133:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, (%rdx,%r9,2)
.Ltmp134:
	.loc	0 374 5                         # liblzma/lzma/lzma_decoder.c:374:5
	orl	$1, %r13d
.Ltmp135:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%eax, %ebx
.Ltmp136:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%ecx, %r15d
.Ltmp137:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 375 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:375:5
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp138:
	.loc	0 375 5 is_stmt 0               # liblzma/lzma/lzma_decoder.c:375:5
	jbe	.LBB1_32
.Ltmp139:
.LBB1_35:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%ebx, %eax
.Ltmp140:
.LBB1_36:                               # %do.end192
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 375 5                         # liblzma/lzma/lzma_decoder.c:375:5
	shrl	$11, %ebx
	movl	%r13d, %r9d
	movzwl	(%r11,%r9,2), %r10d
	imull	%r10d, %ebx
.Ltmp141:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 375 5                         # liblzma/lzma/lzma_decoder.c:375:5
	addl	%r13d, %r13d
.Ltmp142:
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	movl	%r15d, %ecx
	subl	%ebx, %ecx
.Ltmp143:
	.loc	0 375 5                         # liblzma/lzma/lzma_decoder.c:375:5
	jae	.LBB1_41
.Ltmp144:
# %bb.37:                               # %do.body203
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	$2048, %eax                     # imm = 0x800
.Ltmp145:
	.loc	0 375 5                         # liblzma/lzma/lzma_decoder.c:375:5
	subl	%r10d, %eax
	shrl	$5, %eax
	addl	%r10d, %eax
	movw	%ax, (%r11,%r9,2)
.Ltmp146:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
.LBB1_38:                               # %do.body242
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 376 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:376:5
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp147:
	.loc	0 376 5 is_stmt 0               # liblzma/lzma/lzma_decoder.c:376:5
	ja	.LBB1_42
.Ltmp148:
.LBB1_39:                               # %if.then246
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 376 5                         # liblzma/lzma/lzma_decoder.c:376:5
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp149:
	.loc	0 376 5                         # liblzma/lzma/lzma_decoder.c:376:5
	je	.LBB1_618
.Ltmp150:
# %bb.40:                               # %if.end251
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
	shll	$8, %eax
.Ltmp151:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	shll	$8, %r15d
.Ltmp152:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp153:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%ecx, %r15d
.Ltmp154:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	.loc	0 376 5                         # liblzma/lzma/lzma_decoder.c:376:5
	movl	%eax, %ebx
	jmp	.LBB1_43
.Ltmp155:
.LBB1_41:                               # %do.body219
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 375 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:375:5
	subl	%ebx, %eax
.Ltmp156:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 5 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:5
	movq	%r11, %rdx
	.loc	0 375 5                         # liblzma/lzma/lzma_decoder.c:375:5
	movl	%r10d, %r11d
.Ltmp157:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, (%rdx,%r9,2)
.Ltmp158:
	.loc	0 375 5                         # liblzma/lzma/lzma_decoder.c:375:5
	orl	$1, %r13d
.Ltmp159:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%eax, %ebx
.Ltmp160:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%ecx, %r15d
.Ltmp161:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 376 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:376:5
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp162:
	.loc	0 376 5 is_stmt 0               # liblzma/lzma/lzma_decoder.c:376:5
	jbe	.LBB1_39
.Ltmp163:
.LBB1_42:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%ebx, %eax
.Ltmp164:
.LBB1_43:                               # %do.end263
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 376 5                         # liblzma/lzma/lzma_decoder.c:376:5
	shrl	$11, %ebx
	movl	%r13d, %r9d
	movzwl	(%r11,%r9,2), %r10d
	imull	%r10d, %ebx
.Ltmp165:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 376 5                         # liblzma/lzma/lzma_decoder.c:376:5
	addl	%r13d, %r13d
.Ltmp166:
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	movl	%r15d, %ecx
	subl	%ebx, %ecx
.Ltmp167:
	.loc	0 376 5                         # liblzma/lzma/lzma_decoder.c:376:5
	jae	.LBB1_48
.Ltmp168:
# %bb.44:                               # %do.body274
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	$2048, %eax                     # imm = 0x800
.Ltmp169:
	.loc	0 376 5                         # liblzma/lzma/lzma_decoder.c:376:5
	subl	%r10d, %eax
	shrl	$5, %eax
	addl	%r10d, %eax
	movw	%ax, (%r11,%r9,2)
.Ltmp170:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
.LBB1_45:                               # %do.body313
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 377 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:377:5
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp171:
	.loc	0 377 5 is_stmt 0               # liblzma/lzma/lzma_decoder.c:377:5
	ja	.LBB1_49
.Ltmp172:
.LBB1_46:                               # %if.then317
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 377 5                         # liblzma/lzma/lzma_decoder.c:377:5
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp173:
	.loc	0 377 5                         # liblzma/lzma/lzma_decoder.c:377:5
	je	.LBB1_620
.Ltmp174:
# %bb.47:                               # %if.end322
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
	shll	$8, %eax
.Ltmp175:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	shll	$8, %r15d
.Ltmp176:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp177:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp178:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%ecx, %r15d
.Ltmp179:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	.loc	0 377 5                         # liblzma/lzma/lzma_decoder.c:377:5
	movl	%eax, %ebx
	jmp	.LBB1_50
.Ltmp180:
.LBB1_48:                               # %do.body290
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 376 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:376:5
	subl	%ebx, %eax
.Ltmp181:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 5 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:5
	movq	%r11, %rdx
	.loc	0 376 5                         # liblzma/lzma/lzma_decoder.c:376:5
	movl	%r10d, %r11d
.Ltmp182:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, (%rdx,%r9,2)
.Ltmp183:
	.loc	0 376 5                         # liblzma/lzma/lzma_decoder.c:376:5
	orl	$1, %r13d
.Ltmp184:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%eax, %ebx
.Ltmp185:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%ecx, %r15d
.Ltmp186:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 377 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:377:5
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp187:
	.loc	0 377 5 is_stmt 0               # liblzma/lzma/lzma_decoder.c:377:5
	jbe	.LBB1_46
.Ltmp188:
.LBB1_49:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%ebx, %eax
.Ltmp189:
.LBB1_50:                               # %do.end334
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 377 5                         # liblzma/lzma/lzma_decoder.c:377:5
	shrl	$11, %ebx
	movl	%r13d, %r9d
	movzwl	(%r11,%r9,2), %r10d
	imull	%r10d, %ebx
.Ltmp190:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 377 5                         # liblzma/lzma/lzma_decoder.c:377:5
	addl	%r13d, %r13d
.Ltmp191:
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	movl	%r15d, %ecx
	subl	%ebx, %ecx
.Ltmp192:
	.loc	0 377 5                         # liblzma/lzma/lzma_decoder.c:377:5
	jae	.LBB1_55
.Ltmp193:
# %bb.51:                               # %do.body345
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	$2048, %eax                     # imm = 0x800
.Ltmp194:
	.loc	0 377 5                         # liblzma/lzma/lzma_decoder.c:377:5
	subl	%r10d, %eax
	shrl	$5, %eax
	addl	%r10d, %eax
	movw	%ax, (%r11,%r9,2)
.Ltmp195:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
.LBB1_52:                               # %do.body384
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 378 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:378:5
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp196:
	.loc	0 378 5 is_stmt 0               # liblzma/lzma/lzma_decoder.c:378:5
	ja	.LBB1_56
.Ltmp197:
.LBB1_53:                               # %if.then388
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 378 5                         # liblzma/lzma/lzma_decoder.c:378:5
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp198:
	.loc	0 378 5                         # liblzma/lzma/lzma_decoder.c:378:5
	je	.LBB1_623
.Ltmp199:
# %bb.54:                               # %if.end393
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
	shll	$8, %eax
.Ltmp200:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	shll	$8, %r15d
.Ltmp201:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp202:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp203:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%ecx, %r15d
.Ltmp204:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	.loc	0 378 5                         # liblzma/lzma/lzma_decoder.c:378:5
	movl	%eax, %ebx
	jmp	.LBB1_57
.Ltmp205:
.LBB1_55:                               # %do.body361
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 377 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:377:5
	subl	%ebx, %eax
.Ltmp206:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 5 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:5
	movq	%r11, %rdx
	.loc	0 377 5                         # liblzma/lzma/lzma_decoder.c:377:5
	movl	%r10d, %r11d
.Ltmp207:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, (%rdx,%r9,2)
.Ltmp208:
	.loc	0 377 5                         # liblzma/lzma/lzma_decoder.c:377:5
	orl	$1, %r13d
.Ltmp209:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%eax, %ebx
.Ltmp210:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%ecx, %r15d
.Ltmp211:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 378 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:378:5
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp212:
	.loc	0 378 5 is_stmt 0               # liblzma/lzma/lzma_decoder.c:378:5
	jbe	.LBB1_53
.Ltmp213:
.LBB1_56:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%ebx, %eax
.Ltmp214:
.LBB1_57:                               # %do.end405
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 378 5                         # liblzma/lzma/lzma_decoder.c:378:5
	shrl	$11, %ebx
	movl	%r13d, %r9d
	movzwl	(%r11,%r9,2), %r10d
	imull	%r10d, %ebx
.Ltmp215:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 378 5                         # liblzma/lzma/lzma_decoder.c:378:5
	addl	%r13d, %r13d
.Ltmp216:
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	movl	%r15d, %ecx
	subl	%ebx, %ecx
.Ltmp217:
	.loc	0 378 5                         # liblzma/lzma/lzma_decoder.c:378:5
	jae	.LBB1_62
.Ltmp218:
# %bb.58:                               # %do.body416
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	$2048, %eax                     # imm = 0x800
.Ltmp219:
	.loc	0 378 5                         # liblzma/lzma/lzma_decoder.c:378:5
	subl	%r10d, %eax
	shrl	$5, %eax
	addl	%r10d, %eax
	movw	%ax, (%r11,%r9,2)
.Ltmp220:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
.LBB1_59:                               # %do.body455
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 379 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:379:5
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp221:
	.loc	0 379 5 is_stmt 0               # liblzma/lzma/lzma_decoder.c:379:5
	ja	.LBB1_63
.Ltmp222:
.LBB1_60:                               # %if.then459
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 379 5                         # liblzma/lzma/lzma_decoder.c:379:5
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp223:
	.loc	0 379 5                         # liblzma/lzma/lzma_decoder.c:379:5
	je	.LBB1_616
.Ltmp224:
# %bb.61:                               # %if.end464
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
	shll	$8, %eax
.Ltmp225:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	shll	$8, %r15d
.Ltmp226:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp227:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp228:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%ecx, %r15d
.Ltmp229:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	.loc	0 379 5                         # liblzma/lzma/lzma_decoder.c:379:5
	movl	%eax, %ebx
	jmp	.LBB1_64
.Ltmp230:
.LBB1_62:                               # %do.body432
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 378 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:378:5
	subl	%ebx, %eax
.Ltmp231:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 5 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:5
	movq	%r11, %rdx
	.loc	0 378 5                         # liblzma/lzma/lzma_decoder.c:378:5
	movl	%r10d, %r11d
.Ltmp232:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, (%rdx,%r9,2)
.Ltmp233:
	.loc	0 378 5                         # liblzma/lzma/lzma_decoder.c:378:5
	orl	$1, %r13d
.Ltmp234:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%eax, %ebx
.Ltmp235:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%ecx, %r15d
.Ltmp236:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 379 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:379:5
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp237:
	.loc	0 379 5 is_stmt 0               # liblzma/lzma/lzma_decoder.c:379:5
	jbe	.LBB1_60
.Ltmp238:
.LBB1_63:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%ebx, %eax
.Ltmp239:
.LBB1_64:                               # %do.end476
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 379 5                         # liblzma/lzma/lzma_decoder.c:379:5
	shrl	$11, %ebx
	movl	%r13d, %r9d
	movzwl	(%r11,%r9,2), %r10d
	imull	%r10d, %ebx
.Ltmp240:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 379 5                         # liblzma/lzma/lzma_decoder.c:379:5
	addl	%r13d, %r13d
.Ltmp241:
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	movl	%r15d, %ecx
	subl	%ebx, %ecx
.Ltmp242:
	.loc	0 379 5                         # liblzma/lzma/lzma_decoder.c:379:5
	jae	.LBB1_69
.Ltmp243:
# %bb.65:                               # %do.body487
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	$2048, %eax                     # imm = 0x800
.Ltmp244:
	.loc	0 379 5                         # liblzma/lzma/lzma_decoder.c:379:5
	subl	%r10d, %eax
	shrl	$5, %eax
	addl	%r10d, %eax
	movw	%ax, (%r11,%r9,2)
.Ltmp245:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
.LBB1_66:                               # %do.body526
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 380 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:380:5
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp246:
	.loc	0 380 5 is_stmt 0               # liblzma/lzma/lzma_decoder.c:380:5
	ja	.LBB1_70
.Ltmp247:
.LBB1_67:                               # %if.then530
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 380 5                         # liblzma/lzma/lzma_decoder.c:380:5
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp248:
	.loc	0 380 5                         # liblzma/lzma/lzma_decoder.c:380:5
	je	.LBB1_617
.Ltmp249:
# %bb.68:                               # %if.end535
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
	shll	$8, %eax
.Ltmp250:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	shll	$8, %r15d
.Ltmp251:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp252:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp253:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%ecx, %r15d
.Ltmp254:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	.loc	0 380 5                         # liblzma/lzma/lzma_decoder.c:380:5
	movl	%eax, %ebx
	jmp	.LBB1_71
.Ltmp255:
.LBB1_69:                               # %do.body503
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 379 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:379:5
	subl	%ebx, %eax
.Ltmp256:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 5 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:5
	movq	%r11, %rdx
	.loc	0 379 5                         # liblzma/lzma/lzma_decoder.c:379:5
	movl	%r10d, %r11d
.Ltmp257:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, (%rdx,%r9,2)
.Ltmp258:
	.loc	0 379 5                         # liblzma/lzma/lzma_decoder.c:379:5
	orl	$1, %r13d
.Ltmp259:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%eax, %ebx
.Ltmp260:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%ecx, %r15d
.Ltmp261:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 380 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:380:5
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp262:
	.loc	0 380 5 is_stmt 0               # liblzma/lzma/lzma_decoder.c:380:5
	jbe	.LBB1_67
.Ltmp263:
.LBB1_70:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%ebx, %eax
.Ltmp264:
.LBB1_71:                               # %do.end547
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 380 5                         # liblzma/lzma/lzma_decoder.c:380:5
	shrl	$11, %ebx
	movl	%r13d, %r9d
	movzwl	(%r11,%r9,2), %r10d
	imull	%r10d, %ebx
.Ltmp265:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 380 5                         # liblzma/lzma/lzma_decoder.c:380:5
	addl	%r13d, %r13d
.Ltmp266:
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	movl	%r15d, %ecx
	subl	%ebx, %ecx
.Ltmp267:
	.loc	0 380 5                         # liblzma/lzma/lzma_decoder.c:380:5
	jae	.LBB1_74
.Ltmp268:
# %bb.72:                               # %do.body558
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	$2048, %eax                     # imm = 0x800
.Ltmp269:
	.loc	0 380 5                         # liblzma/lzma/lzma_decoder.c:380:5
	subl	%r10d, %eax
	shrl	$5, %eax
	addl	%r10d, %eax
	movw	%ax, (%r11,%r9,2)
.Ltmp270:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
.LBB1_73:                               # %do.body597
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 381 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:381:5
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp271:
	.loc	0 381 5 is_stmt 0               # liblzma/lzma/lzma_decoder.c:381:5
	jbe	.LBB1_75
	jmp	.LBB1_77
.Ltmp272:
.LBB1_74:                               # %do.body574
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 380 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:380:5
	subl	%ebx, %eax
.Ltmp273:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 5 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:5
	movq	%r11, %rdx
	.loc	0 380 5                         # liblzma/lzma/lzma_decoder.c:380:5
	movl	%r10d, %r11d
.Ltmp274:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, (%rdx,%r9,2)
.Ltmp275:
	.loc	0 380 5                         # liblzma/lzma/lzma_decoder.c:380:5
	orl	$1, %r13d
.Ltmp276:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%eax, %ebx
.Ltmp277:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%ecx, %r15d
.Ltmp278:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 381 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:381:5
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp279:
	.loc	0 381 5 is_stmt 0               # liblzma/lzma/lzma_decoder.c:381:5
	ja	.LBB1_77
.Ltmp280:
.LBB1_75:                               # %if.then601
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 381 5                         # liblzma/lzma/lzma_decoder.c:381:5
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp281:
	.loc	0 381 5                         # liblzma/lzma/lzma_decoder.c:381:5
	je	.LBB1_624
.Ltmp282:
# %bb.76:                               # %if.end606
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	shll	$8, %ebx
.Ltmp283:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	shll	$8, %r15d
.Ltmp284:
	movzbl	(%r8,%r14), %eax
	incq	%r14
.Ltmp285:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %eax
.Ltmp286:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $eax
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%eax, %r15d
.Ltmp287:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
.LBB1_77:                               # %do.end618
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 381 5                         # liblzma/lzma/lzma_decoder.c:381:5
	movl	%ebx, %eax
	shrl	$11, %eax
	movl	%r13d, %r9d
	movzwl	(%r11,%r9,2), %r10d
	imull	%r10d, %eax
.Ltmp288:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $eax
	.loc	0 381 5                         # liblzma/lzma/lzma_decoder.c:381:5
	addl	%r13d, %r13d
.Ltmp289:
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	movl	%r15d, %ecx
	subl	%eax, %ecx
.Ltmp290:
	.loc	0 381 5                         # liblzma/lzma/lzma_decoder.c:381:5
	jae	.LBB1_79
.Ltmp291:
# %bb.78:                               # %do.body629
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	$2048, %ecx                     # imm = 0x800
.Ltmp292:
	.loc	0 381 5                         # liblzma/lzma/lzma_decoder.c:381:5
	subl	%r10d, %ecx
	shrl	$5, %ecx
	addl	%r10d, %ecx
	movw	%cx, (%r11,%r9,2)
.Ltmp293:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 381 5                         # liblzma/lzma/lzma_decoder.c:381:5
	jmp	.LBB1_536
.Ltmp294:
.LBB1_79:                               # %do.body645
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $eax
	.loc	0 381 5                         # liblzma/lzma/lzma_decoder.c:381:5
	subl	%eax, %ebx
.Ltmp295:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r10d, %eax
.Ltmp296:
	shrl	$5, %eax
	subl	%eax, %r10d
	movw	%r10w, (%r11,%r9,2)
.Ltmp297:
	.loc	0 381 5                         # liblzma/lzma/lzma_decoder.c:381:5
	orl	$1, %r13d
.Ltmp298:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%ebx, %eax
	movl	%ecx, %r15d
	jmp	.LBB1_536
.Ltmp299:
.LBB1_80:                               # %do.body1302
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 486 3 is_stmt 1               # liblzma/lzma/lzma_decoder.c:486:3
	subl	%ebx, %ecx
.Ltmp300:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r11d, %ebx
.Ltmp301:
	shrl	$5, %ebx
	subl	%ebx, %r11d
	movw	%r11w, (%r10)
	movl	%ecx, %ebx
.Ltmp302:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 3 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:3
	movl	%r9d, %r15d
	movq	%rdx, %r11
.Ltmp303:
.LBB1_81:                               # %do.body1325
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%eax, 4(%rsp)                   # 4-byte Spill
.Ltmp304:
	#DEBUG_VALUE: lzma_decode:pos_state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%rsi, %rax
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp305:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	movl	(%rsp), %r9d                    # 4-byte Reload
	movl	52(%rsp), %ecx                  # 4-byte Reload
	movl	%ecx, (%rsp)                    # 4-byte Spill
.Ltmp306:
	#DEBUG_VALUE: lzma_decode:rep2 <- $r9d
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:pos_state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- $r9d
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 489 3 is_stmt 1               # liblzma/lzma/lzma_decoder.c:489:3
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
	movq	%r11, %rsi
.Ltmp307:
	.loc	0 489 3 is_stmt 0               # liblzma/lzma/lzma_decoder.c:489:3
	ja	.LBB1_84
.Ltmp308:
# %bb.82:                               # %if.then1329
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- $r9d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rsi
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 489 3                         # liblzma/lzma/lzma_decoder.c:489:3
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp309:
	.loc	0 489 3                         # liblzma/lzma/lzma_decoder.c:489:3
	je	.LBB1_612
.Ltmp310:
# %bb.83:                               # %if.end1334
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- $r9d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rsi
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %r10d
	shll	$8, %r10d
.Ltmp311:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $r10d
	shll	$8, %r15d
.Ltmp312:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp313:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp314:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 3                           # liblzma/lzma/lzma_decoder.c:0:3
	movl	%ecx, %r15d
.Ltmp315:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	.loc	0 489 3                         # liblzma/lzma/lzma_decoder.c:489:3
	movl	%r10d, %ebx
	jmp	.LBB1_85
.Ltmp316:
.LBB1_84:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- $r9d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rsi
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 3                           # liblzma/lzma/lzma_decoder.c:0:3
	movl	%ebx, %r10d
.Ltmp317:
.LBB1_85:                               # %do.end1346
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- $r9d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rsi
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $r10d
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 489 3                         # liblzma/lzma/lzma_decoder.c:489:3
	shrl	$11, %ebx
	movl	%r12d, %ecx
	movzwl	24960(%rdi,%rcx,2), %ebp
	imull	%ebp, %ebx
.Ltmp318:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 489 3                         # liblzma/lzma/lzma_decoder.c:489:3
	movl	%r15d, %r11d
	subl	%ebx, %r11d
.Ltmp319:
	.loc	0 489 3                         # liblzma/lzma/lzma_decoder.c:489:3
	jae	.LBB1_99
.Ltmp320:
# %bb.86:                               # %do.body1357
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $r10d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- $r9d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rsi
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 3                           # liblzma/lzma/lzma_decoder.c:0:3
	movl	$2048, %r10d                    # imm = 0x800
.Ltmp321:
	.loc	0 491 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:491:4
	subl	%ebp, %r10d
	shrl	$5, %r10d
	addl	%ebp, %r10d
	movw	%r10w, 24960(%rdi,%rcx,2)
.Ltmp322:
	.loc	0 492 4                         # liblzma/lzma/lzma_decoder.c:492:4
	xorl	%ecx, %ecx
	cmpl	$7, %r12d
	setae	%cl
	leal	7(%rcx,%rcx,2), %r12d
.Ltmp323:
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movl	$1, %r13d
.Ltmp324:
	#DEBUG_VALUE: lzma_decode:rep3 <- $r9d
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- 1
	movq	24(%rsp), %rbp                  # 8-byte Reload
	movl	%ebp, 52(%rsp)                  # 4-byte Spill
.Ltmp325:
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	movl	%r9d, 92(%rsp)                  # 4-byte Spill
.Ltmp326:
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	movq	%rsi, %r11
	movq	%rax, %rsi
.Ltmp327:
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	movl	4(%rsp), %eax                   # 4-byte Reload
.Ltmp328:
.LBB1_87:                               # %do.body1377
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 501 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:501:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp329:
	.loc	0 501 4 is_stmt 0               # liblzma/lzma/lzma_decoder.c:501:4
	ja	.LBB1_90
.Ltmp330:
# %bb.88:                               # %if.then1381
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp331:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	je	.LBB1_635
.Ltmp332:
# %bb.89:                               # %if.end1386
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %ecx
	shll	$8, %ecx
.Ltmp333:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	shll	$8, %r15d
.Ltmp334:
	movzbl	(%r8,%r14), %r9d
	incq	%r14
.Ltmp335:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %r9d
.Ltmp336:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r9d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r9d, %r15d
.Ltmp337:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	%ecx, %ebx
	jmp	.LBB1_91
.Ltmp338:
.LBB1_90:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ebx, %ecx
.Ltmp339:
.LBB1_91:                               # %do.end1398
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	shrl	$11, %ebx
	movzwl	26212(%rdi), %r10d
	imull	%r10d, %ebx
.Ltmp340:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	%r15d, %r9d
	subl	%ebx, %r9d
.Ltmp341:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	jae	.LBB1_210
.Ltmp342:
# %bb.92:                               # %do.body1407
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %ecx                     # imm = 0x800
.Ltmp343:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	subl	%r10d, %ecx
	shrl	$5, %ecx
	addl	%r10d, %ecx
	movw	%cx, 26212(%rdi)
.Ltmp344:
.LBB1_93:                               # %do.body1423
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp345:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	ja	.LBB1_96
.Ltmp346:
# %bb.94:                               # %if.then1427
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp347:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	je	.LBB1_632
.Ltmp348:
# %bb.95:                               # %if.end1432
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, %edx
	movq	%r11, %r12
.Ltmp349:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:state <- $edx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	%ebx, %ecx
	shll	$8, %ecx
.Ltmp350:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	shll	$8, %r15d
.Ltmp351:
	movzbl	(%r8,%r14), %r9d
	incq	%r14
.Ltmp352:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %r9d
.Ltmp353:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r9d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r9d, %r15d
.Ltmp354:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	%ecx, %ebx
	jmp	.LBB1_97
.Ltmp355:
.LBB1_96:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, %edx
	movq	%r11, %r12
.Ltmp356:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:state <- $edx
	movl	%ebx, %ecx
.Ltmp357:
.LBB1_97:                               # %do.end1444
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	shrl	$11, %ebx
	movl	%eax, %r9d
	shlq	$4, %r9
	addq	%rdi, %r9
	movl	%r13d, %r11d
	leaq	(%r9,%r11,2), %r10
	addq	$26216, %r10                    # imm = 0x6668
	movzwl	26216(%r9,%r11,2), %r11d
	imull	%r11d, %ebx
.Ltmp358:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	addl	%r13d, %r13d
.Ltmp359:
	movl	%r15d, %r9d
	subl	%ebx, %r9d
.Ltmp360:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	jae	.LBB1_193
.Ltmp361:
# %bb.98:                               # %do.body1458
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %ecx                     # imm = 0x800
.Ltmp362:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	subl	%r11d, %ecx
	shrl	$5, %ecx
	addl	%r11d, %ecx
	movw	%cx, (%r10)
.Ltmp363:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	jmp	.LBB1_194
.Ltmp364:
.LBB1_99:                               # %do.body3917
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $r10d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- $r9d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rsi
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 676 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:676:4
	subl	%ebx, %r10d
.Ltmp365:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $r10d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%ebp, %ebx
.Ltmp366:
	shrl	$5, %ebx
	subl	%ebx, %ebp
	movw	%bp, 24960(%rdi,%rcx,2)
.Ltmp367:
	#DEBUG_VALUE: dict_is_distance_valid:dict <- undef
	#DEBUG_VALUE: dict_is_distance_valid:distance <- 0
	.loc	12 122 20                       # liblzma/lz/lz_decoder.h:122:20
	cmpq	$0, 72(%rsp)                    # 8-byte Folded Reload
.Ltmp368:
	.loc	0 687 8                         # liblzma/lzma/lzma_decoder.c:687:8
	je	.LBB1_653
.Ltmp369:
# %bb.100:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $r10d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- $r9d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rsi
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: dict_is_distance_valid:distance <- 0
	.loc	0 0 8 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:8
	movl	(%rsp), %ecx                    # 4-byte Reload
	movl	%ecx, 52(%rsp)                  # 4-byte Spill
.Ltmp370:
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_deref] $rsp
	movl	%r9d, (%rsp)                    # 4-byte Spill
.Ltmp371:
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	movl	%r10d, %ebx
.Ltmp372:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%r11d, %r15d
	movq	24(%rsp), %rbp                  # 8-byte Reload
	movq	%rsi, %r11
	movq	%rax, %rsi
.Ltmp373:
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	movl	4(%rsp), %eax                   # 4-byte Reload
.Ltmp374:
.LBB1_101:                              # %do.body3939
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	movl	%r12d, %edx
.Ltmp375:
	.loc	0 693 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:693:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
	movq	%r11, %r12
.Ltmp376:
	#DEBUG_VALUE: lzma_decode:state <- $edx
	.loc	0 693 4 is_stmt 0               # liblzma/lzma/lzma_decoder.c:693:4
	ja	.LBB1_104
.Ltmp377:
# %bb.102:                              # %if.then3943
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 693 4                         # liblzma/lzma/lzma_decoder.c:693:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp378:
	.loc	0 693 4                         # liblzma/lzma/lzma_decoder.c:693:4
	je	.LBB1_639
.Ltmp379:
# %bb.103:                              # %if.end3948
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %ecx
	shll	$8, %ecx
.Ltmp380:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	shll	$8, %r15d
.Ltmp381:
	movzbl	(%r8,%r14), %r9d
	incq	%r14
.Ltmp382:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %r9d
.Ltmp383:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r9d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r9d, %r15d
.Ltmp384:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_105
.Ltmp385:
.LBB1_104:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %ecx
.Ltmp386:
.LBB1_105:                              # %do.end3960
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 693 4                         # liblzma/lzma/lzma_decoder.c:693:4
	movl	%ecx, %ebx
	shrl	$11, %ebx
	movl	%edx, %r10d
	movzwl	24984(%rdi,%r10,2), %r11d
	imull	%r11d, %ebx
.Ltmp387:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 693 4                         # liblzma/lzma/lzma_decoder.c:693:4
	movl	%r15d, %r9d
	subl	%ebx, %r9d
.Ltmp388:
	.loc	0 693 4                         # liblzma/lzma/lzma_decoder.c:693:4
	jae	.LBB1_115
.Ltmp389:
# %bb.106:                              # %do.body3971
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %ecx                     # imm = 0x800
.Ltmp390:
	.loc	0 694 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:694:5
	subl	%r11d, %ecx
	shrl	$5, %ecx
	addl	%r11d, %ecx
	movw	%cx, 24984(%rdi,%r10,2)
	movq	%r12, %r11
	movl	%edx, %r12d
.Ltmp391:
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
.LBB1_107:                              # %do.body3988
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 698 5                         # liblzma/lzma/lzma_decoder.c:698:5
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp392:
	.loc	0 698 5 is_stmt 0               # liblzma/lzma/lzma_decoder.c:698:5
	ja	.LBB1_110
.Ltmp393:
# %bb.108:                              # %if.then3992
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 698 5                         # liblzma/lzma/lzma_decoder.c:698:5
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp394:
	.loc	0 698 5                         # liblzma/lzma/lzma_decoder.c:698:5
	je	.LBB1_593
.Ltmp395:
# %bb.109:                              # %if.end3997
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r12d, %edx
	movq	%r11, %r12
.Ltmp396:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:state <- $edx
	.loc	0 698 5                         # liblzma/lzma/lzma_decoder.c:698:5
	movl	%ebx, %ecx
	shll	$8, %ecx
.Ltmp397:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	shll	$8, %r15d
.Ltmp398:
	movzbl	(%r8,%r14), %r9d
	incq	%r14
.Ltmp399:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %r9d
.Ltmp400:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r9d
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r9d, %r15d
.Ltmp401:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_111
.Ltmp402:
.LBB1_110:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%r12d, %edx
	movq	%r11, %r12
.Ltmp403:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:state <- $edx
	movl	%ebx, %ecx
.Ltmp404:
.LBB1_111:                              # %do.end4009
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 698 5                         # liblzma/lzma/lzma_decoder.c:698:5
	movl	%ecx, %ebx
	shrl	$11, %ebx
	movl	%edx, %r9d
	shlq	$5, %r9
	addq	%rdi, %r9
	movl	%eax, %r11d
	leaq	(%r9,%r11,2), %r10
	addq	$25056, %r10                    # imm = 0x61E0
	movzwl	25056(%r9,%r11,2), %r11d
	imull	%r11d, %ebx
.Ltmp405:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 698 5                         # liblzma/lzma/lzma_decoder.c:698:5
	movl	%r15d, %r9d
	subl	%ebx, %r9d
.Ltmp406:
	.loc	0 698 5                         # liblzma/lzma/lzma_decoder.c:698:5
	jae	.LBB1_122
.Ltmp407:
# %bb.112:                              # %do.body4022
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	$2048, %eax                     # imm = 0x800
.Ltmp408:
	.loc	0 700 6 is_stmt 1               # liblzma/lzma/lzma_decoder.c:700:6
	subl	%r11d, %eax
	shrl	$5, %eax
	addl	%r11d, %eax
	movw	%ax, (%r10)
.Ltmp409:
	.loc	0 703 6                         # liblzma/lzma/lzma_decoder.c:703:6
	xorl	%eax, %eax
	cmpl	$7, %edx
	setae	%al
	leal	9(,%rax,2), %eax
.Ltmp410:
	#DEBUG_VALUE: lzma_decode:state <- $eax
	.loc	0 0 6 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:6
	movq	%r12, %r11
	movl	%eax, %r12d
.Ltmp411:
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
.LBB1_113:                              # %sw.bb4045
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: dict_get:dict <- undef
	#DEBUG_VALUE: dict_get:distance <- $ebp
	#DEBUG_VALUE: dict_put:dict <- undef
	#DEBUG_VALUE: dict_put:byte <- undef
	movl	108(%rsp), %r10d                # 4-byte Reload
	movq	56(%rsp), %rax                  # 8-byte Reload
.Ltmp412:
	.loc	12 189 6 is_stmt 1              # liblzma/lz/lz_decoder.h:189:6
	cmpq	112(%rsp), %rax                 # 8-byte Folded Reload
	movq	96(%rsp), %rcx                  # 8-byte Reload
.Ltmp413:
	.loc	12 189 6 is_stmt 0              # liblzma/lz/lz_decoder.h:189:6
	je	.LBB1_578
.Ltmp414:
# %bb.114:                              # %if.end.i7863
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: dict_get:distance <- $ebp
	.loc	12 0 6                          # liblzma/lz/lz_decoder.h:0:6
	movq	%r8, %rdx
.Ltmp415:
	.loc	12 105 9 is_stmt 1              # liblzma/lz/lz_decoder.h:105:9
	addq	%rcx, %rax
	movq	%rcx, %rsi
	.loc	12 105 31 is_stmt 0             # liblzma/lz/lz_decoder.h:105:31
	movl	%ebp, %ecx
	.loc	12 105 40                       # liblzma/lz/lz_decoder.h:105:40
	movq	%rcx, %r9
	notq	%r9
	.loc	12 105 9                        # liblzma/lz/lz_decoder.h:105:9
	addq	%rax, %r9
	xorl	%eax, %eax
	.loc	12 106 16 is_stmt 1             # liblzma/lz/lz_decoder.h:106:16
	cmpq	%rcx, 56(%rsp)                  # 8-byte Folded Reload
	movq	56(%rsp), %rcx                  # 8-byte Reload
	movq	80(%rsp), %r8                   # 8-byte Reload
	.loc	12 106 7 is_stmt 0              # liblzma/lz/lz_decoder.h:106:7
	cmovbeq	%r8, %rax
	.loc	12 105 9 is_stmt 1              # liblzma/lz/lz_decoder.h:105:9
	movzbl	(%rax,%r9), %eax
.Ltmp416:
	.loc	12 192 25                       # liblzma/lz/lz_decoder.h:192:25
	movb	%al, (%rsi,%rcx)
.Ltmp417:
	#DEBUG_VALUE: dict_put:byte <- $al
	.loc	12 0 25 is_stmt 0               # liblzma/lz/lz_decoder.h:0:25
	movq	%r8, %rsi
	.loc	12 192 21                       # liblzma/lz/lz_decoder.h:192:21
	incq	%rcx
.Ltmp418:
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 64 64] $rcx
	.loc	12 0 21                         # liblzma/lz/lz_decoder.h:0:21
	movq	72(%rsp), %rax                  # 8-byte Reload
.Ltmp419:
	.loc	12 194 6 is_stmt 1              # liblzma/lz/lz_decoder.h:194:6
	cmpq	%rax, %rcx
	cmovaq	%rcx, %rax
	movq	%rax, 72(%rsp)                  # 8-byte Spill
.Ltmp420:
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 128 64] undef
	.loc	12 0 6 is_stmt 0                # liblzma/lz/lz_decoder.h:0:6
	movq	%rdx, %r8
	movl	%r10d, %eax
.Ltmp421:
	#DEBUG_VALUE: dict_put:byte <- [DW_OP_plus_uconst 72, DW_OP_deref] $rsp
	.loc	12 194 6                        # liblzma/lz/lz_decoder.h:194:6
	jmp	.LBB1_15
.Ltmp422:
.LBB1_115:                              # %do.body4075
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 721 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:721:5
	subl	%ebx, %ecx
.Ltmp423:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r11d, %ebx
.Ltmp424:
	shrl	$5, %ebx
	subl	%ebx, %r11d
	movw	%r11w, 24984(%rdi,%r10,2)
	movl	%ecx, %ebx
.Ltmp425:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 5 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r9d, %r15d
	movq	%r12, %r11
	movl	%edx, %r12d
.Ltmp426:
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
.LBB1_116:                              # %do.body4094
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 728 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:728:5
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp427:
	.loc	0 728 5 is_stmt 0               # liblzma/lzma/lzma_decoder.c:728:5
	ja	.LBB1_119
.Ltmp428:
# %bb.117:                              # %if.then4098
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 728 5                         # liblzma/lzma/lzma_decoder.c:728:5
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp429:
	.loc	0 728 5                         # liblzma/lzma/lzma_decoder.c:728:5
	je	.LBB1_650
.Ltmp430:
# %bb.118:                              # %if.end4103
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r12d, %edx
	movq	%r11, %r12
.Ltmp431:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:state <- $edx
	.loc	0 728 5                         # liblzma/lzma/lzma_decoder.c:728:5
	shll	$8, %ebx
.Ltmp432:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	shll	$8, %r15d
.Ltmp433:
	movzbl	(%r8,%r14), %r9d
	incq	%r14
.Ltmp434:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %r9d
.Ltmp435:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r9d
	.loc	0 728 5                         # liblzma/lzma/lzma_decoder.c:728:5
	movl	%r9d, %r15d
	jmp	.LBB1_120
.Ltmp436:
.LBB1_119:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r12d, %edx
	movq	%r11, %r12
.Ltmp437:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:state <- $edx
	movl	%r15d, %r9d
.Ltmp438:
.LBB1_120:                              # %do.end4115
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r9d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r9d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 728 5                         # liblzma/lzma/lzma_decoder.c:728:5
	movl	%ebx, %ecx
	shrl	$11, %ecx
	movl	%edx, %r10d
	movzwl	25008(%rdi,%r10,2), %r11d
	imull	%r11d, %ecx
.Ltmp439:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	.loc	0 728 5                         # liblzma/lzma/lzma_decoder.c:728:5
	subl	%ecx, %r15d
.Ltmp440:
	.loc	0 728 5                         # liblzma/lzma/lzma_decoder.c:728:5
	jae	.LBB1_123
.Ltmp441:
# %bb.121:                              # %do.body4126
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r9d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	$2048, %ebx                     # imm = 0x800
.Ltmp442:
	.loc	0 729 6 is_stmt 1               # liblzma/lzma/lzma_decoder.c:729:6
	subl	%r11d, %ebx
	shrl	$5, %ebx
	addl	%r11d, %ebx
	movw	%bx, 25008(%rdi,%r10,2)
.Ltmp443:
	#DEBUG_VALUE: distance <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	.loc	0 0 6 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:6
	movl	52(%rsp), %r10d                 # 4-byte Reload
	movl	(%rsp), %r11d                   # 4-byte Reload
.Ltmp444:
	.loc	0 735 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:735:5
	jmp	.LBB1_132
.Ltmp445:
.LBB1_122:                              # %do.body4052
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 717 5                         # liblzma/lzma/lzma_decoder.c:717:5
	subl	%ebx, %ecx
.Ltmp446:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r11d, %ebx
.Ltmp447:
	shrl	$5, %ebx
	subl	%ebx, %r11d
	movw	%r11w, (%r10)
	movl	%ebp, %r10d
	movl	52(%rsp), %r11d                 # 4-byte Reload
	movl	%r11d, %ebp
.Ltmp448:
	#DEBUG_VALUE: lzma_decode:rep0 <- $r10d
	.loc	0 0 5 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:5
	movl	(%rsp), %r11d                   # 4-byte Reload
.Ltmp449:
	.loc	0 735 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:735:5
	jmp	.LBB1_132
.Ltmp450:
.LBB1_123:                              # %do.body4143
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r9d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	.loc	0 736 6                         # liblzma/lzma/lzma_decoder.c:736:6
	subl	%ecx, %ebx
.Ltmp451:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r11d, %ecx
.Ltmp452:
	shrl	$5, %ecx
	subl	%ecx, %r11d
	movw	%r11w, 25008(%rdi,%r10,2)
	movq	%r12, %r11
	movl	%edx, %r12d
.Ltmp453:
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
.LBB1_124:                              # %do.body4162
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 0 6 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:6
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp454:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	.loc	0 738 6 is_stmt 1               # liblzma/lzma/lzma_decoder.c:738:6
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp455:
	.loc	0 738 6 is_stmt 0               # liblzma/lzma/lzma_decoder.c:738:6
	ja	.LBB1_127
.Ltmp456:
# %bb.125:                              # %if.then4166
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 6                           # liblzma/lzma/lzma_decoder.c:0:6
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp457:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp458:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	.loc	0 738 6                         # liblzma/lzma/lzma_decoder.c:738:6
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp459:
	.loc	0 738 6                         # liblzma/lzma/lzma_decoder.c:738:6
	je	.LBB1_615
.Ltmp460:
# %bb.126:                              # %if.end4171
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 6                           # liblzma/lzma/lzma_decoder.c:0:6
	movq	%rbp, %rsi
	.loc	0 738 6                         # liblzma/lzma/lzma_decoder.c:738:6
	shll	$8, %ebx
.Ltmp461:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	shll	$8, %r15d
.Ltmp462:
	movzbl	(%r8,%r14), %r9d
	incq	%r14
.Ltmp463:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %r9d
.Ltmp464:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r9d
	.loc	0 0 6                           # liblzma/lzma/lzma_decoder.c:0:6
	jmp	.LBB1_128
.Ltmp465:
.LBB1_127:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movq	%r11, %r12
.Ltmp466:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, %rsi
	movl	%r15d, %r9d
.Ltmp467:
.LBB1_128:                              # %do.end4183
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r9d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r9d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 738 6                         # liblzma/lzma/lzma_decoder.c:738:6
	movl	%ebx, %ecx
	shrl	$11, %ecx
	movl	4(%rsp), %r10d                  # 4-byte Reload
	movzwl	25032(%rdi,%r10,2), %ebp
.Ltmp468:
	#DEBUG_VALUE: lzma_decode:rep0 <- $esi
	imull	%ebp, %ecx
.Ltmp469:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	.loc	0 738 6                         # liblzma/lzma/lzma_decoder.c:738:6
	movl	%r9d, %r11d
	subl	%ecx, %r11d
.Ltmp470:
	.loc	0 738 6                         # liblzma/lzma/lzma_decoder.c:738:6
	jae	.LBB1_130
.Ltmp471:
# %bb.129:                              # %do.body4194
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r9d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $esi
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	.loc	0 0 6                           # liblzma/lzma/lzma_decoder.c:0:6
	movl	$2048, %r11d                    # imm = 0x800
.Ltmp472:
	.loc	0 740 7 is_stmt 1               # liblzma/lzma/lzma_decoder.c:740:7
	subl	%ebp, %r11d
	shrl	$5, %r11d
	addl	%ebp, %r11d
	movw	%r11w, 25032(%rdi,%r10,2)
.Ltmp473:
	#DEBUG_VALUE: distance <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- $esi
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_deref] $rsp
	.loc	0 0 7 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:7
	movl	(%rsp), %r10d                   # 4-byte Reload
	jmp	.LBB1_131
.Ltmp474:
.LBB1_130:                              # %do.body4212
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r9d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $esi
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	.loc	0 749 7 is_stmt 1               # liblzma/lzma/lzma_decoder.c:749:7
	subl	%ecx, %ebx
.Ltmp475:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%ebp, %ecx
.Ltmp476:
	shrl	$5, %ecx
	subl	%ecx, %ebp
	movw	%bp, 25032(%rdi,%r10,2)
.Ltmp477:
	#DEBUG_VALUE: distance <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- $esi
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	.loc	0 0 7 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:7
	movl	92(%rsp), %r10d                 # 4-byte Reload
	movl	(%rsp), %ecx                    # 4-byte Reload
	movl	%ecx, 92(%rsp)                  # 4-byte Spill
.Ltmp478:
	#DEBUG_VALUE: distance <- $r10d
	#DEBUG_VALUE: lzma_decode:rep0 <- $r10d
	movl	%ebx, %ecx
.Ltmp479:
	#DEBUG_VALUE: lzma_decode:rc_bound <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	movl	%r11d, %r9d
.Ltmp480:
.LBB1_131:                              # %if.end4233
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $r10d
	#DEBUG_VALUE: lzma_decode:rep1 <- $esi
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	52(%rsp), %r11d                 # 4-byte Reload
	movq	%rsi, %rbp
	movl	4(%rsp), %edx                   # 4-byte Reload
	movq	80(%rsp), %rsi                  # 8-byte Reload
.Ltmp481:
.LBB1_132:                              # %if.end4233
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $r10d
	#DEBUG_VALUE: lzma_decode:rep1 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep2 <- $r11d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%r11d, (%rsp)                   # 4-byte Spill
.Ltmp482:
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r9d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep0 <- $r10d
	movl	%ebp, 52(%rsp)                  # 4-byte Spill
.Ltmp483:
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	.loc	0 761 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:761:4
	xorl	%r11d, %r11d
	cmpl	$7, %edx
	setae	%r11b
	leal	8(%r11,%r11,2), %edx
.Ltmp484:
	#DEBUG_VALUE: lzma_decode:state <- $edx
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movl	$1, %r13d
.Ltmp485:
	#DEBUG_VALUE: lzma_decode:symbol <- 1
	movl	%r10d, %ebp
.Ltmp486:
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	movl	%ecx, %ebx
.Ltmp487:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%r9d, %r15d
.Ltmp488:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	movq	%r12, %r11
	movl	%edx, %r12d
.Ltmp489:
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
.LBB1_133:                              # %do.body4239
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 764 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:764:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp490:
	.loc	0 764 4 is_stmt 0               # liblzma/lzma/lzma_decoder.c:764:4
	ja	.LBB1_136
.Ltmp491:
# %bb.134:                              # %if.then4243
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp492:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	je	.LBB1_598
.Ltmp493:
# %bb.135:                              # %if.end4248
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %ecx
	shll	$8, %ecx
.Ltmp494:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	shll	$8, %r15d
.Ltmp495:
	movzbl	(%r8,%r14), %r9d
	incq	%r14
.Ltmp496:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %r9d
.Ltmp497:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r9d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r9d, %r15d
.Ltmp498:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_137
.Ltmp499:
.LBB1_136:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %ecx
.Ltmp500:
.LBB1_137:                              # %do.end4260
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	%ecx, %ebx
	shrl	$11, %ebx
	movzwl	27240(%rdi), %r10d
	imull	%r10d, %ebx
.Ltmp501:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	%r15d, %r9d
	subl	%ebx, %r9d
.Ltmp502:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	jae	.LBB1_163
.Ltmp503:
# %bb.138:                              # %do.body4270
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %ecx                     # imm = 0x800
.Ltmp504:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	subl	%r10d, %ecx
	shrl	$5, %ecx
	addl	%r10d, %ecx
	movw	%cx, 27240(%rdi)
.Ltmp505:
.LBB1_139:                              # %do.body4286
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp506:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	ja	.LBB1_142
.Ltmp507:
# %bb.140:                              # %if.then4290
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp508:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	je	.LBB1_644
.Ltmp509:
# %bb.141:                              # %if.end4295
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, %edx
	movq	%r11, %r12
.Ltmp510:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:state <- $edx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	%ebx, %ecx
	shll	$8, %ecx
.Ltmp511:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	shll	$8, %r15d
.Ltmp512:
	movzbl	(%r8,%r14), %r9d
	incq	%r14
.Ltmp513:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %r9d
.Ltmp514:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r9d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r9d, %r15d
.Ltmp515:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_143
.Ltmp516:
.LBB1_142:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%r12d, %edx
	movq	%r11, %r12
.Ltmp517:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:state <- $edx
	movl	%ebx, %ecx
.Ltmp518:
.LBB1_143:                              # %do.end4307
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	%ecx, %ebx
	shrl	$11, %ebx
	movl	%eax, %r9d
	shlq	$4, %r9
	addq	%rdi, %r9
	movl	%r13d, %r11d
	leaq	(%r9,%r11,2), %r10
	addq	$27244, %r10                    # imm = 0x6A6C
	movzwl	27244(%r9,%r11,2), %r11d
	imull	%r11d, %ebx
.Ltmp519:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	addl	%r13d, %r13d
.Ltmp520:
	movl	%r15d, %r9d
	subl	%ebx, %r9d
.Ltmp521:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	jae	.LBB1_145
.Ltmp522:
# %bb.144:                              # %do.body4322
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %ecx                     # imm = 0x800
.Ltmp523:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	subl	%r11d, %ecx
	shrl	$5, %ecx
	addl	%r11d, %ecx
	movw	%cx, (%r10)
.Ltmp524:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	jmp	.LBB1_146
.Ltmp525:
.LBB1_145:                              # %do.body4346
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	subl	%ebx, %ecx
.Ltmp526:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r11d, %ebx
.Ltmp527:
	shrl	$5, %ebx
	subl	%ebx, %r11d
	movw	%r11w, (%r10)
.Ltmp528:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	orl	$1, %r13d
.Ltmp529:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %ebx
.Ltmp530:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%r9d, %r15d
.Ltmp531:
.LBB1_146:                              # %do.body4377
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movq	%r12, %r11
	movl	%edx, %r12d
.Ltmp532:
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
.LBB1_147:                              # %do.body4377
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp533:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	ja	.LBB1_150
.Ltmp534:
# %bb.148:                              # %if.then4381
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp535:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	je	.LBB1_592
.Ltmp536:
# %bb.149:                              # %if.end4386
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, %edx
	movq	%r11, %r12
.Ltmp537:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:state <- $edx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	%ebx, %ecx
	shll	$8, %ecx
.Ltmp538:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	shll	$8, %r15d
.Ltmp539:
	movzbl	(%r8,%r14), %r9d
	incq	%r14
.Ltmp540:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %r9d
.Ltmp541:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r9d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r9d, %r15d
.Ltmp542:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_151
.Ltmp543:
.LBB1_150:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%r12d, %edx
	movq	%r11, %r12
.Ltmp544:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:state <- $edx
	movl	%ebx, %ecx
.Ltmp545:
.LBB1_151:                              # %do.end4398
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	%ecx, %ebx
	shrl	$11, %ebx
	movl	%eax, %r9d
	shlq	$4, %r9
	addq	%rdi, %r9
	movl	%r13d, %r11d
	leaq	(%r9,%r11,2), %r10
	addq	$27244, %r10                    # imm = 0x6A6C
	movzwl	27244(%r9,%r11,2), %r11d
	imull	%r11d, %ebx
.Ltmp546:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	addl	%r13d, %r13d
.Ltmp547:
	movl	%r15d, %r9d
	subl	%ebx, %r9d
.Ltmp548:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	jae	.LBB1_153
.Ltmp549:
# %bb.152:                              # %do.body4413
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %ecx                     # imm = 0x800
.Ltmp550:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	subl	%r11d, %ecx
	shrl	$5, %ecx
	addl	%r11d, %ecx
	movw	%cx, (%r10)
.Ltmp551:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	jmp	.LBB1_154
.Ltmp552:
.LBB1_153:                              # %do.body4437
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	subl	%ebx, %ecx
.Ltmp553:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r11d, %ebx
.Ltmp554:
	shrl	$5, %ebx
	subl	%ebx, %r11d
	movw	%r11w, (%r10)
.Ltmp555:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	orl	$1, %r13d
.Ltmp556:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %ebx
.Ltmp557:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%r9d, %r15d
.Ltmp558:
.LBB1_154:                              # %do.body4468
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movq	%r12, %r11
	movl	%edx, %r12d
.Ltmp559:
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
.LBB1_155:                              # %do.body4468
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp560:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	ja	.LBB1_158
.Ltmp561:
# %bb.156:                              # %if.then4472
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp562:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	je	.LBB1_640
.Ltmp563:
# %bb.157:                              # %if.end4477
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movq	%r11, %rdx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	shll	$8, %ebx
.Ltmp564:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	shll	$8, %r15d
.Ltmp565:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp566:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp567:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %r15d
.Ltmp568:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_159
.Ltmp569:
.LBB1_158:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movq	%r11, %rdx
.Ltmp570:
.LBB1_159:                              # %do.end4489
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	%ebx, %ecx
	shrl	$11, %ecx
	movl	%eax, %r9d
	shlq	$4, %r9
	addq	%rdi, %r9
	movl	%r13d, %r10d
	leaq	(%r9,%r10,2), %rax
.Ltmp571:
	addq	$27244, %rax                    # imm = 0x6A6C
	movzwl	27244(%r9,%r10,2), %r9d
	imull	%r9d, %ecx
.Ltmp572:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	addl	%r13d, %r13d
.Ltmp573:
	#DEBUG_VALUE: lzma_decode:symbol <- $r10d
	movl	%r15d, %r11d
	subl	%ecx, %r11d
.Ltmp574:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	jae	.LBB1_161
.Ltmp575:
# %bb.160:                              # %do.body4504
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $r10d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %r10d                    # imm = 0x800
.Ltmp576:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	subl	%r9d, %r10d
	shrl	$5, %r10d
	addl	%r9d, %r10d
.Ltmp577:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	jmp	.LBB1_162
.Ltmp578:
.LBB1_161:                              # %do.body4528
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $r10d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	subl	%ecx, %ebx
.Ltmp579:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r9d, %ecx
.Ltmp580:
	shrl	$5, %ecx
	subl	%ecx, %r9d
.Ltmp581:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	orl	$1, %r13d
.Ltmp582:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r9d, %r10d
	movl	%ebx, %ecx
	movl	%r11d, %r15d
.Ltmp583:
.LBB1_162:                              # %do.end4556
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movq	%rdx, %r11
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movw	%r10w, (%rax)
.Ltmp584:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	leal	-6(%r13), %eax
.Ltmp585:
	#DEBUG_VALUE: lzma_decode:len <- $eax
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	jmp	.LBB1_410
.Ltmp586:
.LBB1_163:                              # %do.body4560
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	subl	%ebx, %ecx
.Ltmp587:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movq	%r11, %rdx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	%r10d, %r11d
.Ltmp588:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, 27240(%rdi)
	movl	%ecx, %ebx
.Ltmp589:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r9d, %r15d
.Ltmp590:
.LBB1_164:                              # %do.body4577
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp591:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	ja	.LBB1_167
.Ltmp592:
# %bb.165:                              # %if.then4581
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp593:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	je	.LBB1_597
.Ltmp594:
# %bb.166:                              # %if.end4586
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %ecx
	shll	$8, %ecx
.Ltmp595:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	shll	$8, %r15d
.Ltmp596:
	movzbl	(%r8,%r14), %r9d
	incq	%r14
.Ltmp597:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %r9d
.Ltmp598:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r9d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r9d, %r15d
.Ltmp599:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_168
.Ltmp600:
.LBB1_167:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %ecx
.Ltmp601:
.LBB1_168:                              # %do.end4598
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	%ecx, %ebx
	shrl	$11, %ebx
	movzwl	27242(%rdi), %r10d
	imull	%r10d, %ebx
.Ltmp602:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	%r15d, %r9d
	subl	%ebx, %r9d
.Ltmp603:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	jae	.LBB1_176
.Ltmp604:
# %bb.169:                              # %do.body4609
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %ecx                     # imm = 0x800
.Ltmp605:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	subl	%r10d, %ecx
	shrl	$5, %ecx
	addl	%r10d, %ecx
	movw	%cx, 27242(%rdi)
.Ltmp606:
.LBB1_170:                              # %do.body4625
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp607:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	ja	.LBB1_173
.Ltmp608:
# %bb.171:                              # %if.then4629
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp609:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	je	.LBB1_619
.Ltmp610:
# %bb.172:                              # %if.end4634
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, %edx
	movq	%r11, %r12
.Ltmp611:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:state <- $edx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	%ebx, %ecx
	shll	$8, %ecx
.Ltmp612:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	shll	$8, %r15d
.Ltmp613:
	movzbl	(%r8,%r14), %r9d
	incq	%r14
.Ltmp614:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %r9d
.Ltmp615:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r9d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r9d, %r15d
.Ltmp616:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_174
.Ltmp617:
.LBB1_173:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%r12d, %edx
	movq	%r11, %r12
.Ltmp618:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:state <- $edx
	movl	%ebx, %ecx
.Ltmp619:
.LBB1_174:                              # %do.end4646
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	%ecx, %ebx
	shrl	$11, %ebx
	movl	%eax, %r9d
	shlq	$4, %r9
	addq	%rdi, %r9
	movl	%r13d, %r11d
	leaq	(%r9,%r11,2), %r10
	addq	$27500, %r10                    # imm = 0x6B6C
	movzwl	27500(%r9,%r11,2), %r11d
	imull	%r11d, %ebx
.Ltmp620:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	addl	%r13d, %r13d
.Ltmp621:
	movl	%r15d, %r9d
	subl	%ebx, %r9d
.Ltmp622:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	jae	.LBB1_392
.Ltmp623:
# %bb.175:                              # %do.body4661
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %ecx                     # imm = 0x800
.Ltmp624:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	subl	%r11d, %ecx
	shrl	$5, %ecx
	addl	%r11d, %ecx
	movw	%cx, (%r10)
.Ltmp625:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	jmp	.LBB1_393
.Ltmp626:
.LBB1_176:                              # %do.body4900
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	subl	%ebx, %ecx
.Ltmp627:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r10d, %eax
.Ltmp628:
	shrl	$5, %eax
	subl	%eax, %r10d
	movw	%r10w, 27242(%rdi)
	movl	%ecx, %ebx
.Ltmp629:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r9d, %r15d
.Ltmp630:
.LBB1_177:                              # %do.body4918
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp631:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	ja	.LBB1_180
.Ltmp632:
# %bb.178:                              # %if.then4922
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp633:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	je	.LBB1_649
.Ltmp634:
# %bb.179:                              # %if.end4927
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
	shll	$8, %eax
.Ltmp635:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	shll	$8, %r15d
.Ltmp636:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp637:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp638:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %r15d
.Ltmp639:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_181
.Ltmp640:
.LBB1_180:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
.Ltmp641:
.LBB1_181:                              # %do.end4939
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	%eax, %ebx
	shrl	$11, %ebx
	movl	%r13d, %r9d
	movzwl	27756(%rdi,%r9,2), %r10d
	imull	%r10d, %ebx
.Ltmp642:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	addl	%r13d, %r13d
.Ltmp643:
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	movl	%r15d, %ecx
	subl	%ebx, %ecx
.Ltmp644:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	jae	.LBB1_186
.Ltmp645:
# %bb.182:                              # %do.body4952
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %eax                     # imm = 0x800
.Ltmp646:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	subl	%r10d, %eax
	shrl	$5, %eax
	addl	%r10d, %eax
	movw	%ax, 27756(%rdi,%r9,2)
.Ltmp647:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
.LBB1_183:                              # %do.body4999
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp648:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	ja	.LBB1_187
.Ltmp649:
.LBB1_184:                              # %if.then5003
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp650:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	je	.LBB1_630
.Ltmp651:
# %bb.185:                              # %if.end5008
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
	shll	$8, %eax
.Ltmp652:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	shll	$8, %r15d
.Ltmp653:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp654:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp655:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %r15d
.Ltmp656:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_188
.Ltmp657:
.LBB1_186:                              # %do.body4972
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	subl	%ebx, %eax
.Ltmp658:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movq	%r11, %rdx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	%r10d, %r11d
.Ltmp659:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, 27756(%rdi,%r9,2)
.Ltmp660:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	orl	$1, %r13d
.Ltmp661:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%eax, %ebx
.Ltmp662:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%ecx, %r15d
.Ltmp663:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp664:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	jbe	.LBB1_184
.Ltmp665:
.LBB1_187:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ebx, %eax
.Ltmp666:
.LBB1_188:                              # %do.end5020
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	%eax, %ebx
	shrl	$11, %ebx
	movl	%r13d, %r9d
	movzwl	27756(%rdi,%r9,2), %r10d
	imull	%r10d, %ebx
.Ltmp667:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	addl	%r13d, %r13d
.Ltmp668:
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	movl	%r15d, %ecx
	subl	%ebx, %ecx
.Ltmp669:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	jae	.LBB1_285
.Ltmp670:
# %bb.189:                              # %do.body5033
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %eax                     # imm = 0x800
.Ltmp671:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	subl	%r10d, %eax
	shrl	$5, %eax
	addl	%r10d, %eax
	movw	%ax, 27756(%rdi,%r9,2)
.Ltmp672:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
.LBB1_190:                              # %do.body5080
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp673:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	ja	.LBB1_286
.Ltmp674:
.LBB1_191:                              # %if.then5084
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp675:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	je	.LBB1_610
.Ltmp676:
# %bb.192:                              # %if.end5089
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
	shll	$8, %eax
.Ltmp677:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	shll	$8, %r15d
.Ltmp678:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp679:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp680:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %r15d
.Ltmp681:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_287
.Ltmp682:
.LBB1_193:                              # %do.body1482
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 501 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:501:4
	subl	%ebx, %ecx
.Ltmp683:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r11d, %ebx
.Ltmp684:
	shrl	$5, %ebx
	subl	%ebx, %r11d
	movw	%r11w, (%r10)
.Ltmp685:
	.loc	0 501 4 is_stmt 0               # liblzma/lzma/lzma_decoder.c:501:4
	orl	$1, %r13d
.Ltmp686:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %ebx
.Ltmp687:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%r9d, %r15d
.Ltmp688:
.LBB1_194:                              # %do.body1513
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movq	%r12, %r11
	movl	%edx, %r12d
.Ltmp689:
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
.LBB1_195:                              # %do.body1513
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp690:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	ja	.LBB1_198
.Ltmp691:
# %bb.196:                              # %if.then1517
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp692:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	je	.LBB1_628
.Ltmp693:
# %bb.197:                              # %if.end1522
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, %edx
	movq	%r11, %r12
.Ltmp694:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:state <- $edx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	%ebx, %ecx
	shll	$8, %ecx
.Ltmp695:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	shll	$8, %r15d
.Ltmp696:
	movzbl	(%r8,%r14), %r9d
	incq	%r14
.Ltmp697:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %r9d
.Ltmp698:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r9d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r9d, %r15d
.Ltmp699:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	%ecx, %ebx
	jmp	.LBB1_199
.Ltmp700:
.LBB1_198:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, %edx
	movq	%r11, %r12
.Ltmp701:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:state <- $edx
	movl	%ebx, %ecx
.Ltmp702:
.LBB1_199:                              # %do.end1534
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	shrl	$11, %ebx
	movl	%eax, %r9d
	shlq	$4, %r9
	addq	%rdi, %r9
	movl	%r13d, %r11d
	leaq	(%r9,%r11,2), %r10
	addq	$26216, %r10                    # imm = 0x6668
	movzwl	26216(%r9,%r11,2), %r11d
	imull	%r11d, %ebx
.Ltmp703:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	addl	%r13d, %r13d
.Ltmp704:
	movl	%r15d, %r9d
	subl	%ebx, %r9d
.Ltmp705:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	jae	.LBB1_201
.Ltmp706:
# %bb.200:                              # %do.body1549
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %ecx                     # imm = 0x800
.Ltmp707:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	subl	%r11d, %ecx
	shrl	$5, %ecx
	addl	%r11d, %ecx
	movw	%cx, (%r10)
.Ltmp708:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	jmp	.LBB1_202
.Ltmp709:
.LBB1_201:                              # %do.body1573
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	subl	%ebx, %ecx
.Ltmp710:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r11d, %ebx
.Ltmp711:
	shrl	$5, %ebx
	subl	%ebx, %r11d
	movw	%r11w, (%r10)
.Ltmp712:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	orl	$1, %r13d
.Ltmp713:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %ebx
.Ltmp714:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%r9d, %r15d
.Ltmp715:
.LBB1_202:                              # %do.body1604
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movq	%r12, %r11
	movl	%edx, %r12d
.Ltmp716:
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
.LBB1_203:                              # %do.body1604
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp717:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	ja	.LBB1_206
.Ltmp718:
# %bb.204:                              # %if.then1608
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp719:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	je	.LBB1_637
.Ltmp720:
# %bb.205:                              # %if.end1613
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	shll	$8, %ebx
.Ltmp721:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	shll	$8, %r15d
.Ltmp722:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp723:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp724:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %r15d
.Ltmp725:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
.LBB1_206:                              # %do.end1625
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	%ebx, %ecx
	shrl	$11, %ecx
	movl	%eax, %r9d
	shlq	$4, %r9
	addq	%rdi, %r9
	movl	%r13d, %r10d
	leaq	(%r9,%r10,2), %rax
.Ltmp726:
	addq	$26216, %rax                    # imm = 0x6668
	movzwl	26216(%r9,%r10,2), %r9d
	imull	%r9d, %ecx
.Ltmp727:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	addl	%r13d, %r13d
.Ltmp728:
	#DEBUG_VALUE: lzma_decode:symbol <- $r10d
	movl	%r15d, %r11d
.Ltmp729:
	subl	%ecx, %r11d
.Ltmp730:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	jae	.LBB1_208
.Ltmp731:
# %bb.207:                              # %do.body1640
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r10d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %r10d                    # imm = 0x800
.Ltmp732:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	subl	%r9d, %r10d
	shrl	$5, %r10d
	addl	%r9d, %r10d
.Ltmp733:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	jmp	.LBB1_209
.Ltmp734:
.LBB1_208:                              # %do.body1664
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r10d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	subl	%ecx, %ebx
.Ltmp735:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r9d, %ecx
.Ltmp736:
	shrl	$5, %ecx
	subl	%ecx, %r9d
.Ltmp737:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	orl	$1, %r13d
.Ltmp738:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r9d, %r10d
	movl	%ebx, %ecx
	movl	%r11d, %r15d
.Ltmp739:
.LBB1_209:                              # %do.end1692
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movw	%r10w, (%rax)
.Ltmp740:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	addl	$-6, %r13d
.Ltmp741:
	#DEBUG_VALUE: lzma_decode:len <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	jmp	.LBB1_325
.Ltmp742:
.LBB1_210:                              # %do.body1696
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	subl	%ebx, %ecx
.Ltmp743:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movq	%r11, %rdx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	%r10d, %r11d
.Ltmp744:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, 26212(%rdi)
	movl	%ecx, %ebx
.Ltmp745:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r9d, %r15d
.Ltmp746:
.LBB1_211:                              # %do.body1713
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp747:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	ja	.LBB1_214
.Ltmp748:
# %bb.212:                              # %if.then1717
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp749:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	je	.LBB1_604
.Ltmp750:
# %bb.213:                              # %if.end1722
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %ecx
	shll	$8, %ecx
.Ltmp751:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	shll	$8, %r15d
.Ltmp752:
	movzbl	(%r8,%r14), %r9d
	incq	%r14
.Ltmp753:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %r9d
.Ltmp754:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r9d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r9d, %r15d
.Ltmp755:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	%ecx, %ebx
	jmp	.LBB1_215
.Ltmp756:
.LBB1_214:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ebx, %ecx
.Ltmp757:
.LBB1_215:                              # %do.end1734
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	shrl	$11, %ebx
	movzwl	26214(%rdi), %r10d
	imull	%r10d, %ebx
.Ltmp758:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	%r15d, %r9d
	subl	%ebx, %r9d
.Ltmp759:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	jae	.LBB1_238
.Ltmp760:
# %bb.216:                              # %do.body1744
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %ecx                     # imm = 0x800
.Ltmp761:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	subl	%r10d, %ecx
	shrl	$5, %ecx
	addl	%r10d, %ecx
	movw	%cx, 26214(%rdi)
.Ltmp762:
.LBB1_217:                              # %do.body1760
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp763:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	ja	.LBB1_220
.Ltmp764:
# %bb.218:                              # %if.then1764
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp765:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	je	.LBB1_634
.Ltmp766:
# %bb.219:                              # %if.end1769
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, %edx
	movq	%r11, %r12
.Ltmp767:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:state <- $edx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	%ebx, %ecx
	shll	$8, %ecx
.Ltmp768:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	shll	$8, %r15d
.Ltmp769:
	movzbl	(%r8,%r14), %r9d
	incq	%r14
.Ltmp770:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %r9d
.Ltmp771:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r9d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r9d, %r15d
.Ltmp772:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	%ecx, %ebx
	jmp	.LBB1_221
.Ltmp773:
.LBB1_220:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, %edx
	movq	%r11, %r12
.Ltmp774:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:state <- $edx
	movl	%ebx, %ecx
.Ltmp775:
.LBB1_221:                              # %do.end1781
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	shrl	$11, %ebx
	movl	%eax, %r9d
	shlq	$4, %r9
	addq	%rdi, %r9
	movl	%r13d, %r11d
	leaq	(%r9,%r11,2), %r10
	addq	$26472, %r10                    # imm = 0x6768
	movzwl	26472(%r9,%r11,2), %r11d
	imull	%r11d, %ebx
.Ltmp776:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	addl	%r13d, %r13d
.Ltmp777:
	movl	%r15d, %r9d
	subl	%ebx, %r9d
.Ltmp778:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	jae	.LBB1_223
.Ltmp779:
# %bb.222:                              # %do.body1795
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %ecx                     # imm = 0x800
.Ltmp780:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	subl	%r11d, %ecx
	shrl	$5, %ecx
	addl	%r11d, %ecx
	movw	%cx, (%r10)
.Ltmp781:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	jmp	.LBB1_224
.Ltmp782:
.LBB1_223:                              # %do.body1819
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	subl	%ebx, %ecx
.Ltmp783:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r11d, %ebx
.Ltmp784:
	shrl	$5, %ebx
	subl	%ebx, %r11d
	movw	%r11w, (%r10)
.Ltmp785:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	orl	$1, %r13d
.Ltmp786:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %ebx
.Ltmp787:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%r9d, %r15d
.Ltmp788:
.LBB1_224:                              # %do.body1850
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movq	%r12, %r11
	movl	%edx, %r12d
.Ltmp789:
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
.LBB1_225:                              # %do.body1850
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp790:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	ja	.LBB1_228
.Ltmp791:
# %bb.226:                              # %if.then1854
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp792:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	je	.LBB1_614
.Ltmp793:
# %bb.227:                              # %if.end1859
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, %edx
	movq	%r11, %r12
.Ltmp794:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:state <- $edx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	%ebx, %ecx
	shll	$8, %ecx
.Ltmp795:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	shll	$8, %r15d
.Ltmp796:
	movzbl	(%r8,%r14), %r9d
	incq	%r14
.Ltmp797:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %r9d
.Ltmp798:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r9d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r9d, %r15d
.Ltmp799:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_229
.Ltmp800:
.LBB1_228:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%r12d, %edx
	movq	%r11, %r12
.Ltmp801:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:state <- $edx
	movl	%ebx, %ecx
.Ltmp802:
.LBB1_229:                              # %do.end1871
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	%ecx, %ebx
	shrl	$11, %ebx
	movl	%eax, %r9d
	shlq	$4, %r9
	addq	%rdi, %r9
	movl	%r13d, %r11d
	leaq	(%r9,%r11,2), %r10
	addq	$26472, %r10                    # imm = 0x6768
	movzwl	26472(%r9,%r11,2), %r11d
	imull	%r11d, %ebx
.Ltmp803:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	addl	%r13d, %r13d
.Ltmp804:
	movl	%r15d, %r9d
	subl	%ebx, %r9d
.Ltmp805:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	jae	.LBB1_231
.Ltmp806:
# %bb.230:                              # %do.body1886
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %ecx                     # imm = 0x800
.Ltmp807:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	subl	%r11d, %ecx
	shrl	$5, %ecx
	addl	%r11d, %ecx
	movw	%cx, (%r10)
.Ltmp808:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	jmp	.LBB1_232
.Ltmp809:
.LBB1_231:                              # %do.body1910
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	subl	%ebx, %ecx
.Ltmp810:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r11d, %ebx
.Ltmp811:
	shrl	$5, %ebx
	subl	%ebx, %r11d
	movw	%r11w, (%r10)
.Ltmp812:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	orl	$1, %r13d
.Ltmp813:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %ebx
.Ltmp814:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%r9d, %r15d
.Ltmp815:
.LBB1_232:                              # %do.body1941
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movq	%r12, %r11
	movl	%edx, %r12d
.Ltmp816:
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
.LBB1_233:                              # %do.body1941
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp817:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	ja	.LBB1_236
.Ltmp818:
# %bb.234:                              # %if.then1945
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp819:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	je	.LBB1_642
.Ltmp820:
# %bb.235:                              # %if.end1950
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	shll	$8, %ebx
.Ltmp821:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	shll	$8, %r15d
.Ltmp822:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp823:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp824:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %r15d
.Ltmp825:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
.LBB1_236:                              # %do.end1962
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	%ebx, %ecx
	shrl	$11, %ecx
	movl	%eax, %r9d
	shlq	$4, %r9
	addq	%rdi, %r9
	movl	%r13d, %r10d
	leaq	(%r9,%r10,2), %rax
.Ltmp826:
	addq	$26472, %rax                    # imm = 0x6768
	movzwl	26472(%r9,%r10,2), %r9d
	imull	%r9d, %ecx
.Ltmp827:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	addl	%r13d, %r13d
.Ltmp828:
	#DEBUG_VALUE: lzma_decode:symbol <- $r10d
	movl	%r15d, %r11d
.Ltmp829:
	subl	%ecx, %r11d
.Ltmp830:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	jae	.LBB1_255
.Ltmp831:
# %bb.237:                              # %do.body1977
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r10d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %r10d                    # imm = 0x800
.Ltmp832:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	subl	%r9d, %r10d
	shrl	$5, %r10d
	addl	%r9d, %r10d
.Ltmp833:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	jmp	.LBB1_256
.Ltmp834:
.LBB1_238:                              # %do.body2034
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	subl	%ebx, %ecx
.Ltmp835:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r10d, %eax
.Ltmp836:
	shrl	$5, %eax
	subl	%eax, %r10d
	movw	%r10w, 26214(%rdi)
	movl	%ecx, %ebx
.Ltmp837:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r9d, %r15d
.Ltmp838:
.LBB1_239:                              # %do.body2052
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp839:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	ja	.LBB1_242
.Ltmp840:
# %bb.240:                              # %if.then2056
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp841:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	je	.LBB1_647
.Ltmp842:
# %bb.241:                              # %if.end2061
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
	shll	$8, %eax
.Ltmp843:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	shll	$8, %r15d
.Ltmp844:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp845:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp846:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %r15d
.Ltmp847:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_243
.Ltmp848:
.LBB1_242:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
.Ltmp849:
.LBB1_243:                              # %do.end2073
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	%eax, %ebx
	shrl	$11, %ebx
	movl	%r13d, %r9d
	movzwl	26728(%rdi,%r9,2), %r10d
	imull	%r10d, %ebx
.Ltmp850:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	addl	%r13d, %r13d
.Ltmp851:
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	movl	%r15d, %ecx
	subl	%ebx, %ecx
.Ltmp852:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	jae	.LBB1_248
.Ltmp853:
# %bb.244:                              # %do.body2085
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %eax                     # imm = 0x800
.Ltmp854:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	subl	%r10d, %eax
	shrl	$5, %eax
	addl	%r10d, %eax
	movw	%ax, 26728(%rdi,%r9,2)
.Ltmp855:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
.LBB1_245:                              # %do.body2132
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp856:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	ja	.LBB1_249
.Ltmp857:
.LBB1_246:                              # %if.then2136
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp858:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	je	.LBB1_600
.Ltmp859:
# %bb.247:                              # %if.end2141
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
	shll	$8, %eax
.Ltmp860:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	shll	$8, %r15d
.Ltmp861:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp862:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp863:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %r15d
.Ltmp864:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_250
.Ltmp865:
.LBB1_248:                              # %do.body2105
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	subl	%ebx, %eax
.Ltmp866:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movq	%r11, %rdx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	%r10d, %r11d
.Ltmp867:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, 26728(%rdi,%r9,2)
.Ltmp868:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	orl	$1, %r13d
.Ltmp869:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%eax, %ebx
.Ltmp870:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%ecx, %r15d
.Ltmp871:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp872:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	jbe	.LBB1_246
.Ltmp873:
.LBB1_249:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ebx, %eax
.Ltmp874:
.LBB1_250:                              # %do.end2153
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	%eax, %ebx
	shrl	$11, %ebx
	movl	%r13d, %r9d
	movzwl	26728(%rdi,%r9,2), %r10d
	imull	%r10d, %ebx
.Ltmp875:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	addl	%r13d, %r13d
.Ltmp876:
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	movl	%r15d, %ecx
	subl	%ebx, %ecx
.Ltmp877:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	jae	.LBB1_257
.Ltmp878:
# %bb.251:                              # %do.body2166
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %eax                     # imm = 0x800
.Ltmp879:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	subl	%r10d, %eax
	shrl	$5, %eax
	addl	%r10d, %eax
	movw	%ax, 26728(%rdi,%r9,2)
.Ltmp880:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
.LBB1_252:                              # %do.body2213
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp881:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	ja	.LBB1_258
.Ltmp882:
.LBB1_253:                              # %if.then2217
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp883:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	je	.LBB1_646
.Ltmp884:
# %bb.254:                              # %if.end2222
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
	shll	$8, %eax
.Ltmp885:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	shll	$8, %r15d
.Ltmp886:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp887:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp888:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %r15d
.Ltmp889:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_259
.Ltmp890:
.LBB1_255:                              # %do.body2001
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r10d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	subl	%ecx, %ebx
.Ltmp891:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r9d, %ecx
.Ltmp892:
	shrl	$5, %ecx
	subl	%ecx, %r9d
.Ltmp893:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	orl	$1, %r13d
.Ltmp894:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r9d, %r10d
	movl	%ebx, %ecx
	movl	%r11d, %r15d
.Ltmp895:
.LBB1_256:                              # %do.end2029
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movw	%r10w, (%rax)
.Ltmp896:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	addl	$2, %r13d
.Ltmp897:
	#DEBUG_VALUE: lzma_decode:len <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	jmp	.LBB1_325
.Ltmp898:
.LBB1_257:                              # %do.body2186
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	subl	%ebx, %eax
.Ltmp899:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movq	%r11, %rdx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	%r10d, %r11d
.Ltmp900:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, 26728(%rdi,%r9,2)
.Ltmp901:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	orl	$1, %r13d
.Ltmp902:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%eax, %ebx
.Ltmp903:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%ecx, %r15d
.Ltmp904:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp905:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	jbe	.LBB1_253
.Ltmp906:
.LBB1_258:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ebx, %eax
.Ltmp907:
.LBB1_259:                              # %do.end2234
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	%eax, %ebx
	shrl	$11, %ebx
	movl	%r13d, %r9d
	movzwl	26728(%rdi,%r9,2), %r10d
	imull	%r10d, %ebx
.Ltmp908:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	addl	%r13d, %r13d
.Ltmp909:
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	movl	%r15d, %ecx
	subl	%ebx, %ecx
.Ltmp910:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	jae	.LBB1_264
.Ltmp911:
# %bb.260:                              # %do.body2247
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %eax                     # imm = 0x800
.Ltmp912:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	subl	%r10d, %eax
	shrl	$5, %eax
	addl	%r10d, %eax
	movw	%ax, 26728(%rdi,%r9,2)
.Ltmp913:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
.LBB1_261:                              # %do.body2294
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp914:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	ja	.LBB1_265
.Ltmp915:
.LBB1_262:                              # %if.then2298
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp916:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	je	.LBB1_648
.Ltmp917:
# %bb.263:                              # %if.end2303
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
	shll	$8, %eax
.Ltmp918:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	shll	$8, %r15d
.Ltmp919:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp920:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp921:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %r15d
.Ltmp922:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_266
.Ltmp923:
.LBB1_264:                              # %do.body2267
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	subl	%ebx, %eax
.Ltmp924:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movq	%r11, %rdx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	%r10d, %r11d
.Ltmp925:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, 26728(%rdi,%r9,2)
.Ltmp926:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	orl	$1, %r13d
.Ltmp927:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%eax, %ebx
.Ltmp928:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%ecx, %r15d
.Ltmp929:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp930:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	jbe	.LBB1_262
.Ltmp931:
.LBB1_265:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ebx, %eax
.Ltmp932:
.LBB1_266:                              # %do.end2315
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	%eax, %ebx
	shrl	$11, %ebx
	movl	%r13d, %r9d
	movzwl	26728(%rdi,%r9,2), %r10d
	imull	%r10d, %ebx
.Ltmp933:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	addl	%r13d, %r13d
.Ltmp934:
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	movl	%r15d, %ecx
	subl	%ebx, %ecx
.Ltmp935:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	jae	.LBB1_271
.Ltmp936:
# %bb.267:                              # %do.body2328
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %eax                     # imm = 0x800
.Ltmp937:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	subl	%r10d, %eax
	shrl	$5, %eax
	addl	%r10d, %eax
	movw	%ax, 26728(%rdi,%r9,2)
.Ltmp938:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
.LBB1_268:                              # %do.body2375
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp939:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	ja	.LBB1_272
.Ltmp940:
.LBB1_269:                              # %if.then2379
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp941:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	je	.LBB1_602
.Ltmp942:
# %bb.270:                              # %if.end2384
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
	shll	$8, %eax
.Ltmp943:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	shll	$8, %r15d
.Ltmp944:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp945:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp946:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %r15d
.Ltmp947:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_273
.Ltmp948:
.LBB1_271:                              # %do.body2348
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	subl	%ebx, %eax
.Ltmp949:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movq	%r11, %rdx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	%r10d, %r11d
.Ltmp950:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, 26728(%rdi,%r9,2)
.Ltmp951:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	orl	$1, %r13d
.Ltmp952:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%eax, %ebx
.Ltmp953:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%ecx, %r15d
.Ltmp954:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp955:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	jbe	.LBB1_269
.Ltmp956:
.LBB1_272:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ebx, %eax
.Ltmp957:
.LBB1_273:                              # %do.end2396
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	%eax, %ebx
	shrl	$11, %ebx
	movl	%r13d, %r9d
	movzwl	26728(%rdi,%r9,2), %r10d
	imull	%r10d, %ebx
.Ltmp958:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	addl	%r13d, %r13d
.Ltmp959:
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	movl	%r15d, %ecx
	subl	%ebx, %ecx
.Ltmp960:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	jae	.LBB1_278
.Ltmp961:
# %bb.274:                              # %do.body2409
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %eax                     # imm = 0x800
.Ltmp962:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	subl	%r10d, %eax
	shrl	$5, %eax
	addl	%r10d, %eax
	movw	%ax, 26728(%rdi,%r9,2)
.Ltmp963:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
.LBB1_275:                              # %do.body2456
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp964:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	ja	.LBB1_279
.Ltmp965:
.LBB1_276:                              # %if.then2460
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp966:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	je	.LBB1_594
.Ltmp967:
# %bb.277:                              # %if.end2465
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
	shll	$8, %eax
.Ltmp968:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	shll	$8, %r15d
.Ltmp969:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp970:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp971:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %r15d
.Ltmp972:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_280
.Ltmp973:
.LBB1_278:                              # %do.body2429
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	subl	%ebx, %eax
.Ltmp974:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movq	%r11, %rdx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	%r10d, %r11d
.Ltmp975:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, 26728(%rdi,%r9,2)
.Ltmp976:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	orl	$1, %r13d
.Ltmp977:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%eax, %ebx
.Ltmp978:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%ecx, %r15d
.Ltmp979:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp980:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	jbe	.LBB1_276
.Ltmp981:
.LBB1_279:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ebx, %eax
.Ltmp982:
.LBB1_280:                              # %do.end2477
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	%eax, %ebx
	shrl	$11, %ebx
	movl	%r13d, %r9d
	movzwl	26728(%rdi,%r9,2), %r10d
	imull	%r10d, %ebx
.Ltmp983:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	addl	%r13d, %r13d
.Ltmp984:
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	movl	%r15d, %ecx
	subl	%ebx, %ecx
.Ltmp985:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	jae	.LBB1_313
.Ltmp986:
# %bb.281:                              # %do.body2490
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %eax                     # imm = 0x800
.Ltmp987:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	subl	%r10d, %eax
	shrl	$5, %eax
	addl	%r10d, %eax
	movw	%ax, 26728(%rdi,%r9,2)
.Ltmp988:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
.LBB1_282:                              # %do.body2537
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp989:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	ja	.LBB1_314
.Ltmp990:
.LBB1_283:                              # %if.then2541
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp991:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	je	.LBB1_645
.Ltmp992:
# %bb.284:                              # %if.end2546
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
	shll	$8, %eax
.Ltmp993:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	shll	$8, %r15d
.Ltmp994:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp995:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp996:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %r15d
.Ltmp997:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_315
.Ltmp998:
.LBB1_285:                              # %do.body5053
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 764 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:764:4
	subl	%ebx, %eax
.Ltmp999:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movq	%r11, %rdx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	%r10d, %r11d
.Ltmp1000:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, 27756(%rdi,%r9,2)
.Ltmp1001:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	orl	$1, %r13d
.Ltmp1002:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%eax, %ebx
.Ltmp1003:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%ecx, %r15d
.Ltmp1004:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1005:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	jbe	.LBB1_191
.Ltmp1006:
.LBB1_286:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ebx, %eax
.Ltmp1007:
.LBB1_287:                              # %do.end5101
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	%eax, %ebx
	shrl	$11, %ebx
	movl	%r13d, %r9d
	movzwl	27756(%rdi,%r9,2), %r10d
	imull	%r10d, %ebx
.Ltmp1008:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	addl	%r13d, %r13d
.Ltmp1009:
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	movl	%r15d, %ecx
	subl	%ebx, %ecx
.Ltmp1010:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	jae	.LBB1_292
.Ltmp1011:
# %bb.288:                              # %do.body5114
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %eax                     # imm = 0x800
.Ltmp1012:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	subl	%r10d, %eax
	shrl	$5, %eax
	addl	%r10d, %eax
	movw	%ax, 27756(%rdi,%r9,2)
.Ltmp1013:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
.LBB1_289:                              # %do.body5161
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1014:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	ja	.LBB1_293
.Ltmp1015:
.LBB1_290:                              # %if.then5165
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp1016:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	je	.LBB1_595
.Ltmp1017:
# %bb.291:                              # %if.end5170
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
	shll	$8, %eax
.Ltmp1018:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	shll	$8, %r15d
.Ltmp1019:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp1020:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp1021:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %r15d
.Ltmp1022:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_294
.Ltmp1023:
.LBB1_292:                              # %do.body5134
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	subl	%ebx, %eax
.Ltmp1024:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movq	%r11, %rdx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	%r10d, %r11d
.Ltmp1025:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, 27756(%rdi,%r9,2)
.Ltmp1026:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	orl	$1, %r13d
.Ltmp1027:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%eax, %ebx
.Ltmp1028:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%ecx, %r15d
.Ltmp1029:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1030:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	jbe	.LBB1_290
.Ltmp1031:
.LBB1_293:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ebx, %eax
.Ltmp1032:
.LBB1_294:                              # %do.end5182
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	%eax, %ebx
	shrl	$11, %ebx
	movl	%r13d, %r9d
	movzwl	27756(%rdi,%r9,2), %r10d
	imull	%r10d, %ebx
.Ltmp1033:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	addl	%r13d, %r13d
.Ltmp1034:
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	movl	%r15d, %ecx
	subl	%ebx, %ecx
.Ltmp1035:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	jae	.LBB1_299
.Ltmp1036:
# %bb.295:                              # %do.body5195
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %eax                     # imm = 0x800
.Ltmp1037:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	subl	%r10d, %eax
	shrl	$5, %eax
	addl	%r10d, %eax
	movw	%ax, 27756(%rdi,%r9,2)
.Ltmp1038:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
.LBB1_296:                              # %do.body5242
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1039:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	ja	.LBB1_300
.Ltmp1040:
.LBB1_297:                              # %if.then5246
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp1041:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	je	.LBB1_652
.Ltmp1042:
# %bb.298:                              # %if.end5251
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
	shll	$8, %eax
.Ltmp1043:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	shll	$8, %r15d
.Ltmp1044:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp1045:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp1046:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %r15d
.Ltmp1047:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_301
.Ltmp1048:
.LBB1_299:                              # %do.body5215
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	subl	%ebx, %eax
.Ltmp1049:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movq	%r11, %rdx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	%r10d, %r11d
.Ltmp1050:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, 27756(%rdi,%r9,2)
.Ltmp1051:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	orl	$1, %r13d
.Ltmp1052:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%eax, %ebx
.Ltmp1053:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%ecx, %r15d
.Ltmp1054:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1055:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	jbe	.LBB1_297
.Ltmp1056:
.LBB1_300:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ebx, %eax
.Ltmp1057:
.LBB1_301:                              # %do.end5263
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	%eax, %ebx
	shrl	$11, %ebx
	movl	%r13d, %r9d
	movzwl	27756(%rdi,%r9,2), %r10d
	imull	%r10d, %ebx
.Ltmp1058:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	addl	%r13d, %r13d
.Ltmp1059:
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	movl	%r15d, %ecx
	subl	%ebx, %ecx
.Ltmp1060:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	jae	.LBB1_306
.Ltmp1061:
# %bb.302:                              # %do.body5276
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %eax                     # imm = 0x800
.Ltmp1062:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	subl	%r10d, %eax
	shrl	$5, %eax
	addl	%r10d, %eax
	movw	%ax, 27756(%rdi,%r9,2)
.Ltmp1063:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
.LBB1_303:                              # %do.body5323
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1064:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	ja	.LBB1_307
.Ltmp1065:
.LBB1_304:                              # %if.then5327
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp1066:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	je	.LBB1_591
.Ltmp1067:
# %bb.305:                              # %if.end5332
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
	shll	$8, %eax
.Ltmp1068:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	shll	$8, %r15d
.Ltmp1069:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp1070:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp1071:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %r15d
.Ltmp1072:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_308
.Ltmp1073:
.LBB1_306:                              # %do.body5296
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	subl	%ebx, %eax
.Ltmp1074:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movq	%r11, %rdx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	%r10d, %r11d
.Ltmp1075:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, 27756(%rdi,%r9,2)
.Ltmp1076:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	orl	$1, %r13d
.Ltmp1077:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%eax, %ebx
.Ltmp1078:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%ecx, %r15d
.Ltmp1079:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1080:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	jbe	.LBB1_304
.Ltmp1081:
.LBB1_307:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ebx, %eax
.Ltmp1082:
.LBB1_308:                              # %do.end5344
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	%eax, %ebx
	shrl	$11, %ebx
	movl	%r13d, %r9d
	movzwl	27756(%rdi,%r9,2), %r10d
	imull	%r10d, %ebx
.Ltmp1083:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	addl	%r13d, %r13d
.Ltmp1084:
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	movl	%r15d, %ecx
	subl	%ebx, %ecx
.Ltmp1085:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	jae	.LBB1_379
.Ltmp1086:
# %bb.309:                              # %do.body5357
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %eax                     # imm = 0x800
.Ltmp1087:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	subl	%r10d, %eax
	shrl	$5, %eax
	addl	%r10d, %eax
	movw	%ax, 27756(%rdi,%r9,2)
.Ltmp1088:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
.LBB1_310:                              # %do.body5404
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1089:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	ja	.LBB1_380
.Ltmp1090:
.LBB1_311:                              # %if.then5408
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp1091:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	je	.LBB1_651
.Ltmp1092:
# %bb.312:                              # %if.end5413
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
	shll	$8, %eax
.Ltmp1093:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	shll	$8, %r15d
.Ltmp1094:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp1095:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp1096:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %r15d
.Ltmp1097:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_381
.Ltmp1098:
.LBB1_313:                              # %do.body2510
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 501 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:501:4
	subl	%ebx, %eax
.Ltmp1099:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movq	%r11, %rdx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	%r10d, %r11d
.Ltmp1100:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, 26728(%rdi,%r9,2)
.Ltmp1101:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	orl	$1, %r13d
.Ltmp1102:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%eax, %ebx
.Ltmp1103:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%ecx, %r15d
.Ltmp1104:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1105:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	jbe	.LBB1_283
.Ltmp1106:
.LBB1_314:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ebx, %eax
.Ltmp1107:
.LBB1_315:                              # %do.end2558
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	%eax, %ebx
	shrl	$11, %ebx
	movl	%r13d, %r9d
	movzwl	26728(%rdi,%r9,2), %r10d
	imull	%r10d, %ebx
.Ltmp1108:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	addl	%r13d, %r13d
.Ltmp1109:
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	movl	%r15d, %ecx
	subl	%ebx, %ecx
.Ltmp1110:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	jae	.LBB1_318
.Ltmp1111:
# %bb.316:                              # %do.body2571
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %eax                     # imm = 0x800
.Ltmp1112:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	subl	%r10d, %eax
	shrl	$5, %eax
	addl	%r10d, %eax
	movw	%ax, 26728(%rdi,%r9,2)
.Ltmp1113:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
.LBB1_317:                              # %do.body2618
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1114:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	jbe	.LBB1_319
	jmp	.LBB1_321
.Ltmp1115:
.LBB1_318:                              # %do.body2591
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	subl	%ebx, %eax
.Ltmp1116:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movq	%r11, %rdx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	%r10d, %r11d
.Ltmp1117:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, 26728(%rdi,%r9,2)
.Ltmp1118:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	orl	$1, %r13d
.Ltmp1119:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%eax, %ebx
.Ltmp1120:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%ecx, %r15d
.Ltmp1121:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1122:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	ja	.LBB1_321
.Ltmp1123:
.LBB1_319:                              # %if.then2622
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp1124:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	je	.LBB1_641
.Ltmp1125:
# %bb.320:                              # %if.end2627
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	shll	$8, %ebx
.Ltmp1126:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	shll	$8, %r15d
.Ltmp1127:
	movzbl	(%r8,%r14), %eax
	incq	%r14
.Ltmp1128:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %eax
.Ltmp1129:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $eax
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%eax, %r15d
.Ltmp1130:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
.LBB1_321:                              # %do.end2639
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	%ebx, %ecx
	shrl	$11, %ecx
	movl	%r13d, %eax
	movzwl	26728(%rdi,%rax,2), %r9d
	imull	%r9d, %ecx
.Ltmp1131:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	addl	%r13d, %r13d
.Ltmp1132:
	#DEBUG_VALUE: lzma_decode:symbol <- $eax
	movl	%r15d, %r11d
.Ltmp1133:
	subl	%ecx, %r11d
.Ltmp1134:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	jae	.LBB1_323
.Ltmp1135:
# %bb.322:                              # %do.body2652
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $eax
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %r10d                    # imm = 0x800
.Ltmp1136:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	subl	%r9d, %r10d
	shrl	$5, %r10d
	addl	%r9d, %r10d
.Ltmp1137:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	jmp	.LBB1_324
.Ltmp1138:
.LBB1_323:                              # %do.body2672
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $eax
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	subl	%ecx, %ebx
.Ltmp1139:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r9d, %ecx
.Ltmp1140:
	shrl	$5, %ecx
	subl	%ecx, %r9d
.Ltmp1141:
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	orl	$1, %r13d
.Ltmp1142:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r9d, %r10d
	movl	%ebx, %ecx
	movl	%r11d, %r15d
.Ltmp1143:
.LBB1_324:                              # %do.end2696
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movw	%r10w, 26728(%rdi,%rax,2)
.Ltmp1144:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	addl	$-238, %r13d
.Ltmp1145:
	#DEBUG_VALUE: lzma_decode:len <- $r13d
.LBB1_325:                              # %do.end2704
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- $r13d
	#DEBUG_VALUE: lzma_decode:ret <- 0
                                        # kill: def $r13d killed $r13d killed $r13 def $r13
	#DEBUG_VALUE: lzma_decode:len <- $r13d
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 506 28 is_stmt 1              # liblzma/lzma/lzma_decoder.c:506:28
	leal	-2(%r13), %eax
	movq	%r13, 40(%rsp)                  # 8-byte Spill
.Ltmp1146:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	cmpl	$6, %r13d
	movl	$3, %r9d
	cmovbl	%eax, %r9d
	.loc	0 506 12 is_stmt 0              # liblzma/lzma/lzma_decoder.c:506:12
	shlq	$7, %r9
	leaq	(%rdi,%r9), %r11
	addq	$25440, %r11                    # imm = 0x6360
.Ltmp1147:
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	.loc	0 0 12                          # liblzma/lzma/lzma_decoder.c:0:12
	movl	$1, %r13d
.Ltmp1148:
	#DEBUG_VALUE: lzma_decode:symbol <- 1
	movl	%ecx, %ebx
.Ltmp1149:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
.LBB1_326:                              # %do.body2714
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 515 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:515:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1150:
	.loc	0 515 4 is_stmt 0               # liblzma/lzma/lzma_decoder.c:515:4
	ja	.LBB1_329
.Ltmp1151:
# %bb.327:                              # %if.then2718
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 515 4                         # liblzma/lzma/lzma_decoder.c:515:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp1152:
	.loc	0 515 4                         # liblzma/lzma/lzma_decoder.c:515:4
	je	.LBB1_603
.Ltmp1153:
# %bb.328:                              # %if.end2723
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
	shll	$8, %eax
.Ltmp1154:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	shll	$8, %r15d
.Ltmp1155:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp1156:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp1157:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %r15d
.Ltmp1158:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_330
.Ltmp1159:
.LBB1_329:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
.Ltmp1160:
.LBB1_330:                              # %do.end2735
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 515 4                         # liblzma/lzma/lzma_decoder.c:515:4
	movl	%eax, %ebx
	shrl	$11, %ebx
	movl	%r13d, %r9d
	movzwl	(%r11,%r9,2), %r10d
	imull	%r10d, %ebx
.Ltmp1161:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 515 4                         # liblzma/lzma/lzma_decoder.c:515:4
	addl	%r13d, %r13d
.Ltmp1162:
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	movl	%r15d, %ecx
	subl	%ebx, %ecx
.Ltmp1163:
	.loc	0 515 4                         # liblzma/lzma/lzma_decoder.c:515:4
	jae	.LBB1_335
.Ltmp1164:
# %bb.331:                              # %do.body2746
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %eax                     # imm = 0x800
.Ltmp1165:
	.loc	0 515 4                         # liblzma/lzma/lzma_decoder.c:515:4
	subl	%r10d, %eax
	shrl	$5, %eax
	addl	%r10d, %eax
	movw	%ax, (%r11,%r9,2)
.Ltmp1166:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
.LBB1_332:                              # %do.body2785
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 516 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:516:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1167:
	.loc	0 516 4 is_stmt 0               # liblzma/lzma/lzma_decoder.c:516:4
	ja	.LBB1_336
.Ltmp1168:
.LBB1_333:                              # %if.then2789
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 516 4                         # liblzma/lzma/lzma_decoder.c:516:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp1169:
	.loc	0 516 4                         # liblzma/lzma/lzma_decoder.c:516:4
	je	.LBB1_607
.Ltmp1170:
# %bb.334:                              # %if.end2794
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
	shll	$8, %eax
.Ltmp1171:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	shll	$8, %r15d
.Ltmp1172:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp1173:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp1174:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %r15d
.Ltmp1175:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_337
.Ltmp1176:
.LBB1_335:                              # %do.body2762
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 515 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:515:4
	subl	%ebx, %eax
.Ltmp1177:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movq	%r11, %rdx
	.loc	0 515 4                         # liblzma/lzma/lzma_decoder.c:515:4
	movl	%r10d, %r11d
.Ltmp1178:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, (%rdx,%r9,2)
.Ltmp1179:
	.loc	0 515 4                         # liblzma/lzma/lzma_decoder.c:515:4
	orl	$1, %r13d
.Ltmp1180:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%eax, %ebx
.Ltmp1181:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%ecx, %r15d
.Ltmp1182:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 516 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:516:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1183:
	.loc	0 516 4 is_stmt 0               # liblzma/lzma/lzma_decoder.c:516:4
	jbe	.LBB1_333
.Ltmp1184:
.LBB1_336:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ebx, %eax
.Ltmp1185:
.LBB1_337:                              # %do.end2806
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 516 4                         # liblzma/lzma/lzma_decoder.c:516:4
	movl	%eax, %ebx
	shrl	$11, %ebx
	movl	%r13d, %r9d
	movzwl	(%r11,%r9,2), %r10d
	imull	%r10d, %ebx
.Ltmp1186:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 516 4                         # liblzma/lzma/lzma_decoder.c:516:4
	addl	%r13d, %r13d
.Ltmp1187:
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	movl	%r15d, %ecx
	subl	%ebx, %ecx
.Ltmp1188:
	.loc	0 516 4                         # liblzma/lzma/lzma_decoder.c:516:4
	jae	.LBB1_342
.Ltmp1189:
# %bb.338:                              # %do.body2817
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %eax                     # imm = 0x800
.Ltmp1190:
	.loc	0 516 4                         # liblzma/lzma/lzma_decoder.c:516:4
	subl	%r10d, %eax
	shrl	$5, %eax
	addl	%r10d, %eax
	movw	%ax, (%r11,%r9,2)
.Ltmp1191:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
.LBB1_339:                              # %do.body2856
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 517 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:517:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1192:
	.loc	0 517 4 is_stmt 0               # liblzma/lzma/lzma_decoder.c:517:4
	ja	.LBB1_343
.Ltmp1193:
.LBB1_340:                              # %if.then2860
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 517 4                         # liblzma/lzma/lzma_decoder.c:517:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp1194:
	.loc	0 517 4                         # liblzma/lzma/lzma_decoder.c:517:4
	je	.LBB1_633
.Ltmp1195:
# %bb.341:                              # %if.end2865
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
	shll	$8, %eax
.Ltmp1196:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	shll	$8, %r15d
.Ltmp1197:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp1198:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp1199:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %r15d
.Ltmp1200:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_344
.Ltmp1201:
.LBB1_342:                              # %do.body2833
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 516 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:516:4
	subl	%ebx, %eax
.Ltmp1202:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movq	%r11, %rdx
	.loc	0 516 4                         # liblzma/lzma/lzma_decoder.c:516:4
	movl	%r10d, %r11d
.Ltmp1203:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, (%rdx,%r9,2)
.Ltmp1204:
	.loc	0 516 4                         # liblzma/lzma/lzma_decoder.c:516:4
	orl	$1, %r13d
.Ltmp1205:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%eax, %ebx
.Ltmp1206:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%ecx, %r15d
.Ltmp1207:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 517 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:517:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1208:
	.loc	0 517 4 is_stmt 0               # liblzma/lzma/lzma_decoder.c:517:4
	jbe	.LBB1_340
.Ltmp1209:
.LBB1_343:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ebx, %eax
.Ltmp1210:
.LBB1_344:                              # %do.end2877
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 517 4                         # liblzma/lzma/lzma_decoder.c:517:4
	movl	%eax, %ebx
	shrl	$11, %ebx
	movl	%r13d, %r9d
	movzwl	(%r11,%r9,2), %r10d
	imull	%r10d, %ebx
.Ltmp1211:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 517 4                         # liblzma/lzma/lzma_decoder.c:517:4
	addl	%r13d, %r13d
.Ltmp1212:
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	movl	%r15d, %ecx
	subl	%ebx, %ecx
.Ltmp1213:
	.loc	0 517 4                         # liblzma/lzma/lzma_decoder.c:517:4
	jae	.LBB1_349
.Ltmp1214:
# %bb.345:                              # %do.body2888
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %eax                     # imm = 0x800
.Ltmp1215:
	.loc	0 517 4                         # liblzma/lzma/lzma_decoder.c:517:4
	subl	%r10d, %eax
	shrl	$5, %eax
	addl	%r10d, %eax
	movw	%ax, (%r11,%r9,2)
.Ltmp1216:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
.LBB1_346:                              # %do.body2927
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 518 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:518:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1217:
	.loc	0 518 4 is_stmt 0               # liblzma/lzma/lzma_decoder.c:518:4
	ja	.LBB1_350
.Ltmp1218:
.LBB1_347:                              # %if.then2931
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 518 4                         # liblzma/lzma/lzma_decoder.c:518:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp1219:
	.loc	0 518 4                         # liblzma/lzma/lzma_decoder.c:518:4
	je	.LBB1_613
.Ltmp1220:
# %bb.348:                              # %if.end2936
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
	shll	$8, %eax
.Ltmp1221:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	shll	$8, %r15d
.Ltmp1222:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp1223:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp1224:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %r15d
.Ltmp1225:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_351
.Ltmp1226:
.LBB1_349:                              # %do.body2904
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 517 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:517:4
	subl	%ebx, %eax
.Ltmp1227:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movq	%r11, %rdx
	.loc	0 517 4                         # liblzma/lzma/lzma_decoder.c:517:4
	movl	%r10d, %r11d
.Ltmp1228:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, (%rdx,%r9,2)
.Ltmp1229:
	.loc	0 517 4                         # liblzma/lzma/lzma_decoder.c:517:4
	orl	$1, %r13d
.Ltmp1230:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%eax, %ebx
.Ltmp1231:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%ecx, %r15d
.Ltmp1232:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 518 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:518:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1233:
	.loc	0 518 4 is_stmt 0               # liblzma/lzma/lzma_decoder.c:518:4
	jbe	.LBB1_347
.Ltmp1234:
.LBB1_350:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ebx, %eax
.Ltmp1235:
.LBB1_351:                              # %do.end2948
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 518 4                         # liblzma/lzma/lzma_decoder.c:518:4
	movl	%eax, %ebx
	shrl	$11, %ebx
	movl	%r13d, %r9d
	movzwl	(%r11,%r9,2), %r10d
	imull	%r10d, %ebx
.Ltmp1236:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 518 4                         # liblzma/lzma/lzma_decoder.c:518:4
	addl	%r13d, %r13d
.Ltmp1237:
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	movl	%r15d, %ecx
	subl	%ebx, %ecx
.Ltmp1238:
	.loc	0 518 4                         # liblzma/lzma/lzma_decoder.c:518:4
	jae	.LBB1_356
.Ltmp1239:
# %bb.352:                              # %do.body2959
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %eax                     # imm = 0x800
.Ltmp1240:
	.loc	0 518 4                         # liblzma/lzma/lzma_decoder.c:518:4
	subl	%r10d, %eax
	shrl	$5, %eax
	addl	%r10d, %eax
	movw	%ax, (%r11,%r9,2)
.Ltmp1241:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
.LBB1_353:                              # %do.body2998
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 519 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:519:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1242:
	.loc	0 519 4 is_stmt 0               # liblzma/lzma/lzma_decoder.c:519:4
	ja	.LBB1_357
.Ltmp1243:
.LBB1_354:                              # %if.then3002
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 519 4                         # liblzma/lzma/lzma_decoder.c:519:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp1244:
	.loc	0 519 4                         # liblzma/lzma/lzma_decoder.c:519:4
	je	.LBB1_631
.Ltmp1245:
# %bb.355:                              # %if.end3007
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
	shll	$8, %eax
.Ltmp1246:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	shll	$8, %r15d
.Ltmp1247:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp1248:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp1249:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %r15d
.Ltmp1250:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_358
.Ltmp1251:
.LBB1_356:                              # %do.body2975
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 518 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:518:4
	subl	%ebx, %eax
.Ltmp1252:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movq	%r11, %rdx
	.loc	0 518 4                         # liblzma/lzma/lzma_decoder.c:518:4
	movl	%r10d, %r11d
.Ltmp1253:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, (%rdx,%r9,2)
.Ltmp1254:
	.loc	0 518 4                         # liblzma/lzma/lzma_decoder.c:518:4
	orl	$1, %r13d
.Ltmp1255:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%eax, %ebx
.Ltmp1256:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%ecx, %r15d
.Ltmp1257:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 519 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:519:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1258:
	.loc	0 519 4 is_stmt 0               # liblzma/lzma/lzma_decoder.c:519:4
	jbe	.LBB1_354
.Ltmp1259:
.LBB1_357:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ebx, %eax
.Ltmp1260:
.LBB1_358:                              # %do.end3019
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 519 4                         # liblzma/lzma/lzma_decoder.c:519:4
	movl	%eax, %ebx
	shrl	$11, %ebx
	movl	%r13d, %r9d
	movzwl	(%r11,%r9,2), %r10d
	imull	%r10d, %ebx
.Ltmp1261:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 519 4                         # liblzma/lzma/lzma_decoder.c:519:4
	addl	%r13d, %r13d
.Ltmp1262:
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	movl	%r15d, %ecx
	subl	%ebx, %ecx
.Ltmp1263:
	.loc	0 519 4                         # liblzma/lzma/lzma_decoder.c:519:4
	jae	.LBB1_363
.Ltmp1264:
# %bb.359:                              # %do.body3030
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %eax                     # imm = 0x800
.Ltmp1265:
	.loc	0 519 4                         # liblzma/lzma/lzma_decoder.c:519:4
	subl	%r10d, %eax
	shrl	$5, %eax
	addl	%r10d, %eax
	movw	%ax, (%r11,%r9,2)
.Ltmp1266:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
.LBB1_360:                              # %do.body3069
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 520 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:520:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1267:
	.loc	0 520 4 is_stmt 0               # liblzma/lzma/lzma_decoder.c:520:4
	ja	.LBB1_364
.Ltmp1268:
.LBB1_361:                              # %if.then3073
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 520 4                         # liblzma/lzma/lzma_decoder.c:520:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp1269:
	.loc	0 520 4                         # liblzma/lzma/lzma_decoder.c:520:4
	je	.LBB1_638
.Ltmp1270:
# %bb.362:                              # %if.end3078
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %ecx
	shll	$8, %ecx
.Ltmp1271:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	shll	$8, %r15d
.Ltmp1272:
	movzbl	(%r8,%r14), %eax
	incq	%r14
.Ltmp1273:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %eax
.Ltmp1274:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $eax
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%eax, %r15d
.Ltmp1275:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_365
.Ltmp1276:
.LBB1_363:                              # %do.body3046
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 519 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:519:4
	subl	%ebx, %eax
.Ltmp1277:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movq	%r11, %rdx
	.loc	0 519 4                         # liblzma/lzma/lzma_decoder.c:519:4
	movl	%r10d, %r11d
.Ltmp1278:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, (%rdx,%r9,2)
.Ltmp1279:
	.loc	0 519 4                         # liblzma/lzma/lzma_decoder.c:519:4
	orl	$1, %r13d
.Ltmp1280:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%eax, %ebx
.Ltmp1281:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%ecx, %r15d
.Ltmp1282:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 520 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:520:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1283:
	.loc	0 520 4 is_stmt 0               # liblzma/lzma/lzma_decoder.c:520:4
	jbe	.LBB1_361
.Ltmp1284:
.LBB1_364:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ebx, %ecx
.Ltmp1285:
.LBB1_365:                              # %do.end3090
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 520 4                         # liblzma/lzma/lzma_decoder.c:520:4
	movl	%ecx, %ebx
	shrl	$11, %ebx
	movl	%r13d, %eax
	movq	%r11, %rdx
	movzwl	(%r11,%rax,2), %r9d
	imull	%r9d, %ebx
.Ltmp1286:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 520 4                         # liblzma/lzma/lzma_decoder.c:520:4
	addl	%r13d, %r13d
.Ltmp1287:
	#DEBUG_VALUE: lzma_decode:symbol <- $eax
	movl	%r15d, %r11d
.Ltmp1288:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	subl	%ebx, %r11d
.Ltmp1289:
	.loc	0 520 4                         # liblzma/lzma/lzma_decoder.c:520:4
	jae	.LBB1_367
.Ltmp1290:
# %bb.366:                              # %do.body3101
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $eax
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %r10d                    # imm = 0x800
.Ltmp1291:
	.loc	0 520 4                         # liblzma/lzma/lzma_decoder.c:520:4
	subl	%r9d, %r10d
	shrl	$5, %r10d
	addl	%r9d, %r10d
.Ltmp1292:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 520 4                         # liblzma/lzma/lzma_decoder.c:520:4
	jmp	.LBB1_368
.Ltmp1293:
.LBB1_367:                              # %do.body3117
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $eax
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 520 4                         # liblzma/lzma/lzma_decoder.c:520:4
	subl	%ebx, %ecx
.Ltmp1294:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r9d, %r10d
	shrl	$5, %r10d
	subl	%r10d, %r9d
.Ltmp1295:
	.loc	0 520 4                         # liblzma/lzma/lzma_decoder.c:520:4
	orl	$1, %r13d
.Ltmp1296:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r9d, %r10d
	movl	%ecx, %ebx
.Ltmp1297:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%r11d, %r15d
.Ltmp1298:
.LBB1_368:                              # %do.end3137
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movq	%rdx, %r11
	.loc	0 520 4                         # liblzma/lzma/lzma_decoder.c:520:4
	movw	%r10w, (%rdx,%rax,2)
.Ltmp1299:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 524 11 is_stmt 1              # liblzma/lzma/lzma_decoder.c:524:11
	leal	-64(%r13), %eax
.Ltmp1300:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_constu 64, DW_OP_minus, DW_OP_stack_value] $r13d
	.loc	0 527 15                        # liblzma/lzma/lzma_decoder.c:527:15
	cmpl	$4, %eax
	movq	64(%rsp), %rcx                  # 8-byte Reload
.Ltmp1301:
	.loc	0 527 8 is_stmt 0               # liblzma/lzma/lzma_decoder.c:527:8
	jae	.LBB1_370
.Ltmp1302:
# %bb.369:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_constu 64, DW_OP_minus, DW_OP_stack_value] $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 8                           # liblzma/lzma/lzma_decoder.c:0:8
	movl	%eax, %ebp
.Ltmp1303:
	movl	%eax, %r13d
.Ltmp1304:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $ebp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	movq	%rcx, 64(%rsp)                  # 8-byte Spill
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
.Ltmp1305:
	#DEBUG_VALUE: lzma_decode:limit <- $ecx
	.loc	0 670 8 is_stmt 1               # liblzma/lzma/lzma_decoder.c:670:8
	movl	%ebp, %eax
.Ltmp1306:
	#DEBUG_VALUE: dict_is_distance_valid:distance <- $ebp
	#DEBUG_VALUE: dict_is_distance_valid:dict <- undef
	.loc	12 122 20                       # liblzma/lz/lz_decoder.h:122:20
	cmpq	%rax, 72(%rsp)                  # 8-byte Folded Reload
.Ltmp1307:
	.loc	0 670 8                         # liblzma/lzma/lzma_decoder.c:670:8
	ja	.LBB1_448
	jmp	.LBB1_574
.Ltmp1308:
.LBB1_370:                              # %if.else3142
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_constu 64, DW_OP_minus, DW_OP_stack_value] $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 533 21                        # liblzma/lzma/lzma_decoder.c:533:21
	movl	%eax, %ecx
	shrl	%ecx
.Ltmp1309:
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_constu 1, DW_OP_minus, DW_OP_stack_value] $ecx
	.loc	0 535 24                        # liblzma/lzma/lzma_decoder.c:535:24
	andl	$1, %r13d
.Ltmp1310:
	.loc	0 535 14 is_stmt 0              # liblzma/lzma/lzma_decoder.c:535:14
	movl	%r13d, %ebp
.Ltmp1311:
	orl	$2, %ebp
.Ltmp1312:
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 537 16 is_stmt 1              # liblzma/lzma/lzma_decoder.c:537:16
	cmpl	$13, %eax
.Ltmp1313:
	.loc	0 537 9 is_stmt 0               # liblzma/lzma/lzma_decoder.c:537:9
	ja	.LBB1_411
.Ltmp1314:
# %bb.371:                              # %if.then3149
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_constu 1, DW_OP_minus, DW_OP_stack_value] $ecx
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 533 27 is_stmt 1              # liblzma/lzma/lzma_decoder.c:533:27
	decl	%ecx
.Ltmp1315:
	#DEBUG_VALUE: lzma_decode:limit <- $ecx
	.loc	0 0 27 is_stmt 0                # liblzma/lzma/lzma_decoder.c:0:27
	movq	%rcx, 64(%rsp)                  # 8-byte Spill
.Ltmp1316:
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
                                        # kill: def $cl killed $cl killed $rcx
	.loc	0 541 11 is_stmt 1              # liblzma/lzma/lzma_decoder.c:541:11
	shll	%cl, %ebp
.Ltmp1317:
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 553 21                        # liblzma/lzma/lzma_decoder.c:553:21
	leaq	(%rdi,%rbp,2), %r11
	.loc	0 554 8                         # liblzma/lzma/lzma_decoder.c:554:8
	movl	%eax, %eax
	addq	%rax, %rax
	subq	%rax, %r11
	.loc	0 554 17 is_stmt 0              # liblzma/lzma/lzma_decoder.c:554:17
	addq	$25950, %r11                    # imm = 0x655E
.Ltmp1318:
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	.loc	0 0 17                          # liblzma/lzma/lzma_decoder.c:0:17
	movq	$0, 8(%rsp)                     # 8-byte Folded Spill
.Ltmp1319:
	#DEBUG_VALUE: lzma_decode:offset <- undef
	movl	$1, %r13d
.Ltmp1320:
	#DEBUG_VALUE: lzma_decode:symbol <- 1
	#DEBUG_VALUE: lzma_decode:offset <- 0
.LBB1_372:                              # %sw.bb3155
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	movq	64(%rsp), %rcx                  # 8-byte Reload
	.loc	0 565 6 is_stmt 1               # liblzma/lzma/lzma_decoder.c:565:6
	leal	-1(%rcx), %eax
	cmpl	$4, %eax
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp1321:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	ja	.LBB1_447
.Ltmp1322:
# %bb.373:                              # %sw.bb3155
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	jmpq	*.LJTI1_1(,%rax,8)
.Ltmp1323:
.LBB1_374:                              # %do.body3158
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 568 7                         # liblzma/lzma/lzma_decoder.c:568:7
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1324:
	.loc	0 568 7 is_stmt 0               # liblzma/lzma/lzma_decoder.c:568:7
	ja	.LBB1_377
.Ltmp1325:
# %bb.375:                              # %if.then3162
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 568 7                         # liblzma/lzma/lzma_decoder.c:568:7
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp1326:
	.loc	0 568 7                         # liblzma/lzma/lzma_decoder.c:568:7
	je	.LBB1_660
.Ltmp1327:
# %bb.376:                              # %if.end3167
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	shll	$8, %ebx
.Ltmp1328:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	shll	$8, %r15d
.Ltmp1329:
	movzbl	(%r8,%r14), %eax
	incq	%r14
.Ltmp1330:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %eax
.Ltmp1331:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $eax
	.loc	0 0 7                           # liblzma/lzma/lzma_decoder.c:0:7
	movl	%eax, %r15d
.Ltmp1332:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
.LBB1_377:                              # %do.end3179
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 568 7                         # liblzma/lzma/lzma_decoder.c:568:7
	movl	%ebx, %ecx
	shrl	$11, %ecx
	movl	%r13d, %eax
	movq	%r11, %rdx
	movzwl	(%r11,%rax,2), %r9d
	imull	%r9d, %ecx
.Ltmp1333:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	.loc	0 568 7                         # liblzma/lzma/lzma_decoder.c:568:7
	addl	%r13d, %r13d
.Ltmp1334:
	#DEBUG_VALUE: lzma_decode:symbol <- $eax
	movl	%r15d, %r11d
.Ltmp1335:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	subl	%ecx, %r11d
.Ltmp1336:
	.loc	0 568 7                         # liblzma/lzma/lzma_decoder.c:568:7
	jae	.LBB1_543
.Ltmp1337:
# %bb.378:                              # %do.body3190
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $eax
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	.loc	0 0 7                           # liblzma/lzma/lzma_decoder.c:0:7
	movl	$2048, %r10d                    # imm = 0x800
.Ltmp1338:
	.loc	0 568 7                         # liblzma/lzma/lzma_decoder.c:568:7
	subl	%r9d, %r10d
	shrl	$5, %r10d
	addl	%r9d, %r10d
.Ltmp1339:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 568 7                         # liblzma/lzma/lzma_decoder.c:568:7
	jmp	.LBB1_544
.Ltmp1340:
.LBB1_379:                              # %do.body5377
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 764 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:764:4
	subl	%ebx, %eax
.Ltmp1341:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movq	%r11, %rdx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	%r10d, %r11d
.Ltmp1342:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, 27756(%rdi,%r9,2)
.Ltmp1343:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	orl	$1, %r13d
.Ltmp1344:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%eax, %ebx
.Ltmp1345:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%ecx, %r15d
.Ltmp1346:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1347:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	jbe	.LBB1_311
.Ltmp1348:
.LBB1_380:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ebx, %eax
.Ltmp1349:
.LBB1_381:                              # %do.end5425
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	%eax, %ebx
	shrl	$11, %ebx
	movl	%r13d, %r9d
	movzwl	27756(%rdi,%r9,2), %r10d
	imull	%r10d, %ebx
.Ltmp1350:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	addl	%r13d, %r13d
.Ltmp1351:
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	movl	%r15d, %ecx
	subl	%ebx, %ecx
.Ltmp1352:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	jae	.LBB1_386
.Ltmp1353:
# %bb.382:                              # %do.body5438
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %eax                     # imm = 0x800
.Ltmp1354:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	subl	%r10d, %eax
	shrl	$5, %eax
	addl	%r10d, %eax
	movw	%ax, 27756(%rdi,%r9,2)
.Ltmp1355:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
.LBB1_383:                              # %do.body5485
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1356:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	ja	.LBB1_387
.Ltmp1357:
.LBB1_384:                              # %if.then5489
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp1358:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	je	.LBB1_643
.Ltmp1359:
# %bb.385:                              # %if.end5494
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movq	%r11, %rdx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	shll	$8, %ebx
.Ltmp1360:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	shll	$8, %r15d
.Ltmp1361:
	movzbl	(%r8,%r14), %eax
	incq	%r14
.Ltmp1362:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %eax
.Ltmp1363:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $eax
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%eax, %r15d
.Ltmp1364:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_388
.Ltmp1365:
.LBB1_386:                              # %do.body5458
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	subl	%ebx, %eax
.Ltmp1366:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movq	%r11, %rdx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	%r10d, %r11d
.Ltmp1367:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, 27756(%rdi,%r9,2)
.Ltmp1368:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	orl	$1, %r13d
.Ltmp1369:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%eax, %ebx
.Ltmp1370:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%ecx, %r15d
.Ltmp1371:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1372:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	jbe	.LBB1_384
.Ltmp1373:
.LBB1_387:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movq	%r11, %rdx
.Ltmp1374:
.LBB1_388:                              # %do.end5506
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	%ebx, %eax
	shrl	$11, %eax
	movl	%r13d, %ecx
	movzwl	27756(%rdi,%rcx,2), %r9d
	imull	%r9d, %eax
.Ltmp1375:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $eax
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	addl	%r13d, %r13d
.Ltmp1376:
	#DEBUG_VALUE: lzma_decode:symbol <- $ecx
	movl	%r15d, %r11d
	subl	%eax, %r11d
.Ltmp1377:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	jae	.LBB1_390
.Ltmp1378:
# %bb.389:                              # %do.body5519
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $ecx
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %r10d                    # imm = 0x800
.Ltmp1379:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	subl	%r9d, %r10d
	shrl	$5, %r10d
	addl	%r9d, %r10d
.Ltmp1380:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	jmp	.LBB1_391
.Ltmp1381:
.LBB1_390:                              # %do.body5539
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $ecx
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $eax
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	subl	%eax, %ebx
.Ltmp1382:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r9d, %eax
.Ltmp1383:
	shrl	$5, %eax
	subl	%eax, %r9d
.Ltmp1384:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	orl	$1, %r13d
.Ltmp1385:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r9d, %r10d
	movl	%ebx, %eax
	movl	%r11d, %r15d
.Ltmp1386:
.LBB1_391:                              # %do.end5563
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movq	%rdx, %r11
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movw	%r10w, 27756(%rdi,%rcx,2)
.Ltmp1387:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	leal	-238(%r13), %ecx
.Ltmp1388:
	#DEBUG_VALUE: lzma_decode:len <- $ecx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movq	%rcx, 40(%rsp)                  # 8-byte Spill
.Ltmp1389:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	movl	%eax, %ebx
.Ltmp1390:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	jmp	.LBB1_448
.Ltmp1391:
.LBB1_392:                              # %do.body4685
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	subl	%ebx, %ecx
.Ltmp1392:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r11d, %ebx
.Ltmp1393:
	shrl	$5, %ebx
	subl	%ebx, %r11d
	movw	%r11w, (%r10)
.Ltmp1394:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	orl	$1, %r13d
.Ltmp1395:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %ebx
.Ltmp1396:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%r9d, %r15d
.Ltmp1397:
.LBB1_393:                              # %do.body4716
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movq	%r12, %r11
	movl	%edx, %r12d
.Ltmp1398:
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
.LBB1_394:                              # %do.body4716
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1399:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	ja	.LBB1_397
.Ltmp1400:
# %bb.395:                              # %if.then4720
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp1401:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	je	.LBB1_608
.Ltmp1402:
# %bb.396:                              # %if.end4725
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, %edx
	movq	%r11, %r12
.Ltmp1403:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:state <- $edx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	%ebx, %ecx
	shll	$8, %ecx
.Ltmp1404:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	shll	$8, %r15d
.Ltmp1405:
	movzbl	(%r8,%r14), %r9d
	incq	%r14
.Ltmp1406:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %r9d
.Ltmp1407:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r9d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r9d, %r15d
.Ltmp1408:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_398
.Ltmp1409:
.LBB1_397:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%r12d, %edx
	movq	%r11, %r12
.Ltmp1410:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:state <- $edx
	movl	%ebx, %ecx
.Ltmp1411:
.LBB1_398:                              # %do.end4737
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	%ecx, %ebx
	shrl	$11, %ebx
	movl	%eax, %r9d
	shlq	$4, %r9
	addq	%rdi, %r9
	movl	%r13d, %r11d
	leaq	(%r9,%r11,2), %r10
	addq	$27500, %r10                    # imm = 0x6B6C
	movzwl	27500(%r9,%r11,2), %r11d
	imull	%r11d, %ebx
.Ltmp1412:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	addl	%r13d, %r13d
.Ltmp1413:
	movl	%r15d, %r9d
	subl	%ebx, %r9d
.Ltmp1414:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	jae	.LBB1_400
.Ltmp1415:
# %bb.399:                              # %do.body4752
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %ecx                     # imm = 0x800
.Ltmp1416:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	subl	%r11d, %ecx
	shrl	$5, %ecx
	addl	%r11d, %ecx
	movw	%cx, (%r10)
.Ltmp1417:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	jmp	.LBB1_401
.Ltmp1418:
.LBB1_400:                              # %do.body4776
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	subl	%ebx, %ecx
.Ltmp1419:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r11d, %ebx
.Ltmp1420:
	shrl	$5, %ebx
	subl	%ebx, %r11d
	movw	%r11w, (%r10)
.Ltmp1421:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	orl	$1, %r13d
.Ltmp1422:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %ebx
.Ltmp1423:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%r9d, %r15d
.Ltmp1424:
.LBB1_401:                              # %do.body4807
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movq	%r12, %r11
	movl	%edx, %r12d
.Ltmp1425:
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
.LBB1_402:                              # %do.body4807
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1426:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	ja	.LBB1_405
.Ltmp1427:
# %bb.403:                              # %if.then4811
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp1428:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	je	.LBB1_590
.Ltmp1429:
# %bb.404:                              # %if.end4816
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movq	%r11, %rdx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	shll	$8, %ebx
.Ltmp1430:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	shll	$8, %r15d
.Ltmp1431:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp1432:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp1433:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%ecx, %r15d
.Ltmp1434:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_406
.Ltmp1435:
.LBB1_405:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movq	%r11, %rdx
.Ltmp1436:
.LBB1_406:                              # %do.end4828
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	%ebx, %ecx
	shrl	$11, %ecx
	movl	%eax, %r9d
	shlq	$4, %r9
	addq	%rdi, %r9
	movl	%r13d, %r10d
	leaq	(%r9,%r10,2), %rax
.Ltmp1437:
	addq	$27500, %rax                    # imm = 0x6B6C
	movzwl	27500(%r9,%r10,2), %r9d
	imull	%r9d, %ecx
.Ltmp1438:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	addl	%r13d, %r13d
.Ltmp1439:
	#DEBUG_VALUE: lzma_decode:symbol <- $r10d
	movl	%r15d, %r11d
	subl	%ecx, %r11d
.Ltmp1440:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	jae	.LBB1_408
.Ltmp1441:
# %bb.407:                              # %do.body4843
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $r10d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	$2048, %r10d                    # imm = 0x800
.Ltmp1442:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	subl	%r9d, %r10d
	shrl	$5, %r10d
	addl	%r9d, %r10d
.Ltmp1443:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	jmp	.LBB1_409
.Ltmp1444:
.LBB1_408:                              # %do.body4867
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $r10d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	subl	%ecx, %ebx
.Ltmp1445:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r9d, %ecx
.Ltmp1446:
	shrl	$5, %ecx
	subl	%ecx, %r9d
.Ltmp1447:
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	orl	$1, %r13d
.Ltmp1448:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r9d, %r10d
	movl	%ebx, %ecx
	movl	%r11d, %r15d
.Ltmp1449:
.LBB1_409:                              # %do.end4895
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movq	%rdx, %r11
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movw	%r10w, (%rax)
.Ltmp1450:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	leal	2(%r13), %eax
.Ltmp1451:
	#DEBUG_VALUE: lzma_decode:len <- $eax
.LBB1_410:                              # %sw.bb5573
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movq	%rax, 40(%rsp)                  # 8-byte Spill
.Ltmp1452:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	movl	%ecx, %ebx
.Ltmp1453:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	jmp	.LBB1_448
.Ltmp1454:
.LBB1_411:                              # %if.else3524
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_constu 1, DW_OP_minus, DW_OP_stack_value] $ecx
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 609 12 is_stmt 1              # liblzma/lzma/lzma_decoder.c:609:12
	addl	$-5, %ecx
.Ltmp1455:
	#DEBUG_VALUE: lzma_decode:limit <- $ecx
	.loc	0 0 12 is_stmt 0                # liblzma/lzma/lzma_decoder.c:0:12
	movq	%rcx, 64(%rsp)                  # 8-byte Spill
.Ltmp1456:
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	movl	%eax, %r13d
.Ltmp1457:
.LBB1_412:                              # %sw.bb3526
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	movq	64(%rsp), %r9                   # 8-byte Reload
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp1458:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp1459:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	jmp	.LBB1_414
.Ltmp1460:
	.p2align	4, 0x90
.LBB1_413:                              # %do.end3550
                                        #   in Loop: Header=BB1_414 Depth=1
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- $r9d
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 614 7 is_stmt 1               # liblzma/lzma/lzma_decoder.c:614:7
	shrl	%ebx
.Ltmp1461:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%r15d, %eax
	subl	%ebx, %eax
.Ltmp1462:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $eax
	movl	%eax, %ecx
	sarl	$31, %ecx
.Ltmp1463:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	leal	(%rcx,%rbp,2), %ebp
.Ltmp1464:
	incl	%ebp
.Ltmp1465:
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	movl	%ecx, %r15d
	andl	%ebx, %r15d
	addl	%eax, %r15d
.Ltmp1466:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	.loc	0 615 23                        # liblzma/lzma/lzma_decoder.c:615:23
	decl	%r9d
.Ltmp1467:
	#DEBUG_VALUE: lzma_decode:limit <- $r9d
	.loc	0 615 6 is_stmt 0               # liblzma/lzma/lzma_decoder.c:615:6
	je	.LBB1_417
.Ltmp1468:
.LBB1_414:                              # %do.body3527
                                        # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- $r9d
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:limit <- $r9d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 614 7 is_stmt 1               # liblzma/lzma/lzma_decoder.c:614:7
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1469:
	.loc	0 614 7 is_stmt 0               # liblzma/lzma/lzma_decoder.c:614:7
	ja	.LBB1_413
.Ltmp1470:
# %bb.415:                              # %if.then3533
                                        #   in Loop: Header=BB1_414 Depth=1
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- $r9d
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 614 7                         # liblzma/lzma/lzma_decoder.c:614:7
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp1471:
	.loc	0 614 7                         # liblzma/lzma/lzma_decoder.c:614:7
	je	.LBB1_453
.Ltmp1472:
# %bb.416:                              # %if.end3538
                                        #   in Loop: Header=BB1_414 Depth=1
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- $r9d
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	shll	$8, %ebx
.Ltmp1473:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	shll	$8, %r15d
.Ltmp1474:
	movzbl	(%r8,%r14), %eax
	incq	%r14
.Ltmp1475:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%eax, %r15d
.Ltmp1476:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	.loc	0 0 7                           # liblzma/lzma/lzma_decoder.c:0:7
	jmp	.LBB1_413
.Ltmp1477:
.LBB1_417:                              # %do.end3572
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- $r9d
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	.loc	0 619 11 is_stmt 1              # liblzma/lzma/lzma_decoder.c:619:11
	shll	$4, %ebp
.Ltmp1478:
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 0 11 is_stmt 0                # liblzma/lzma/lzma_decoder.c:0:11
	movq	$0, 64(%rsp)                    # 8-byte Folded Spill
	movl	$1, %r13d
.Ltmp1479:
	#DEBUG_VALUE: lzma_decode:symbol <- 1
.LBB1_418:                              # %do.body3576
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 632 6 is_stmt 1               # liblzma/lzma/lzma_decoder.c:632:6
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1480:
	.loc	0 632 6 is_stmt 0               # liblzma/lzma/lzma_decoder.c:632:6
	ja	.LBB1_421
.Ltmp1481:
# %bb.419:                              # %if.then3580
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 632 6                         # liblzma/lzma/lzma_decoder.c:632:6
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp1482:
	.loc	0 632 6                         # liblzma/lzma/lzma_decoder.c:632:6
	je	.LBB1_601
.Ltmp1483:
# %bb.420:                              # %if.end3585
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
	shll	$8, %eax
.Ltmp1484:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	shll	$8, %r15d
.Ltmp1485:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp1486:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp1487:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 6                           # liblzma/lzma/lzma_decoder.c:0:6
	movl	%ecx, %r15d
.Ltmp1488:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_422
.Ltmp1489:
.LBB1_421:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
.Ltmp1490:
.LBB1_422:                              # %do.end3597
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 632 6                         # liblzma/lzma/lzma_decoder.c:632:6
	movl	%eax, %ebx
	shrl	$11, %ebx
	movl	%r13d, %r9d
	movzwl	26180(%rdi,%r9,2), %r10d
	imull	%r10d, %ebx
.Ltmp1491:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 632 6                         # liblzma/lzma/lzma_decoder.c:632:6
	addl	%r13d, %r13d
.Ltmp1492:
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	movl	%r15d, %ecx
	subl	%ebx, %ecx
.Ltmp1493:
	.loc	0 632 6                         # liblzma/lzma/lzma_decoder.c:632:6
	jae	.LBB1_427
.Ltmp1494:
# %bb.423:                              # %do.body3608
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 6                           # liblzma/lzma/lzma_decoder.c:0:6
	movl	$2048, %eax                     # imm = 0x800
.Ltmp1495:
	.loc	0 632 6                         # liblzma/lzma/lzma_decoder.c:632:6
	subl	%r10d, %eax
	shrl	$5, %eax
	addl	%r10d, %eax
	movw	%ax, 26180(%rdi,%r9,2)
.Ltmp1496:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
.LBB1_424:                              # %do.body3652
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 635 6 is_stmt 1               # liblzma/lzma/lzma_decoder.c:635:6
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1497:
	.loc	0 635 6 is_stmt 0               # liblzma/lzma/lzma_decoder.c:635:6
	ja	.LBB1_428
.Ltmp1498:
.LBB1_425:                              # %if.then3656
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 635 6                         # liblzma/lzma/lzma_decoder.c:635:6
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp1499:
	.loc	0 635 6                         # liblzma/lzma/lzma_decoder.c:635:6
	je	.LBB1_599
.Ltmp1500:
# %bb.426:                              # %if.end3661
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
	shll	$8, %eax
.Ltmp1501:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	shll	$8, %r15d
.Ltmp1502:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp1503:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp1504:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 6                           # liblzma/lzma/lzma_decoder.c:0:6
	movl	%ecx, %r15d
.Ltmp1505:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_429
.Ltmp1506:
.LBB1_427:                              # %do.body3626
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 632 6 is_stmt 1               # liblzma/lzma/lzma_decoder.c:632:6
	subl	%ebx, %eax
.Ltmp1507:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 6 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:6
	movq	%r11, %rdx
	.loc	0 632 6                         # liblzma/lzma/lzma_decoder.c:632:6
	movl	%r10d, %r11d
.Ltmp1508:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, 26180(%rdi,%r9,2)
.Ltmp1509:
	.loc	0 632 6                         # liblzma/lzma/lzma_decoder.c:632:6
	orl	$1, %r13d
.Ltmp1510:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	incl	%ebp
.Ltmp1511:
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 0 6                           # liblzma/lzma/lzma_decoder.c:0:6
	movl	%eax, %ebx
.Ltmp1512:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%ecx, %r15d
.Ltmp1513:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 635 6 is_stmt 1               # liblzma/lzma/lzma_decoder.c:635:6
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1514:
	.loc	0 635 6 is_stmt 0               # liblzma/lzma/lzma_decoder.c:635:6
	jbe	.LBB1_425
.Ltmp1515:
.LBB1_428:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 6                           # liblzma/lzma/lzma_decoder.c:0:6
	movl	%ebx, %eax
.Ltmp1516:
.LBB1_429:                              # %do.end3673
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 635 6                         # liblzma/lzma/lzma_decoder.c:635:6
	movl	%eax, %ebx
	shrl	$11, %ebx
	movl	%r13d, %r9d
	movzwl	26180(%rdi,%r9,2), %r10d
	imull	%r10d, %ebx
.Ltmp1517:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 635 6                         # liblzma/lzma/lzma_decoder.c:635:6
	addl	%r13d, %r13d
.Ltmp1518:
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	movl	%r15d, %ecx
	subl	%ebx, %ecx
.Ltmp1519:
	.loc	0 635 6                         # liblzma/lzma/lzma_decoder.c:635:6
	jae	.LBB1_434
.Ltmp1520:
# %bb.430:                              # %do.body3685
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 6                           # liblzma/lzma/lzma_decoder.c:0:6
	movl	$2048, %eax                     # imm = 0x800
.Ltmp1521:
	.loc	0 635 6                         # liblzma/lzma/lzma_decoder.c:635:6
	subl	%r10d, %eax
	shrl	$5, %eax
	addl	%r10d, %eax
	movw	%ax, 26180(%rdi,%r9,2)
.Ltmp1522:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
.LBB1_431:                              # %do.body3729
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 638 6 is_stmt 1               # liblzma/lzma/lzma_decoder.c:638:6
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1523:
	.loc	0 638 6 is_stmt 0               # liblzma/lzma/lzma_decoder.c:638:6
	ja	.LBB1_435
.Ltmp1524:
.LBB1_432:                              # %if.then3733
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 638 6                         # liblzma/lzma/lzma_decoder.c:638:6
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp1525:
	.loc	0 638 6                         # liblzma/lzma/lzma_decoder.c:638:6
	je	.LBB1_636
.Ltmp1526:
# %bb.433:                              # %if.end3738
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
	shll	$8, %eax
.Ltmp1527:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	shll	$8, %r15d
.Ltmp1528:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp1529:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp1530:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 6                           # liblzma/lzma/lzma_decoder.c:0:6
	movl	%ecx, %r15d
.Ltmp1531:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_436
.Ltmp1532:
.LBB1_434:                              # %do.body3703
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 635 6 is_stmt 1               # liblzma/lzma/lzma_decoder.c:635:6
	subl	%ebx, %eax
.Ltmp1533:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 6 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:6
	movq	%r11, %rdx
	.loc	0 635 6                         # liblzma/lzma/lzma_decoder.c:635:6
	movl	%r10d, %r11d
.Ltmp1534:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, 26180(%rdi,%r9,2)
.Ltmp1535:
	.loc	0 635 6                         # liblzma/lzma/lzma_decoder.c:635:6
	orl	$1, %r13d
.Ltmp1536:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	addl	$2, %ebp
.Ltmp1537:
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 0 6                           # liblzma/lzma/lzma_decoder.c:0:6
	movl	%eax, %ebx
.Ltmp1538:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%ecx, %r15d
.Ltmp1539:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 638 6 is_stmt 1               # liblzma/lzma/lzma_decoder.c:638:6
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1540:
	.loc	0 638 6 is_stmt 0               # liblzma/lzma/lzma_decoder.c:638:6
	jbe	.LBB1_432
.Ltmp1541:
.LBB1_435:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 6                           # liblzma/lzma/lzma_decoder.c:0:6
	movl	%ebx, %eax
.Ltmp1542:
.LBB1_436:                              # %do.end3750
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 638 6                         # liblzma/lzma/lzma_decoder.c:638:6
	movl	%eax, %ebx
	shrl	$11, %ebx
	movl	%r13d, %r9d
	movzwl	26180(%rdi,%r9,2), %r10d
	imull	%r10d, %ebx
.Ltmp1543:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 638 6                         # liblzma/lzma/lzma_decoder.c:638:6
	addl	%r13d, %r13d
.Ltmp1544:
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	movl	%r15d, %ecx
	subl	%ebx, %ecx
.Ltmp1545:
	.loc	0 638 6                         # liblzma/lzma/lzma_decoder.c:638:6
	jae	.LBB1_441
.Ltmp1546:
# %bb.437:                              # %do.body3762
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 6                           # liblzma/lzma/lzma_decoder.c:0:6
	movl	$2048, %eax                     # imm = 0x800
.Ltmp1547:
	.loc	0 638 6                         # liblzma/lzma/lzma_decoder.c:638:6
	subl	%r10d, %eax
	shrl	$5, %eax
	addl	%r10d, %eax
	movw	%ax, 26180(%rdi,%r9,2)
.Ltmp1548:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
.LBB1_438:                              # %do.body3806
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 644 6 is_stmt 1               # liblzma/lzma/lzma_decoder.c:644:6
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1549:
	.loc	0 644 6 is_stmt 0               # liblzma/lzma/lzma_decoder.c:644:6
	ja	.LBB1_442
.Ltmp1550:
.LBB1_439:                              # %if.then3810
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 644 6                         # liblzma/lzma/lzma_decoder.c:644:6
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp1551:
	.loc	0 644 6                         # liblzma/lzma/lzma_decoder.c:644:6
	je	.LBB1_596
.Ltmp1552:
# %bb.440:                              # %if.end3815
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 6                           # liblzma/lzma/lzma_decoder.c:0:6
	movq	%r11, %rdx
	.loc	0 644 6                         # liblzma/lzma/lzma_decoder.c:644:6
	movl	%ebx, %ecx
	shll	$8, %ecx
.Ltmp1553:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	shll	$8, %r15d
.Ltmp1554:
	movzbl	(%r8,%r14), %eax
	incq	%r14
.Ltmp1555:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %eax
.Ltmp1556:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $eax
	.loc	0 0 6                           # liblzma/lzma/lzma_decoder.c:0:6
	movl	%eax, %r15d
.Ltmp1557:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_443
.Ltmp1558:
.LBB1_441:                              # %do.body3780
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r9d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 638 6 is_stmt 1               # liblzma/lzma/lzma_decoder.c:638:6
	subl	%ebx, %eax
.Ltmp1559:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 6 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:6
	movq	%r11, %rdx
	.loc	0 638 6                         # liblzma/lzma/lzma_decoder.c:638:6
	movl	%r10d, %r11d
.Ltmp1560:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, 26180(%rdi,%r9,2)
.Ltmp1561:
	.loc	0 638 6                         # liblzma/lzma/lzma_decoder.c:638:6
	orl	$1, %r13d
.Ltmp1562:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	addl	$4, %ebp
.Ltmp1563:
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 0 6                           # liblzma/lzma/lzma_decoder.c:0:6
	movl	%eax, %ebx
.Ltmp1564:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%ecx, %r15d
.Ltmp1565:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 644 6 is_stmt 1               # liblzma/lzma/lzma_decoder.c:644:6
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1566:
	.loc	0 644 6 is_stmt 0               # liblzma/lzma/lzma_decoder.c:644:6
	jbe	.LBB1_439
.Ltmp1567:
.LBB1_442:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 6                           # liblzma/lzma/lzma_decoder.c:0:6
	movq	%r11, %rdx
	movl	%ebx, %ecx
.Ltmp1568:
.LBB1_443:                              # %do.end3827
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 644 6                         # liblzma/lzma/lzma_decoder.c:644:6
	movl	%ecx, %ebx
	shrl	$11, %ebx
	movl	%r13d, %eax
	movzwl	26180(%rdi,%rax,2), %r9d
	imull	%r9d, %ebx
.Ltmp1569:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 644 6                         # liblzma/lzma/lzma_decoder.c:644:6
	movl	%r15d, %r11d
	subl	%ebx, %r11d
.Ltmp1570:
	.loc	0 644 6                         # liblzma/lzma/lzma_decoder.c:644:6
	jae	.LBB1_445
.Ltmp1571:
# %bb.444:                              # %do.body3839
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 6                           # liblzma/lzma/lzma_decoder.c:0:6
	movl	$2048, %r10d                    # imm = 0x800
.Ltmp1572:
	.loc	0 644 6                         # liblzma/lzma/lzma_decoder.c:644:6
	subl	%r9d, %r10d
	shrl	$5, %r10d
	addl	%r9d, %r10d
.Ltmp1573:
	.loc	0 644 6                         # liblzma/lzma/lzma_decoder.c:644:6
	jmp	.LBB1_446
.Ltmp1574:
.LBB1_445:                              # %do.body3856
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 644 6                         # liblzma/lzma/lzma_decoder.c:644:6
	subl	%ebx, %ecx
.Ltmp1575:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r9d, %r10d
	shrl	$5, %r10d
	subl	%r10d, %r9d
.Ltmp1576:
	.loc	0 644 6                         # liblzma/lzma/lzma_decoder.c:644:6
	addl	$8, %ebp
.Ltmp1577:
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 0 6                           # liblzma/lzma/lzma_decoder.c:0:6
	movl	%r9d, %r10d
	movl	%ecx, %ebx
.Ltmp1578:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%r11d, %r15d
.Ltmp1579:
.LBB1_446:                              # %do.end3877
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 644 6                         # liblzma/lzma/lzma_decoder.c:644:6
	movw	%r10w, 26180(%rdi,%rax,2)
.Ltmp1580:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 648 15 is_stmt 1              # liblzma/lzma/lzma_decoder.c:648:15
	cmpl	$-1, %ebp
	movq	64(%rsp), %rcx                  # 8-byte Reload
	movq	%rdx, %r11
.Ltmp1581:
	.loc	0 648 10 is_stmt 0              # liblzma/lzma/lzma_decoder.c:648:10
	je	.LBB1_580
.Ltmp1582:
.LBB1_447:                              # %if.end3911
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- $ecx
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- $ecx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 0 10                          # liblzma/lzma/lzma_decoder.c:0:10
	movq	%rcx, 64(%rsp)                  # 8-byte Spill
.Ltmp1583:
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	.loc	0 670 8 is_stmt 1               # liblzma/lzma/lzma_decoder.c:670:8
	movl	%ebp, %eax
.Ltmp1584:
	#DEBUG_VALUE: dict_is_distance_valid:distance <- $ebp
	#DEBUG_VALUE: dict_is_distance_valid:dict <- undef
	.loc	12 122 20                       # liblzma/lz/lz_decoder.h:122:20
	cmpq	%rax, 72(%rsp)                  # 8-byte Folded Reload
.Ltmp1585:
	.loc	0 670 8                         # liblzma/lzma/lzma_decoder.c:670:8
	jbe	.LBB1_574
.Ltmp1586:
.LBB1_448:                              # %sw.bb5573
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: dict_repeat:dict <- undef
	#DEBUG_VALUE: dict_repeat:distance <- $ebp
	#DEBUG_VALUE: dict_repeat:len <- undef
	.loc	0 0 8 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:8
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp1587:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp1588:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%rbp, %rcx
	movq	112(%rsp), %rbp                 # 8-byte Reload
.Ltmp1589:
	movq	40(%rsp), %r9                   # 8-byte Reload
	movq	56(%rsp), %r12                  # 8-byte Reload
.Ltmp1590:
	.loc	12 131 40 is_stmt 1             # liblzma/lz/lz_decoder.h:131:40
	subq	%r12, %rbp
.Ltmp1591:
	#DEBUG_VALUE: dict_repeat:distance <- $ecx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ecx
	#DEBUG_VALUE: dict_repeat:dict_avail <- $rbp
	.loc	12 132 18                       # liblzma/lz/lz_decoder.h:132:18
	movl	%r9d, %eax
	cmpq	%rax, %rbp
	cmovael	%r9d, %ebp
.Ltmp1592:
	#DEBUG_VALUE: dict_repeat:left <- $ebp
	.loc	12 133 7                        # liblzma/lz/lz_decoder.h:133:7
	subl	%ebp, %r9d
.Ltmp1593:
	#DEBUG_VALUE: lzma_decode:len <- $r9d
	.loc	12 0 7 is_stmt 0                # liblzma/lz/lz_decoder.h:0:7
	movl	%ecx, %r13d
.Ltmp1594:
	.loc	12 138 15 is_stmt 1             # liblzma/lz/lz_decoder.h:138:15
	cmpl	%ecx, %ebp
.Ltmp1595:
	.loc	12 138 6 is_stmt 0              # liblzma/lz/lz_decoder.h:138:6
	jbe	.LBB1_451
.Ltmp1596:
# %bb.449:                              # %do.body.preheader.i
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $r13d
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- $r9d
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: dict_repeat:distance <- $r13d
	#DEBUG_VALUE: dict_repeat:left <- $ebp
	.loc	12 0 6                          # liblzma/lz/lz_decoder.h:0:6
	movq	%r8, 120(%rsp)                  # 8-byte Spill
	movq	%r9, 40(%rsp)                   # 8-byte Spill
.Ltmp1597:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	movq	%rcx, 24(%rsp)                  # 8-byte Spill
	movq	%r13, %rax
	notq	%rax
.Ltmp1598:
	.loc	12 141 3 is_stmt 1              # liblzma/lz/lz_decoder.h:141:3
	testb	$1, %bpl
	jne	.LBB1_466
.Ltmp1599:
# %bb.450:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: dict_repeat:distance <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: dict_repeat:left <- $ebp
	.loc	12 0 3 is_stmt 0                # liblzma/lz/lz_decoder.h:0:3
	movq	%r11, %rdx
	movl	%ebp, %ecx
	.loc	12 141 3                        # liblzma/lz/lz_decoder.h:141:3
	jmp	.LBB1_467
.Ltmp1600:
.LBB1_451:                              # %if.else.i
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $r13d
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- $r9d
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: dict_repeat:distance <- $r13d
	#DEBUG_VALUE: dict_repeat:left <- $ebp
	.loc	12 0 3                          # liblzma/lz/lz_decoder.h:0:3
	movq	%r9, 40(%rsp)                   # 8-byte Spill
.Ltmp1601:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	movq	%r11, 136(%rsp)                 # 8-byte Spill
.Ltmp1602:
	#DEBUG_VALUE: lzma_decode:probs <- [DW_OP_plus_uconst 136, DW_OP_deref] $rsp
	movq	%rcx, 24(%rsp)                  # 8-byte Spill
.Ltmp1603:
	.loc	12 146 22 is_stmt 1             # liblzma/lz/lz_decoder.h:146:22
	cmpq	%r13, %r12
	movq	%r8, 120(%rsp)                  # 8-byte Spill
	movq	%rdi, 144(%rsp)                 # 8-byte Spill
.Ltmp1604:
	.loc	12 146 13 is_stmt 0             # liblzma/lz/lz_decoder.h:146:13
	jbe	.LBB1_470
.Ltmp1605:
# %bb.452:                              # %if.then15.i
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- [DW_OP_plus_uconst 136, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: dict_repeat:distance <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: dict_repeat:left <- $ebp
	.loc	12 0 13                         # liblzma/lz/lz_decoder.h:0:13
	movq	96(%rsp), %rax                  # 8-byte Reload
.Ltmp1606:
	.loc	12 148 20 is_stmt 1             # liblzma/lz/lz_decoder.h:148:20
	leaq	(%rax,%r12), %rdi
	.loc	12 149 38                       # liblzma/lz/lz_decoder.h:149:38
	notq	%r13
	addq	%rdi, %r13
	.loc	12 150 5                        # liblzma/lz/lz_decoder.h:150:5
	movl	%ebp, %ebp
.Ltmp1607:
	.loc	12 148 3                        # liblzma/lz/lz_decoder.h:148:3
	movq	%r13, %rsi
	jmp	.LBB1_472
.Ltmp1608:
.LBB1_453:                              # %if.then3536
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- $r9d
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	12 0 3 is_stmt 0                # liblzma/lz/lz_decoder.h:0:3
	movq	%r9, 64(%rsp)                   # 8-byte Spill
.Ltmp1609:
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp1610:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp1611:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 614 7 is_stmt 1               # liblzma/lzma/lzma_decoder.c:614:7
	movl	$43, 28320(%rdi)
.Ltmp1612:
.LBB1_454:                              # %out
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 7 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:7
	xorl	%ecx, %ecx
	movb	$1, %dl
.Ltmp1613:
.LBB1_455:                              # %out
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_LLVM_entry_value 1] $r8
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	xorl	%eax, %eax
.Ltmp1614:
.LBB1_456:                              # %out
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_LLVM_entry_value 1] $r8
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	(%rsp), %ebp                    # 4-byte Reload
.Ltmp1615:
.LBB1_457:                              # %out
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_LLVM_entry_value 1] $r8
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movq	8(%rsp), %r11                   # 8-byte Reload
.Ltmp1616:
.LBB1_458:                              # %out
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_LLVM_entry_value 1] $r8
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- $r11d
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_LABEL: lzma_decode:out
	movq	56(%rsp), %r9                   # 8-byte Reload
	movq	184(%rsp), %rsi                 # 8-byte Reload
	.loc	0 792 15 is_stmt 1              # liblzma/lzma/lzma_decoder.c:792:15
	movq	%r9, 8(%rsi)
	movq	72(%rsp), %r10                  # 8-byte Reload
	.loc	0 793 16                        # liblzma/lzma/lzma_decoder.c:793:16
	movq	%r10, 16(%rsi)
.Ltmp1617:
	.loc	0 795 2                         # liblzma/lzma/lzma_decoder.c:795:2
	movl	%ebx, 28268(%rdi)
	movl	%r15d, 28272(%rdi)
	movl	$0, 28276(%rdi)
	movq	176(%rsp), %rsi                 # 8-byte Reload
	movq	32(%rsp), %r8                   # 8-byte Reload
	movq	%r8, (%rsi)
	movl	4(%rsp), %esi                   # 4-byte Reload
.Ltmp1618:
	.loc	0 797 15                        # liblzma/lzma/lzma_decoder.c:797:15
	movl	%esi, 28280(%rdi)
	movq	24(%rsp), %rsi                  # 8-byte Reload
	.loc	0 798 14                        # liblzma/lzma/lzma_decoder.c:798:14
	movl	%esi, 28284(%rdi)
	movl	52(%rsp), %esi                  # 4-byte Reload
	.loc	0 799 14                        # liblzma/lzma/lzma_decoder.c:799:14
	movl	%esi, 28288(%rdi)
	.loc	0 800 14                        # liblzma/lzma/lzma_decoder.c:800:14
	movl	%ebp, 28292(%rdi)
	movl	92(%rsp), %esi                  # 4-byte Reload
	.loc	0 801 14                        # liblzma/lzma/lzma_decoder.c:801:14
	movl	%esi, 28296(%rdi)
	.loc	0 803 15                        # liblzma/lzma/lzma_decoder.c:803:15
	movq	%r12, 28328(%rdi)
	movq	16(%rsp), %rsi                  # 8-byte Reload
	.loc	0 804 16                        # liblzma/lzma/lzma_decoder.c:804:16
	movl	%esi, 28336(%rdi)
	movq	64(%rsp), %rsi                  # 8-byte Reload
	.loc	0 805 15                        # liblzma/lzma/lzma_decoder.c:805:15
	movl	%esi, 28340(%rdi)
	.loc	0 806 16                        # liblzma/lzma/lzma_decoder.c:806:16
	movl	%r11d, 28344(%rdi)
	movq	40(%rsp), %rsi                  # 8-byte Reload
	.loc	0 807 13                        # liblzma/lzma/lzma_decoder.c:807:13
	movl	%esi, 28348(%rdi)
.Ltmp1619:
	.loc	0 811 13                        # liblzma/lzma/lzma_decoder.c:811:13
	movq	28312(%rdi), %rsi
	.loc	0 811 31 is_stmt 0              # liblzma/lzma/lzma_decoder.c:811:31
	cmpq	$-1, %rsi
.Ltmp1620:
	.loc	0 811 6                         # liblzma/lzma/lzma_decoder.c:811:6
	je	.LBB1_463
.Ltmp1621:
# %bb.459:                              # %if.then5622
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_LLVM_entry_value 1] $r8
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- $r11d
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 6                           # liblzma/lzma/lzma_decoder.c:0:6
	movq	168(%rsp), %r8                  # 8-byte Reload
.Ltmp1622:
	.loc	0 812 40 is_stmt 1              # liblzma/lzma/lzma_decoder.c:812:40
	subq	%r9, %r8
.Ltmp1623:
	.loc	0 817 32                        # liblzma/lzma/lzma_decoder.c:817:32
	addq	%r8, %rsi
.Ltmp1624:
	.loc	0 812 28                        # liblzma/lzma/lzma_decoder.c:812:28
	movq	%rsi, 28312(%rdi)
.Ltmp1625:
	.loc	0 817 32                        # liblzma/lzma/lzma_decoder.c:817:32
	setne	%sil
	.loc	0 817 37 is_stmt 0              # liblzma/lzma/lzma_decoder.c:817:37
	xorb	$1, %dl
	orb	%sil, %dl
	jne	.LBB1_463
.Ltmp1626:
# %bb.460:                              # %land.lhs.true5633
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_LLVM_entry_value 1] $r8
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- $r11d
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 818 15 is_stmt 1              # liblzma/lzma/lzma_decoder.c:818:15
	movl	28320(%rdi), %eax
.Ltmp1627:
	.loc	0 817 7                         # liblzma/lzma/lzma_decoder.c:817:7
	testl	%eax, %eax
	je	.LBB1_465
.Ltmp1628:
# %bb.461:                              # %land.lhs.true5633
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_LLVM_entry_value 1] $r8
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- $r11d
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	cmpl	$1, %eax
	je	.LBB1_464
.Ltmp1629:
# %bb.462:                              # %cleanup.fold.split
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_LLVM_entry_value 1] $r8
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- $r11d
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 7 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:7
	movl	$9, %eax
	jmp	.LBB1_465
.Ltmp1630:
.LBB1_463:                              # %if.end5643
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_LLVM_entry_value 1] $r8
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- $r11d
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:ret <- $eax
	.loc	0 825 6 is_stmt 1               # liblzma/lzma/lzma_decoder.c:825:6
	testb	%cl, %cl
	je	.LBB1_465
.Ltmp1631:
.LBB1_464:                              # %if.then5646
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_LLVM_entry_value 1] $r8
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- $r11d
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	.loc	0 826 8                         # liblzma/lzma/lzma_decoder.c:826:8
	xorl	%eax, %eax
	testl	%r15d, %r15d
	setne	%al
.Ltmp1632:
	.loc	0 826 7 is_stmt 0               # liblzma/lzma/lzma_decoder.c:826:7
	leal	1(,%rax,8), %eax
.Ltmp1633:
	#DEBUG_VALUE: lzma_decode:ret <- $eax
	.loc	0 0 7                           # liblzma/lzma/lzma_decoder.c:0:7
	movl	$4294967295, %ecx               # imm = 0xFFFFFFFF
.Ltmp1634:
	.loc	0 831 3 is_stmt 1               # liblzma/lzma/lzma_decoder.c:831:3
	movq	%rcx, 28268(%rdi)
	movl	$5, 28276(%rdi)
.Ltmp1635:
.LBB1_465:                              # %cleanup
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_LLVM_entry_value 1] $rsi
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_LLVM_entry_value 1] $rcx
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_LLVM_entry_value 1] $r8
	.loc	0 835 1 epilogue_begin          # liblzma/lzma/lzma_decoder.c:835:1
	addq	$200, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Ltmp1636:
.LBB1_466:                              # %do.body.i.prol
	.cfi_def_cfa_offset 256
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: dict_repeat:distance <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: dict_repeat:left <- $ebp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: dict_repeat:left <- $ebp
	#DEBUG_VALUE: dict_get:dict <- undef
	#DEBUG_VALUE: dict_get:distance <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 0 1 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:1
	xorl	%ecx, %ecx
	movq	%rsi, %rdx
	movq	56(%rsp), %rsi                  # 8-byte Reload
.Ltmp1637:
	.loc	12 106 16 is_stmt 1             # liblzma/lz/lz_decoder.h:106:16
	cmpq	%r13, %rsi
	.loc	12 106 7 is_stmt 0              # liblzma/lz/lz_decoder.h:106:7
	cmovbeq	%rdx, %rcx
	movq	96(%rsp), %r8                   # 8-byte Reload
	.loc	12 105 9 is_stmt 1              # liblzma/lz/lz_decoder.h:105:9
	leaq	(%r8,%rsi), %r9
	addq	%rax, %r9
	movzbl	(%rcx,%r9), %ecx
.Ltmp1638:
	.loc	12 142 25                       # liblzma/lz/lz_decoder.h:142:25
	movb	%cl, (%r8,%rsi)
	.loc	12 143 4                        # liblzma/lz/lz_decoder.h:143:4
	incq	%rsi
.Ltmp1639:
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 64 64] $rsi
	.loc	12 0 4 is_stmt 0                # liblzma/lz/lz_decoder.h:0:4
	movq	%rsi, 56(%rsp)                  # 8-byte Spill
.Ltmp1640:
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	movq	%r11, %rdx
.Ltmp1641:
	.loc	12 144 12 is_stmt 1             # liblzma/lz/lz_decoder.h:144:12
	leal	-1(%rbp), %ecx
.Ltmp1642:
	#DEBUG_VALUE: dict_repeat:left <- $ecx
.LBB1_467:                              # %do.body.i.prol.loopexit
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: dict_repeat:distance <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: dict_repeat:left <- $ecx
	.loc	12 141 3                        # liblzma/lz/lz_decoder.h:141:3
	cmpl	$1, %ebp
	movq	56(%rsp), %r12                  # 8-byte Reload
	movq	96(%rsp), %rsi                  # 8-byte Reload
	movq	80(%rsp), %r8                   # 8-byte Reload
	je	.LBB1_541
.Ltmp1643:
# %bb.468:                              # %do.body.i.preheader
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: dict_repeat:distance <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: dict_repeat:left <- $ecx
	.loc	12 0 3 is_stmt 0                # liblzma/lz/lz_decoder.h:0:3
	xorl	%r9d, %r9d
.Ltmp1644:
	.p2align	4, 0x90
.LBB1_469:                              # %do.body.i
                                        # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 64 64] $r12
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: dict_repeat:distance <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: dict_repeat:left <- $ecx
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 64 64] $r12
	#DEBUG_VALUE: dict_repeat:left <- $ecx
	#DEBUG_VALUE: dict_get:dict <- undef
	#DEBUG_VALUE: dict_get:distance <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	12 106 16 is_stmt 1             # liblzma/lz/lz_decoder.h:106:16
	cmpq	%r13, %r12
	.loc	12 106 7 is_stmt 0              # liblzma/lz/lz_decoder.h:106:7
	movq	%r8, %r10
	cmovaq	%r9, %r10
	.loc	12 105 9 is_stmt 1              # liblzma/lz/lz_decoder.h:105:9
	leaq	(%rsi,%r12), %r11
	addq	%rax, %r11
.Ltmp1645:
	.loc	12 143 4                        # liblzma/lz/lz_decoder.h:143:4
	leaq	1(%r12), %rbp
.Ltmp1646:
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 64 64] $rbp
	#DEBUG_VALUE: dict_repeat:left <- [DW_OP_constu 1, DW_OP_minus, DW_OP_stack_value] $ecx
	.loc	12 106 16                       # liblzma/lz/lz_decoder.h:106:16
	cmpq	%r13, %rbp
	.loc	12 106 7 is_stmt 0              # liblzma/lz/lz_decoder.h:106:7
	movq	%r8, %rbp
.Ltmp1647:
	cmovaq	%r9, %rbp
	.loc	12 105 9 is_stmt 1              # liblzma/lz/lz_decoder.h:105:9
	movzbl	(%r10,%r11), %r10d
.Ltmp1648:
	.loc	12 142 25                       # liblzma/lz/lz_decoder.h:142:25
	movb	%r10b, (%rsi,%r12)
.Ltmp1649:
	.loc	12 105 9                        # liblzma/lz/lz_decoder.h:105:9
	leaq	(%rsi,%r12), %r10
	incq	%r10
	addq	%rax, %r10
	movzbl	(%rbp,%r10), %r10d
.Ltmp1650:
	.loc	12 142 25                       # liblzma/lz/lz_decoder.h:142:25
	movb	%r10b, 1(%rsi,%r12)
	.loc	12 143 4                        # liblzma/lz/lz_decoder.h:143:4
	addq	$2, %r12
.Ltmp1651:
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 64 64] $r12
	.loc	12 144 19                       # liblzma/lz/lz_decoder.h:144:19
	addl	$-2, %ecx
.Ltmp1652:
	#DEBUG_VALUE: dict_repeat:left <- $ecx
	.loc	12 144 3 is_stmt 0              # liblzma/lz/lz_decoder.h:144:3
	jne	.LBB1_469
	jmp	.LBB1_541
.Ltmp1653:
.LBB1_470:                              # %if.else26.i
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- [DW_OP_plus_uconst 136, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: dict_repeat:distance <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: dict_repeat:left <- $ebp
	.loc	12 159 28 is_stmt 1             # liblzma/lz/lz_decoder.h:159:28
	notl	%r13d
	addl	%r12d, %r13d
	.loc	12 159 32 is_stmt 0             # liblzma/lz/lz_decoder.h:159:32
	addl	%r13d, %esi
.Ltmp1654:
	#DEBUG_VALUE: copy_pos <- undef
	.loc	12 160 24 is_stmt 1             # liblzma/lz/lz_decoder.h:160:24
	movl	%r13d, %eax
	negl	%eax
.Ltmp1655:
	#DEBUG_VALUE: copy_size <- $eax
	.loc	12 0 24 is_stmt 0               # liblzma/lz/lz_decoder.h:0:24
	movq	96(%rsp), %rcx                  # 8-byte Reload
.Ltmp1656:
	leaq	(%rcx,%r12), %rdi
	addq	%rcx, %rsi
	.loc	12 162 17 is_stmt 1             # liblzma/lz/lz_decoder.h:162:17
	cmpl	%eax, %ebp
.Ltmp1657:
	.loc	12 162 7 is_stmt 0              # liblzma/lz/lz_decoder.h:162:7
	jbe	.LBB1_539
.Ltmp1658:
# %bb.471:                              # %if.then39.i
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- [DW_OP_plus_uconst 136, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: dict_repeat:distance <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: dict_repeat:left <- $ebp
	#DEBUG_VALUE: copy_size <- $eax
	.loc	12 164 6 is_stmt 1              # liblzma/lz/lz_decoder.h:164:6
	movl	%eax, %edx
	movq	%rdx, 128(%rsp)                 # 8-byte Spill
	.loc	12 163 4                        # liblzma/lz/lz_decoder.h:163:4
	callq	memmove@PLT
.Ltmp1659:
	#DEBUG_VALUE: copy_size <- [DW_OP_plus_uconst 128, DW_OP_deref] $rsp
	.loc	12 165 14                       # liblzma/lz/lz_decoder.h:165:14
	addq	128(%rsp), %r12                 # 8-byte Folded Reload
.Ltmp1660:
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 64 64] $r12
	.loc	12 166 21                       # liblzma/lz/lz_decoder.h:166:21
	addl	%r13d, %ebp
.Ltmp1661:
	#DEBUG_VALUE: copy_size <- $ebp
	.loc	12 0 21 is_stmt 0               # liblzma/lz/lz_decoder.h:0:21
	movq	96(%rsp), %rsi                  # 8-byte Reload
	.loc	12 167 21 is_stmt 1             # liblzma/lz/lz_decoder.h:167:21
	leaq	(%rsi,%r12), %rdi
.Ltmp1662:
.LBB1_472:                              # %if.end71.sink.split.i
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 64 64] $r12
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- [DW_OP_plus_uconst 136, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: dict_repeat:distance <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	12 0 0 is_stmt 0                # liblzma/lz/lz_decoder.h:0:0
	movq	%rbp, %rdx
	callq	memcpy@PLT
.Ltmp1663:
	jmp	.LBB1_540
.Ltmp1664:
.LBB1_473:                              # %if.else666
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- 1
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: dict_get:dict <- undef
	#DEBUG_VALUE: dict_get:distance <- $ebp
	.loc	12 105 31 is_stmt 1             # liblzma/lz/lz_decoder.h:105:31
	movl	%ebp, %ecx
	xorl	%r9d, %r9d
	.loc	12 106 16                       # liblzma/lz/lz_decoder.h:106:16
	cmpq	%rcx, %r11
	.loc	12 106 7 is_stmt 0              # liblzma/lz/lz_decoder.h:106:7
	cmovbeq	%rsi, %r9
	.loc	12 105 40 is_stmt 1             # liblzma/lz/lz_decoder.h:105:40
	notq	%rcx
	.loc	12 105 9 is_stmt 0              # liblzma/lz/lz_decoder.h:105:9
	addq	%rcx, %rax
	movzbl	(%r9,%rax), %eax
.Ltmp1665:
	.loc	0 390 33 is_stmt 1              # liblzma/lzma/lzma_decoder.c:390:33
	addl	%eax, %eax
.Ltmp1666:
	#DEBUG_VALUE: lzma_decode:len <- $eax
	.loc	0 0 33 is_stmt 0                # liblzma/lzma/lzma_decoder.c:0:33
	movq	%rax, 40(%rsp)                  # 8-byte Spill
.Ltmp1667:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	movl	$256, %eax                      # imm = 0x100
	movq	%rax, 8(%rsp)                   # 8-byte Spill
.Ltmp1668:
	#DEBUG_VALUE: lzma_decode:offset <- undef
	movl	$1, %r13d
.Ltmp1669:
	#DEBUG_VALUE: lzma_decode:offset <- 256
	movq	%rdx, %r11
.Ltmp1670:
.LBB1_474:                              # %sw.bb670
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp1671:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	movq	8(%rsp), %rcx                   # 8-byte Reload
	.loc	0 434 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:434:5
	movl	%ecx, %eax
	movq	40(%rsp), %rsi                  # 8-byte Reload
	andl	%esi, %eax
.Ltmp1672:
	#DEBUG_VALUE: match_bit <- $eax
	leal	(%rcx,%r13), %r9d
	addl	%eax, %r9d
.Ltmp1673:
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 434 5 is_stmt 0               # liblzma/lzma/lzma_decoder.c:434:5
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1674:
	.loc	0 434 5                         # liblzma/lzma/lzma_decoder.c:434:5
	ja	.LBB1_477
.Ltmp1675:
# %bb.475:                              # %if.then679
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 434 5                         # liblzma/lzma/lzma_decoder.c:434:5
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp1676:
	.loc	0 434 5                         # liblzma/lzma/lzma_decoder.c:434:5
	je	.LBB1_629
.Ltmp1677:
# %bb.476:                              # %if.end684
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	shll	$8, %ebx
.Ltmp1678:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	shll	$8, %r15d
.Ltmp1679:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp1680:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp1681:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%ecx, %r15d
.Ltmp1682:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
.LBB1_477:                              # %do.end696
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 434 5                         # liblzma/lzma/lzma_decoder.c:434:5
	movl	%ebx, %ecx
	shrl	$11, %ecx
	movl	%r9d, %r9d
.Ltmp1683:
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movq	%r11, %rdx
	.loc	0 434 5                         # liblzma/lzma/lzma_decoder.c:434:5
	movzwl	(%r11,%r9,2), %r11d
.Ltmp1684:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	imull	%r11d, %ecx
.Ltmp1685:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	.loc	0 434 5                         # liblzma/lzma/lzma_decoder.c:434:5
	addl	%r13d, %r13d
.Ltmp1686:
	movl	%r15d, %ebp
	subl	%ecx, %ebp
.Ltmp1687:
	.loc	0 434 5                         # liblzma/lzma/lzma_decoder.c:434:5
	jae	.LBB1_479
.Ltmp1688:
# %bb.478:                              # %do.body707
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	$2048, %r10d                    # imm = 0x800
.Ltmp1689:
	.loc	0 434 5                         # liblzma/lzma/lzma_decoder.c:434:5
	subl	%r11d, %r10d
	shrl	$5, %r10d
	addl	%r11d, %r10d
.Ltmp1690:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 434 5                         # liblzma/lzma/lzma_decoder.c:434:5
	xorl	8(%rsp), %eax                   # 4-byte Folded Reload
.Ltmp1691:
	#DEBUG_VALUE: lzma_decode:offset <- $eax
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	jmp	.LBB1_480
.Ltmp1692:
.LBB1_479:                              # %do.body724
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 434 5                         # liblzma/lzma/lzma_decoder.c:434:5
	subl	%ecx, %ebx
.Ltmp1693:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r11d, %ecx
.Ltmp1694:
	shrl	$5, %ecx
	subl	%ecx, %r11d
.Ltmp1695:
	.loc	0 434 5                         # liblzma/lzma/lzma_decoder.c:434:5
	orl	$1, %r13d
.Ltmp1696:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:offset <- $eax
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r11d, %r10d
	movl	%ebx, %ecx
	movl	%ebp, %r15d
.Ltmp1697:
.LBB1_480:                              # %do.end745
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- $eax
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: subcoder_index <- $r9d
	movq	24(%rsp), %rbp                  # 8-byte Reload
	movq	%rdx, %r11
	.loc	0 434 5                         # liblzma/lzma/lzma_decoder.c:434:5
	movw	%r10w, (%rdx,%r9,2)
.Ltmp1698:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:offset <- $eax
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 435 9 is_stmt 1               # liblzma/lzma/lzma_decoder.c:435:9
	addl	%esi, %esi
.Ltmp1699:
	#DEBUG_VALUE: lzma_decode:len <- $esi
	.loc	0 0 9 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:9
	movq	%rsi, 40(%rsp)                  # 8-byte Spill
.Ltmp1700:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
                                        # kill: def $eax killed $eax def $rax
	movq	%rax, 8(%rsp)                   # 8-byte Spill
.Ltmp1701:
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	movl	%ecx, %ebx
.Ltmp1702:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
.LBB1_481:                              # %sw.bb747
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	movq	8(%rsp), %rcx                   # 8-byte Reload
	.loc	0 436 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:436:5
	movl	%ecx, %eax
	movq	40(%rsp), %rdx                  # 8-byte Reload
	andl	%edx, %eax
.Ltmp1703:
	#DEBUG_VALUE: match_bit <- $eax
	leal	(%rcx,%r13), %r9d
	addl	%eax, %r9d
.Ltmp1704:
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 436 5 is_stmt 0               # liblzma/lzma/lzma_decoder.c:436:5
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp1705:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp1706:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp1707:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	.loc	0 436 5                         # liblzma/lzma/lzma_decoder.c:436:5
	ja	.LBB1_484
.Ltmp1708:
# %bb.482:                              # %if.then756
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 436 5                         # liblzma/lzma/lzma_decoder.c:436:5
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp1709:
	.loc	0 436 5                         # liblzma/lzma/lzma_decoder.c:436:5
	je	.LBB1_611
.Ltmp1710:
# %bb.483:                              # %if.end761
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movq	%rbp, %rsi
	.loc	0 436 5                         # liblzma/lzma/lzma_decoder.c:436:5
	shll	$8, %ebx
.Ltmp1711:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	shll	$8, %r15d
.Ltmp1712:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp1713:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp1714:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%ecx, %r15d
.Ltmp1715:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_485
.Ltmp1716:
.LBB1_484:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	movq	%rbp, %rsi
.Ltmp1717:
.LBB1_485:                              # %do.end773
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 436 5                         # liblzma/lzma/lzma_decoder.c:436:5
	movl	%ebx, %ecx
	shrl	$11, %ecx
	movl	%r9d, %r9d
.Ltmp1718:
	movzwl	(%r12,%r9,2), %r11d
	imull	%r11d, %ecx
.Ltmp1719:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movq	16(%rsp), %r13                  # 8-byte Reload
.Ltmp1720:
	.loc	0 436 5                         # liblzma/lzma/lzma_decoder.c:436:5
	addl	%r13d, %r13d
	movl	%r15d, %ebp
.Ltmp1721:
	#DEBUG_VALUE: lzma_decode:rep0 <- $esi
	subl	%ecx, %ebp
.Ltmp1722:
	.loc	0 436 5                         # liblzma/lzma/lzma_decoder.c:436:5
	jae	.LBB1_487
.Ltmp1723:
# %bb.486:                              # %do.body784
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $esi
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	$2048, %r10d                    # imm = 0x800
.Ltmp1724:
	.loc	0 436 5                         # liblzma/lzma/lzma_decoder.c:436:5
	subl	%r11d, %r10d
	shrl	$5, %r10d
	addl	%r11d, %r10d
.Ltmp1725:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 436 5                         # liblzma/lzma/lzma_decoder.c:436:5
	xorl	8(%rsp), %eax                   # 4-byte Folded Reload
.Ltmp1726:
	#DEBUG_VALUE: lzma_decode:offset <- $eax
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	jmp	.LBB1_488
.Ltmp1727:
.LBB1_487:                              # %do.body802
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $esi
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 436 5                         # liblzma/lzma/lzma_decoder.c:436:5
	subl	%ecx, %ebx
.Ltmp1728:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r11d, %ecx
.Ltmp1729:
	shrl	$5, %ecx
	subl	%ecx, %r11d
.Ltmp1730:
	.loc	0 436 5                         # liblzma/lzma/lzma_decoder.c:436:5
	orl	$1, %r13d
.Ltmp1731:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:offset <- $eax
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r11d, %r10d
	movl	%ebx, %ecx
	movl	%ebp, %r15d
.Ltmp1732:
.LBB1_488:                              # %do.end823
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $esi
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- $eax
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: subcoder_index <- $r9d
	movq	%rsi, %rbp
	movq	%r12, %r11
	.loc	0 436 5                         # liblzma/lzma/lzma_decoder.c:436:5
	movw	%r10w, (%r12,%r9,2)
.Ltmp1733:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:offset <- $eax
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movq	40(%rsp), %rdx                  # 8-byte Reload
.Ltmp1734:
	.loc	0 437 9 is_stmt 1               # liblzma/lzma/lzma_decoder.c:437:9
	addl	%edx, %edx
.Ltmp1735:
	#DEBUG_VALUE: lzma_decode:len <- $edx
	.loc	0 0 9 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:9
	movq	%rdx, 40(%rsp)                  # 8-byte Spill
.Ltmp1736:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
                                        # kill: def $eax killed $eax def $rax
	movq	%rax, 8(%rsp)                   # 8-byte Spill
.Ltmp1737:
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	movl	%ecx, %ebx
.Ltmp1738:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	4(%rsp), %r12d                  # 4-byte Reload
.Ltmp1739:
.LBB1_489:                              # %sw.bb825
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	movq	8(%rsp), %rcx                   # 8-byte Reload
	.loc	0 438 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:438:5
	movl	%ecx, %eax
	movq	40(%rsp), %rdx                  # 8-byte Reload
	andl	%edx, %eax
.Ltmp1740:
	#DEBUG_VALUE: match_bit <- $eax
	leal	(%rcx,%rax), %r9d
	addl	%r13d, %r9d
.Ltmp1741:
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 438 5 is_stmt 0               # liblzma/lzma/lzma_decoder.c:438:5
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp1742:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp1743:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp1744:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	.loc	0 438 5                         # liblzma/lzma/lzma_decoder.c:438:5
	ja	.LBB1_492
.Ltmp1745:
# %bb.490:                              # %if.then834
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 438 5                         # liblzma/lzma/lzma_decoder.c:438:5
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp1746:
	.loc	0 438 5                         # liblzma/lzma/lzma_decoder.c:438:5
	je	.LBB1_606
.Ltmp1747:
# %bb.491:                              # %if.end839
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movq	%rbp, %rsi
	.loc	0 438 5                         # liblzma/lzma/lzma_decoder.c:438:5
	shll	$8, %ebx
.Ltmp1748:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	shll	$8, %r15d
.Ltmp1749:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp1750:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp1751:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%ecx, %r15d
.Ltmp1752:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_493
.Ltmp1753:
.LBB1_492:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	movq	%rbp, %rsi
.Ltmp1754:
.LBB1_493:                              # %do.end851
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 438 5                         # liblzma/lzma/lzma_decoder.c:438:5
	movl	%ebx, %ecx
	shrl	$11, %ecx
	movl	%r9d, %r9d
.Ltmp1755:
	movzwl	(%r12,%r9,2), %r11d
	imull	%r11d, %ecx
.Ltmp1756:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movq	16(%rsp), %r13                  # 8-byte Reload
.Ltmp1757:
	.loc	0 438 5                         # liblzma/lzma/lzma_decoder.c:438:5
	addl	%r13d, %r13d
	movl	%r15d, %ebp
.Ltmp1758:
	#DEBUG_VALUE: lzma_decode:rep0 <- $esi
	subl	%ecx, %ebp
.Ltmp1759:
	.loc	0 438 5                         # liblzma/lzma/lzma_decoder.c:438:5
	jae	.LBB1_495
.Ltmp1760:
# %bb.494:                              # %do.body862
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $esi
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	$2048, %r10d                    # imm = 0x800
.Ltmp1761:
	.loc	0 438 5                         # liblzma/lzma/lzma_decoder.c:438:5
	subl	%r11d, %r10d
	shrl	$5, %r10d
	addl	%r11d, %r10d
.Ltmp1762:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 438 5                         # liblzma/lzma/lzma_decoder.c:438:5
	xorl	8(%rsp), %eax                   # 4-byte Folded Reload
.Ltmp1763:
	#DEBUG_VALUE: lzma_decode:offset <- $eax
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	jmp	.LBB1_496
.Ltmp1764:
.LBB1_495:                              # %do.body880
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $esi
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 438 5                         # liblzma/lzma/lzma_decoder.c:438:5
	subl	%ecx, %ebx
.Ltmp1765:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r11d, %ecx
.Ltmp1766:
	shrl	$5, %ecx
	subl	%ecx, %r11d
.Ltmp1767:
	.loc	0 438 5                         # liblzma/lzma/lzma_decoder.c:438:5
	orl	$1, %r13d
.Ltmp1768:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:offset <- $eax
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r11d, %r10d
	movl	%ebx, %ecx
	movl	%ebp, %r15d
.Ltmp1769:
.LBB1_496:                              # %do.end901
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $esi
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- $eax
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: subcoder_index <- $r9d
	movq	%rsi, %rbp
	movq	%r12, %r11
	.loc	0 438 5                         # liblzma/lzma/lzma_decoder.c:438:5
	movw	%r10w, (%r12,%r9,2)
.Ltmp1770:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:offset <- $eax
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movq	40(%rsp), %rdx                  # 8-byte Reload
.Ltmp1771:
	.loc	0 439 9 is_stmt 1               # liblzma/lzma/lzma_decoder.c:439:9
	addl	%edx, %edx
.Ltmp1772:
	#DEBUG_VALUE: lzma_decode:len <- $edx
	.loc	0 0 9 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:9
	movq	%rdx, 40(%rsp)                  # 8-byte Spill
.Ltmp1773:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
                                        # kill: def $eax killed $eax killed $rax def $rax
	movq	%rax, 8(%rsp)                   # 8-byte Spill
.Ltmp1774:
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	movl	%ecx, %ebx
.Ltmp1775:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	4(%rsp), %r12d                  # 4-byte Reload
.Ltmp1776:
.LBB1_497:                              # %sw.bb903
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	movq	8(%rsp), %rcx                   # 8-byte Reload
	.loc	0 440 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:440:5
	movl	%ecx, %eax
	movq	40(%rsp), %rdx                  # 8-byte Reload
	andl	%edx, %eax
.Ltmp1777:
	#DEBUG_VALUE: match_bit <- $eax
	leal	(%rcx,%r13), %r9d
	addl	%eax, %r9d
.Ltmp1778:
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 440 5 is_stmt 0               # liblzma/lzma/lzma_decoder.c:440:5
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp1779:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp1780:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp1781:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	.loc	0 440 5                         # liblzma/lzma/lzma_decoder.c:440:5
	ja	.LBB1_500
.Ltmp1782:
# %bb.498:                              # %if.then912
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 440 5                         # liblzma/lzma/lzma_decoder.c:440:5
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp1783:
	.loc	0 440 5                         # liblzma/lzma/lzma_decoder.c:440:5
	je	.LBB1_626
.Ltmp1784:
# %bb.499:                              # %if.end917
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movq	%rbp, %rsi
	.loc	0 440 5                         # liblzma/lzma/lzma_decoder.c:440:5
	shll	$8, %ebx
.Ltmp1785:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	shll	$8, %r15d
.Ltmp1786:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp1787:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp1788:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%ecx, %r15d
.Ltmp1789:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_501
.Ltmp1790:
.LBB1_500:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	movq	%rbp, %rsi
.Ltmp1791:
.LBB1_501:                              # %do.end929
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 440 5                         # liblzma/lzma/lzma_decoder.c:440:5
	movl	%ebx, %ecx
	shrl	$11, %ecx
	movl	%r9d, %r9d
.Ltmp1792:
	movzwl	(%r12,%r9,2), %r11d
	imull	%r11d, %ecx
.Ltmp1793:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movq	16(%rsp), %r13                  # 8-byte Reload
.Ltmp1794:
	.loc	0 440 5                         # liblzma/lzma/lzma_decoder.c:440:5
	addl	%r13d, %r13d
	movl	%r15d, %ebp
.Ltmp1795:
	#DEBUG_VALUE: lzma_decode:rep0 <- $esi
	subl	%ecx, %ebp
.Ltmp1796:
	.loc	0 440 5                         # liblzma/lzma/lzma_decoder.c:440:5
	jae	.LBB1_503
.Ltmp1797:
# %bb.502:                              # %do.body940
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $esi
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	$2048, %r10d                    # imm = 0x800
.Ltmp1798:
	.loc	0 440 5                         # liblzma/lzma/lzma_decoder.c:440:5
	subl	%r11d, %r10d
	shrl	$5, %r10d
	addl	%r11d, %r10d
.Ltmp1799:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 440 5                         # liblzma/lzma/lzma_decoder.c:440:5
	xorl	8(%rsp), %eax                   # 4-byte Folded Reload
.Ltmp1800:
	#DEBUG_VALUE: lzma_decode:offset <- $eax
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	jmp	.LBB1_504
.Ltmp1801:
.LBB1_503:                              # %do.body958
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $esi
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 440 5                         # liblzma/lzma/lzma_decoder.c:440:5
	subl	%ecx, %ebx
.Ltmp1802:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r11d, %ecx
.Ltmp1803:
	shrl	$5, %ecx
	subl	%ecx, %r11d
.Ltmp1804:
	.loc	0 440 5                         # liblzma/lzma/lzma_decoder.c:440:5
	orl	$1, %r13d
.Ltmp1805:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:offset <- $eax
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r11d, %r10d
	movl	%ebx, %ecx
	movl	%ebp, %r15d
.Ltmp1806:
.LBB1_504:                              # %do.end979
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $esi
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- $eax
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: subcoder_index <- $r9d
	movq	%rsi, %rbp
	movq	%r12, %r11
	.loc	0 440 5                         # liblzma/lzma/lzma_decoder.c:440:5
	movw	%r10w, (%r12,%r9,2)
.Ltmp1807:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:offset <- $eax
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movq	40(%rsp), %rdx                  # 8-byte Reload
.Ltmp1808:
	.loc	0 441 9 is_stmt 1               # liblzma/lzma/lzma_decoder.c:441:9
	addl	%edx, %edx
.Ltmp1809:
	#DEBUG_VALUE: lzma_decode:len <- $edx
	.loc	0 0 9 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:9
	movq	%rdx, 40(%rsp)                  # 8-byte Spill
.Ltmp1810:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
                                        # kill: def $eax killed $eax def $rax
	movq	%rax, 8(%rsp)                   # 8-byte Spill
.Ltmp1811:
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	movl	%ecx, %ebx
.Ltmp1812:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	4(%rsp), %r12d                  # 4-byte Reload
.Ltmp1813:
.LBB1_505:                              # %sw.bb981
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	movq	8(%rsp), %rcx                   # 8-byte Reload
	.loc	0 442 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:442:5
	movl	%ecx, %eax
	movq	40(%rsp), %rdx                  # 8-byte Reload
	andl	%edx, %eax
.Ltmp1814:
	#DEBUG_VALUE: match_bit <- $eax
	leal	(%rcx,%r13), %r9d
	addl	%eax, %r9d
.Ltmp1815:
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 442 5 is_stmt 0               # liblzma/lzma/lzma_decoder.c:442:5
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp1816:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp1817:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp1818:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	.loc	0 442 5                         # liblzma/lzma/lzma_decoder.c:442:5
	ja	.LBB1_508
.Ltmp1819:
# %bb.506:                              # %if.then990
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 442 5                         # liblzma/lzma/lzma_decoder.c:442:5
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp1820:
	.loc	0 442 5                         # liblzma/lzma/lzma_decoder.c:442:5
	je	.LBB1_609
.Ltmp1821:
# %bb.507:                              # %if.end995
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movq	%rbp, %rsi
	.loc	0 442 5                         # liblzma/lzma/lzma_decoder.c:442:5
	shll	$8, %ebx
.Ltmp1822:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	shll	$8, %r15d
.Ltmp1823:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp1824:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp1825:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%ecx, %r15d
.Ltmp1826:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_509
.Ltmp1827:
.LBB1_508:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	movq	%rbp, %rsi
.Ltmp1828:
.LBB1_509:                              # %do.end1007
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 442 5                         # liblzma/lzma/lzma_decoder.c:442:5
	movl	%ebx, %ecx
	shrl	$11, %ecx
	movl	%r9d, %r9d
.Ltmp1829:
	movzwl	(%r12,%r9,2), %r11d
	imull	%r11d, %ecx
.Ltmp1830:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movq	16(%rsp), %r13                  # 8-byte Reload
.Ltmp1831:
	.loc	0 442 5                         # liblzma/lzma/lzma_decoder.c:442:5
	addl	%r13d, %r13d
	movl	%r15d, %ebp
.Ltmp1832:
	#DEBUG_VALUE: lzma_decode:rep0 <- $esi
	subl	%ecx, %ebp
.Ltmp1833:
	.loc	0 442 5                         # liblzma/lzma/lzma_decoder.c:442:5
	jae	.LBB1_511
.Ltmp1834:
# %bb.510:                              # %do.body1018
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $esi
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	$2048, %r10d                    # imm = 0x800
.Ltmp1835:
	.loc	0 442 5                         # liblzma/lzma/lzma_decoder.c:442:5
	subl	%r11d, %r10d
	shrl	$5, %r10d
	addl	%r11d, %r10d
.Ltmp1836:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 442 5                         # liblzma/lzma/lzma_decoder.c:442:5
	xorl	8(%rsp), %eax                   # 4-byte Folded Reload
.Ltmp1837:
	#DEBUG_VALUE: lzma_decode:offset <- $eax
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	jmp	.LBB1_512
.Ltmp1838:
.LBB1_511:                              # %do.body1036
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $esi
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 442 5                         # liblzma/lzma/lzma_decoder.c:442:5
	subl	%ecx, %ebx
.Ltmp1839:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r11d, %ecx
.Ltmp1840:
	shrl	$5, %ecx
	subl	%ecx, %r11d
.Ltmp1841:
	.loc	0 442 5                         # liblzma/lzma/lzma_decoder.c:442:5
	orl	$1, %r13d
.Ltmp1842:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:offset <- $eax
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r11d, %r10d
	movl	%ebx, %ecx
	movl	%ebp, %r15d
.Ltmp1843:
.LBB1_512:                              # %do.end1057
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $esi
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- $eax
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: subcoder_index <- $r9d
	movq	%rsi, %rbp
	movq	%r12, %r11
	.loc	0 442 5                         # liblzma/lzma/lzma_decoder.c:442:5
	movw	%r10w, (%r12,%r9,2)
.Ltmp1844:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:offset <- $eax
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movq	40(%rsp), %rdx                  # 8-byte Reload
.Ltmp1845:
	.loc	0 443 9 is_stmt 1               # liblzma/lzma/lzma_decoder.c:443:9
	addl	%edx, %edx
.Ltmp1846:
	#DEBUG_VALUE: lzma_decode:len <- $edx
	.loc	0 0 9 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:9
	movq	%rdx, 40(%rsp)                  # 8-byte Spill
.Ltmp1847:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
                                        # kill: def $eax killed $eax def $rax
	movq	%rax, 8(%rsp)                   # 8-byte Spill
.Ltmp1848:
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	movl	%ecx, %ebx
.Ltmp1849:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	4(%rsp), %r12d                  # 4-byte Reload
.Ltmp1850:
.LBB1_513:                              # %sw.bb1059
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	movq	8(%rsp), %rcx                   # 8-byte Reload
	.loc	0 444 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:444:5
	movl	%ecx, %eax
	movq	40(%rsp), %rdx                  # 8-byte Reload
	andl	%edx, %eax
.Ltmp1851:
	#DEBUG_VALUE: match_bit <- $eax
	leal	(%rcx,%r13), %r9d
	addl	%eax, %r9d
.Ltmp1852:
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 444 5 is_stmt 0               # liblzma/lzma/lzma_decoder.c:444:5
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp1853:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp1854:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp1855:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	.loc	0 444 5                         # liblzma/lzma/lzma_decoder.c:444:5
	ja	.LBB1_516
.Ltmp1856:
# %bb.514:                              # %if.then1068
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 444 5                         # liblzma/lzma/lzma_decoder.c:444:5
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp1857:
	.loc	0 444 5                         # liblzma/lzma/lzma_decoder.c:444:5
	je	.LBB1_605
.Ltmp1858:
# %bb.515:                              # %if.end1073
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movq	%rbp, %rsi
	.loc	0 444 5                         # liblzma/lzma/lzma_decoder.c:444:5
	shll	$8, %ebx
.Ltmp1859:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	shll	$8, %r15d
.Ltmp1860:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp1861:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp1862:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%ecx, %r15d
.Ltmp1863:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_517
.Ltmp1864:
.LBB1_516:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	movq	%rbp, %rsi
.Ltmp1865:
.LBB1_517:                              # %do.end1085
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 444 5                         # liblzma/lzma/lzma_decoder.c:444:5
	movl	%ebx, %ecx
	shrl	$11, %ecx
	movl	%r9d, %r9d
.Ltmp1866:
	movzwl	(%r12,%r9,2), %r11d
	imull	%r11d, %ecx
.Ltmp1867:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movq	16(%rsp), %r13                  # 8-byte Reload
.Ltmp1868:
	.loc	0 444 5                         # liblzma/lzma/lzma_decoder.c:444:5
	addl	%r13d, %r13d
	movl	%r15d, %ebp
.Ltmp1869:
	#DEBUG_VALUE: lzma_decode:rep0 <- $esi
	subl	%ecx, %ebp
.Ltmp1870:
	.loc	0 444 5                         # liblzma/lzma/lzma_decoder.c:444:5
	jae	.LBB1_519
.Ltmp1871:
# %bb.518:                              # %do.body1096
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $esi
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	$2048, %r10d                    # imm = 0x800
.Ltmp1872:
	.loc	0 444 5                         # liblzma/lzma/lzma_decoder.c:444:5
	subl	%r11d, %r10d
	shrl	$5, %r10d
	addl	%r11d, %r10d
.Ltmp1873:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 444 5                         # liblzma/lzma/lzma_decoder.c:444:5
	xorl	8(%rsp), %eax                   # 4-byte Folded Reload
.Ltmp1874:
	#DEBUG_VALUE: lzma_decode:offset <- $eax
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	jmp	.LBB1_520
.Ltmp1875:
.LBB1_519:                              # %do.body1114
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $esi
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 444 5                         # liblzma/lzma/lzma_decoder.c:444:5
	subl	%ecx, %ebx
.Ltmp1876:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r11d, %ecx
.Ltmp1877:
	shrl	$5, %ecx
	subl	%ecx, %r11d
.Ltmp1878:
	.loc	0 444 5                         # liblzma/lzma/lzma_decoder.c:444:5
	orl	$1, %r13d
.Ltmp1879:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:offset <- $eax
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r11d, %r10d
	movl	%ebx, %ecx
	movl	%ebp, %r15d
.Ltmp1880:
.LBB1_520:                              # %do.end1135
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $esi
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- $eax
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: subcoder_index <- $r9d
	movq	%rsi, %rbp
	movq	%r12, %r11
	.loc	0 444 5                         # liblzma/lzma/lzma_decoder.c:444:5
	movw	%r10w, (%r12,%r9,2)
.Ltmp1881:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:offset <- $eax
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movq	40(%rsp), %rdx                  # 8-byte Reload
.Ltmp1882:
	.loc	0 445 9 is_stmt 1               # liblzma/lzma/lzma_decoder.c:445:9
	addl	%edx, %edx
.Ltmp1883:
	#DEBUG_VALUE: lzma_decode:len <- $edx
	.loc	0 0 9 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:9
	movq	%rdx, 40(%rsp)                  # 8-byte Spill
.Ltmp1884:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
                                        # kill: def $eax killed $eax def $rax
	movq	%rax, 8(%rsp)                   # 8-byte Spill
.Ltmp1885:
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	movl	%ecx, %ebx
.Ltmp1886:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	4(%rsp), %r12d                  # 4-byte Reload
.Ltmp1887:
.LBB1_521:                              # %sw.bb1137
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	movq	8(%rsp), %rcx                   # 8-byte Reload
	.loc	0 446 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:446:5
	movl	%ecx, %eax
	movq	40(%rsp), %rdx                  # 8-byte Reload
	andl	%edx, %eax
.Ltmp1888:
	#DEBUG_VALUE: match_bit <- $eax
	leal	(%rcx,%r13), %r9d
	addl	%eax, %r9d
.Ltmp1889:
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 446 5 is_stmt 0               # liblzma/lzma/lzma_decoder.c:446:5
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp1890:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp1891:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp1892:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	.loc	0 446 5                         # liblzma/lzma/lzma_decoder.c:446:5
	ja	.LBB1_524
.Ltmp1893:
# %bb.522:                              # %if.then1146
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 446 5                         # liblzma/lzma/lzma_decoder.c:446:5
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp1894:
	.loc	0 446 5                         # liblzma/lzma/lzma_decoder.c:446:5
	je	.LBB1_622
.Ltmp1895:
# %bb.523:                              # %if.end1151
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movq	%rbp, %rsi
	.loc	0 446 5                         # liblzma/lzma/lzma_decoder.c:446:5
	shll	$8, %ebx
.Ltmp1896:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	shll	$8, %r15d
.Ltmp1897:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp1898:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp1899:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%ecx, %r15d
.Ltmp1900:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_525
.Ltmp1901:
.LBB1_524:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	movq	%rbp, %rsi
.Ltmp1902:
.LBB1_525:                              # %do.end1163
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 446 5                         # liblzma/lzma/lzma_decoder.c:446:5
	movl	%ebx, %ecx
	shrl	$11, %ecx
	movl	%r9d, %r9d
.Ltmp1903:
	movzwl	(%r12,%r9,2), %r11d
	imull	%r11d, %ecx
.Ltmp1904:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movq	16(%rsp), %r13                  # 8-byte Reload
.Ltmp1905:
	.loc	0 446 5                         # liblzma/lzma/lzma_decoder.c:446:5
	addl	%r13d, %r13d
	movl	%r15d, %ebp
.Ltmp1906:
	#DEBUG_VALUE: lzma_decode:rep0 <- $esi
	subl	%ecx, %ebp
.Ltmp1907:
	.loc	0 446 5                         # liblzma/lzma/lzma_decoder.c:446:5
	jae	.LBB1_527
.Ltmp1908:
# %bb.526:                              # %do.body1174
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $esi
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	$2048, %r10d                    # imm = 0x800
.Ltmp1909:
	.loc	0 446 5                         # liblzma/lzma/lzma_decoder.c:446:5
	subl	%r11d, %r10d
	shrl	$5, %r10d
	addl	%r11d, %r10d
.Ltmp1910:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 446 5                         # liblzma/lzma/lzma_decoder.c:446:5
	xorl	8(%rsp), %eax                   # 4-byte Folded Reload
.Ltmp1911:
	#DEBUG_VALUE: lzma_decode:offset <- $eax
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	jmp	.LBB1_528
.Ltmp1912:
.LBB1_527:                              # %do.body1192
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $esi
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 446 5                         # liblzma/lzma/lzma_decoder.c:446:5
	subl	%ecx, %ebx
.Ltmp1913:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r11d, %ecx
.Ltmp1914:
	shrl	$5, %ecx
	subl	%ecx, %r11d
.Ltmp1915:
	.loc	0 446 5                         # liblzma/lzma/lzma_decoder.c:446:5
	orl	$1, %r13d
.Ltmp1916:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:offset <- $eax
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r11d, %r10d
	movl	%ebx, %ecx
	movl	%ebp, %r15d
.Ltmp1917:
.LBB1_528:                              # %do.end1213
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $esi
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- $eax
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: subcoder_index <- $r9d
	movq	%rsi, %rbp
	movq	%r12, %r11
	.loc	0 446 5                         # liblzma/lzma/lzma_decoder.c:446:5
	movw	%r10w, (%r12,%r9,2)
.Ltmp1918:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:offset <- $eax
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movq	40(%rsp), %rdx                  # 8-byte Reload
.Ltmp1919:
	.loc	0 447 9 is_stmt 1               # liblzma/lzma/lzma_decoder.c:447:9
	addl	%edx, %edx
.Ltmp1920:
	#DEBUG_VALUE: lzma_decode:len <- $edx
	.loc	0 0 9 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:9
	movq	%rdx, 40(%rsp)                  # 8-byte Spill
.Ltmp1921:
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
                                        # kill: def $eax killed $eax def $rax
	movq	%rax, 8(%rsp)                   # 8-byte Spill
.Ltmp1922:
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	movl	%ecx, %ebx
.Ltmp1923:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	4(%rsp), %r12d                  # 4-byte Reload
.Ltmp1924:
	movq	80(%rsp), %rsi                  # 8-byte Reload
.Ltmp1925:
.LBB1_529:                              # %sw.bb1215
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	movq	8(%rsp), %rax                   # 8-byte Reload
	.loc	0 448 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:448:5
	movl	%eax, %ecx
	andl	40(%rsp), %ecx                  # 4-byte Folded Reload
.Ltmp1926:
	#DEBUG_VALUE: match_bit <- $ecx
	leal	(%rax,%r13), %r9d
	addl	%ecx, %r9d
.Ltmp1927:
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 448 5 is_stmt 0               # liblzma/lzma/lzma_decoder.c:448:5
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1928:
	.loc	0 448 5                         # liblzma/lzma/lzma_decoder.c:448:5
	ja	.LBB1_532
.Ltmp1929:
# %bb.530:                              # %if.then1224
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $ecx
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 448 5                         # liblzma/lzma/lzma_decoder.c:448:5
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp1930:
	.loc	0 448 5                         # liblzma/lzma/lzma_decoder.c:448:5
	je	.LBB1_621
.Ltmp1931:
# %bb.531:                              # %if.end1229
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $ecx
	#DEBUG_VALUE: subcoder_index <- $r9d
	shll	$8, %ebx
.Ltmp1932:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	shll	$8, %r15d
.Ltmp1933:
	movzbl	(%r8,%r14), %eax
	incq	%r14
.Ltmp1934:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %eax
.Ltmp1935:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $eax
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%eax, %r15d
.Ltmp1936:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
.LBB1_532:                              # %do.end1241
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $ecx
	#DEBUG_VALUE: subcoder_index <- $r9d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 448 5                         # liblzma/lzma/lzma_decoder.c:448:5
	movl	%ebx, %eax
	shrl	$11, %eax
	movl	%r9d, %r10d
	movq	%r11, %rdx
	movzwl	(%r11,%r10,2), %r11d
.Ltmp1937:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	imull	%r11d, %eax
.Ltmp1938:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $eax
	.loc	0 448 5                         # liblzma/lzma/lzma_decoder.c:448:5
	addl	%r13d, %r13d
.Ltmp1939:
	movl	%r15d, %r9d
.Ltmp1940:
	#DEBUG_VALUE: subcoder_index <- $r10d
	subl	%eax, %r9d
.Ltmp1941:
	.loc	0 448 5                         # liblzma/lzma/lzma_decoder.c:448:5
	jae	.LBB1_534
.Ltmp1942:
# %bb.533:                              # %do.body1252
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $eax
	#DEBUG_VALUE: match_bit <- $ecx
	#DEBUG_VALUE: subcoder_index <- $r10d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	$2048, %r9d                     # imm = 0x800
.Ltmp1943:
	.loc	0 448 5                         # liblzma/lzma/lzma_decoder.c:448:5
	subl	%r11d, %r9d
	shrl	$5, %r9d
	addl	%r11d, %r9d
	movw	%r9w, (%rdx,%r10,2)
.Ltmp1944:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 448 5                         # liblzma/lzma/lzma_decoder.c:448:5
	xorl	8(%rsp), %ecx                   # 4-byte Folded Reload
.Ltmp1945:
	#DEBUG_VALUE: lzma_decode:offset <- $ecx
                                        # kill: def $ecx killed $ecx def $rcx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movq	%rcx, 8(%rsp)                   # 8-byte Spill
.Ltmp1946:
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	jmp	.LBB1_535
.Ltmp1947:
.LBB1_534:                              # %do.body1270
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $eax
	#DEBUG_VALUE: match_bit <- $ecx
	#DEBUG_VALUE: subcoder_index <- $r10d
	.loc	0 448 5                         # liblzma/lzma/lzma_decoder.c:448:5
	subl	%eax, %ebx
.Ltmp1948:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r11d, %eax
.Ltmp1949:
	shrl	$5, %eax
	subl	%eax, %r11d
	movw	%r11w, (%rdx,%r10,2)
.Ltmp1950:
	.loc	0 448 5                         # liblzma/lzma/lzma_decoder.c:448:5
	orl	$1, %r13d
.Ltmp1951:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:offset <- $ecx
	.loc	0 0 5                           # liblzma/lzma/lzma_decoder.c:0:5
	movl	%ecx, %eax
	movq	%rax, 8(%rsp)                   # 8-byte Spill
	movl	%ebx, %eax
.Ltmp1952:
	#DEBUG_VALUE: lzma_decode:rc_bound <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	movl	%r9d, %r15d
.Ltmp1953:
.LBB1_535:                              # %if.end1292
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- $ecx
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: subcoder_index <- $r10d
	movq	%rdx, %r11
.Ltmp1954:
.LBB1_536:                              # %if.end1292
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 471 12 is_stmt 1              # liblzma/lzma/lzma_decoder.c:471:12
	movl	%r12d, %ecx
	movl	lzma_decode.next_state(,%rcx,4), %r12d
.Ltmp1955:
	#DEBUG_VALUE: lzma_decode:state <- $ecx
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	.loc	0 0 12 is_stmt 0                # liblzma/lzma/lzma_decoder.c:0:12
	movl	%eax, %ebx
.Ltmp1956:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
.LBB1_537:                              # %sw.bb1295
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: dict_put:dict <- undef
	#DEBUG_VALUE: dict_put:byte <- [DW_OP_LLVM_convert 32 7, DW_OP_LLVM_convert 8 7, DW_OP_stack_value] $r13d
	movq	56(%rsp), %rcx                  # 8-byte Reload
	movq	112(%rsp), %rax                 # 8-byte Reload
.Ltmp1957:
	.loc	12 189 6 is_stmt 1              # liblzma/lz/lz_decoder.h:189:6
	cmpq	%rax, %rcx
.Ltmp1958:
	.loc	12 189 6 is_stmt 0              # liblzma/lz/lz_decoder.h:189:6
	je	.LBB1_577
.Ltmp1959:
# %bb.538:                              # %if.end.i7847
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: dict_put:byte <- [DW_OP_LLVM_convert 32 7, DW_OP_LLVM_convert 8 7, DW_OP_stack_value] $r13d
	.loc	12 0 6                          # liblzma/lz/lz_decoder.h:0:6
	movq	96(%rsp), %rax                  # 8-byte Reload
	.loc	12 192 25 is_stmt 1             # liblzma/lz/lz_decoder.h:192:25
	movb	%r13b, (%rax,%rcx)
.Ltmp1960:
	#DEBUG_VALUE: dict_put:byte <- $r13b
	.loc	12 192 21 is_stmt 0             # liblzma/lz/lz_decoder.h:192:21
	incq	%rcx
.Ltmp1961:
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 64 64] $rcx
	.loc	12 0 21                         # liblzma/lz/lz_decoder.h:0:21
	movq	72(%rsp), %rax                  # 8-byte Reload
	.loc	12 194 6 is_stmt 1              # liblzma/lz/lz_decoder.h:194:6
	cmpq	%rax, %rcx
	cmovaq	%rcx, %rax
	movq	%rax, 72(%rsp)                  # 8-byte Spill
.Ltmp1962:
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 128 64] undef
	.loc	12 0 6 is_stmt 0                # liblzma/lz/lz_decoder.h:0:6
	movl	108(%rsp), %eax                 # 4-byte Reload
	.loc	12 194 6                        # liblzma/lz/lz_decoder.h:194:6
	jmp	.LBB1_15
.Ltmp1963:
.LBB1_539:                              # %if.else59.i
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- [DW_OP_plus_uconst 136, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: dict_repeat:distance <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: dict_repeat:left <- $ebp
	#DEBUG_VALUE: copy_size <- $eax
	.loc	12 171 6 is_stmt 1              # liblzma/lz/lz_decoder.h:171:6
	movl	%ebp, %ebp
.Ltmp1964:
	.loc	12 170 4                        # liblzma/lz/lz_decoder.h:170:4
	movq	%rbp, %rdx
	callq	memmove@PLT
.Ltmp1965:
.LBB1_540:                              # %if.end71.sink.split.i
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 64 64] $r12
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- [DW_OP_plus_uconst 136, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: dict_repeat:distance <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 64 64] $r12
	.loc	12 0 0 is_stmt 0                # liblzma/lz/lz_decoder.h:0:0
	addq	%rbp, %r12
.Ltmp1966:
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 64 64] $r12
	movq	144(%rsp), %rdi                 # 8-byte Reload
	movq	136(%rsp), %rdx                 # 8-byte Reload
.Ltmp1967:
.LBB1_541:                              # %if.end71.i
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 64 64] $r12
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: dict_repeat:distance <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 64 64] $r12
	movq	72(%rsp), %rax                  # 8-byte Reload
	.loc	12 177 6 is_stmt 1              # liblzma/lz/lz_decoder.h:177:6
	cmpq	%r12, %rax
	cmovbeq	%r12, %rax
.Ltmp1968:
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 128 64] $rax
	.loc	12 0 6 is_stmt 0                # liblzma/lz/lz_decoder.h:0:6
	movq	%rax, 72(%rsp)                  # 8-byte Spill
.Ltmp1969:
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	movq	40(%rsp), %rax                  # 8-byte Reload
	.loc	12 180 9 is_stmt 1              # liblzma/lz/lz_decoder.h:180:9
	testl	%eax, %eax
	movq	%r12, %rcx
.Ltmp1970:
	.loc	0 779 7                         # liblzma/lzma/lzma_decoder.c:779:7
	jne	.LBB1_575
.Ltmp1971:
# %bb.542:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 64 64] $r12
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 7 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:7
	movq	$0, 40(%rsp)                    # 8-byte Folded Spill
.Ltmp1972:
	#DEBUG_VALUE: lzma_decode:len <- $eax
	movl	4(%rsp), %r12d                  # 4-byte Reload
.Ltmp1973:
	movq	24(%rsp), %rbp                  # 8-byte Reload
	movq	16(%rsp), %r13                  # 8-byte Reload
	movq	80(%rsp), %rsi                  # 8-byte Reload
	movq	120(%rsp), %r8                  # 8-byte Reload
	movl	108(%rsp), %eax                 # 4-byte Reload
.Ltmp1974:
	movq	%rdx, %r11
	.loc	0 779 7                         # liblzma/lzma/lzma_decoder.c:779:7
	jmp	.LBB1_15
.Ltmp1975:
.LBB1_543:                              # %do.body3206
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $eax
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	.loc	0 568 7 is_stmt 1               # liblzma/lzma/lzma_decoder.c:568:7
	subl	%ecx, %ebx
.Ltmp1976:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r9d, %ecx
.Ltmp1977:
	shrl	$5, %ecx
	subl	%ecx, %r9d
.Ltmp1978:
	.loc	0 568 7 is_stmt 0               # liblzma/lzma/lzma_decoder.c:568:7
	orl	$1, %r13d
.Ltmp1979:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	incl	%ebp
.Ltmp1980:
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 0 7                           # liblzma/lzma/lzma_decoder.c:0:7
	movl	%r9d, %r10d
	movl	%ebx, %ecx
	movl	%r11d, %r15d
.Ltmp1981:
.LBB1_544:                              # %do.end3227
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movq	%rdx, %r11
	.loc	0 568 7                         # liblzma/lzma/lzma_decoder.c:568:7
	movw	%r10w, (%rdx,%rax,2)
.Ltmp1982:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 0 7                           # liblzma/lzma/lzma_decoder.c:0:7
	movq	8(%rsp), %rax                   # 8-byte Reload
.Ltmp1983:
	.loc	0 571 7 is_stmt 1               # liblzma/lzma/lzma_decoder.c:571:7
	incl	%eax
.Ltmp1984:
	#DEBUG_VALUE: lzma_decode:offset <- $eax
	#DEBUG_VALUE: lzma_decode:limit <- 4
	.loc	0 0 7 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:7
	movq	%rax, 8(%rsp)                   # 8-byte Spill
.Ltmp1985:
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	movl	%ecx, %ebx
.Ltmp1986:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
.LBB1_545:                              # %do.body3231
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- 4
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 574 7 is_stmt 1               # liblzma/lzma/lzma_decoder.c:574:7
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp1987:
	.loc	0 574 7 is_stmt 0               # liblzma/lzma/lzma_decoder.c:574:7
	ja	.LBB1_548
.Ltmp1988:
# %bb.546:                              # %if.then3235
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- 4
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 574 7                         # liblzma/lzma/lzma_decoder.c:574:7
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp1989:
	.loc	0 574 7                         # liblzma/lzma/lzma_decoder.c:574:7
	je	.LBB1_659
.Ltmp1990:
# %bb.547:                              # %if.end3240
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- 4
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	shll	$8, %ebx
.Ltmp1991:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	shll	$8, %r15d
.Ltmp1992:
	movzbl	(%r8,%r14), %eax
	incq	%r14
.Ltmp1993:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %eax
.Ltmp1994:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $eax
	.loc	0 0 7                           # liblzma/lzma/lzma_decoder.c:0:7
	movl	%eax, %r15d
.Ltmp1995:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
.LBB1_548:                              # %do.end3252
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- 4
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 574 7                         # liblzma/lzma/lzma_decoder.c:574:7
	movl	%ebx, %ecx
	shrl	$11, %ecx
	movl	%r13d, %eax
	movzwl	(%r11,%rax,2), %r9d
	imull	%r9d, %ecx
.Ltmp1996:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	.loc	0 574 7                         # liblzma/lzma/lzma_decoder.c:574:7
	addl	%r13d, %r13d
.Ltmp1997:
	#DEBUG_VALUE: lzma_decode:symbol <- $eax
	movl	%r15d, %r10d
	subl	%ecx, %r10d
.Ltmp1998:
	.loc	0 574 7                         # liblzma/lzma/lzma_decoder.c:574:7
	jae	.LBB1_550
.Ltmp1999:
# %bb.549:                              # %do.body3263
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $eax
	#DEBUG_VALUE: lzma_decode:limit <- 4
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	.loc	0 0 7                           # liblzma/lzma/lzma_decoder.c:0:7
	movq	%r11, %rdx
	movl	$2048, %r11d                    # imm = 0x800
.Ltmp2000:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	.loc	0 574 7                         # liblzma/lzma/lzma_decoder.c:574:7
	subl	%r9d, %r11d
	shrl	$5, %r11d
	addl	%r9d, %r11d
.Ltmp2001:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 7                           # liblzma/lzma/lzma_decoder.c:0:7
	movq	8(%rsp), %r12                   # 8-byte Reload
.Ltmp2002:
	.loc	0 574 7                         # liblzma/lzma/lzma_decoder.c:574:7
	jmp	.LBB1_551
.Ltmp2003:
.LBB1_550:                              # %do.body3279
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $eax
	#DEBUG_VALUE: lzma_decode:limit <- 4
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ecx
	.loc	0 574 7                         # liblzma/lzma/lzma_decoder.c:574:7
	subl	%ecx, %ebx
.Ltmp2004:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r9d, %ecx
.Ltmp2005:
	shrl	$5, %ecx
	subl	%ecx, %r9d
.Ltmp2006:
	.loc	0 574 7                         # liblzma/lzma/lzma_decoder.c:574:7
	orl	$1, %r13d
.Ltmp2007:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 7                           # liblzma/lzma/lzma_decoder.c:0:7
	movq	%rbp, %rsi
	movl	$1, %ebp
.Ltmp2008:
	#DEBUG_VALUE: lzma_decode:rep0 <- $esi
	movq	8(%rsp), %r12                   # 8-byte Reload
	.loc	0 574 7                         # liblzma/lzma/lzma_decoder.c:574:7
	movl	%r12d, %ecx
	shll	%cl, %ebp
	addl	%esi, %ebp
.Ltmp2009:
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 0 7                           # liblzma/lzma/lzma_decoder.c:0:7
	movq	80(%rsp), %rsi                  # 8-byte Reload
	movq	%r11, %rdx
	movl	%r9d, %r11d
.Ltmp2010:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
                                        # kill: def $ebp killed $ebp def $rbp
	movl	%ebx, %ecx
.Ltmp2011:
	#DEBUG_VALUE: lzma_decode:rc_bound <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	movl	%r10d, %r15d
.Ltmp2012:
.LBB1_551:                              # %do.end3301
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- 4
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 574 7                         # liblzma/lzma/lzma_decoder.c:574:7
	movw	%r11w, (%rdx,%rax,2)
.Ltmp2013:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ecx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 577 7 is_stmt 1               # liblzma/lzma/lzma_decoder.c:577:7
	incl	%r12d
.Ltmp2014:
	#DEBUG_VALUE: lzma_decode:offset <- $r12d
	#DEBUG_VALUE: lzma_decode:limit <- 3
	.loc	0 0 7 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:7
	movq	%r12, 8(%rsp)                   # 8-byte Spill
.Ltmp2015:
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	movl	%ecx, %ebx
.Ltmp2016:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movq	%rdx, %r11
.Ltmp2017:
.LBB1_552:                              # %do.body3306
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- 3
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 580 7 is_stmt 1               # liblzma/lzma/lzma_decoder.c:580:7
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp2018:
	.loc	0 580 7 is_stmt 0               # liblzma/lzma/lzma_decoder.c:580:7
	ja	.LBB1_555
.Ltmp2019:
# %bb.553:                              # %if.then3310
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- 3
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 580 7                         # liblzma/lzma/lzma_decoder.c:580:7
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp2020:
	.loc	0 580 7                         # liblzma/lzma/lzma_decoder.c:580:7
	je	.LBB1_658
.Ltmp2021:
# %bb.554:                              # %if.end3315
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- 3
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	shll	$8, %ebx
.Ltmp2022:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	shll	$8, %r15d
.Ltmp2023:
	movzbl	(%r8,%r14), %eax
	incq	%r14
.Ltmp2024:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %eax
.Ltmp2025:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $eax
	.loc	0 0 7                           # liblzma/lzma/lzma_decoder.c:0:7
	movl	%eax, %r15d
.Ltmp2026:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
.LBB1_555:                              # %do.end3327
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- 3
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 580 7                         # liblzma/lzma/lzma_decoder.c:580:7
	movl	%ebx, %r12d
	shrl	$11, %r12d
	movl	%r13d, %eax
	movzwl	(%r11,%rax,2), %r9d
	imull	%r9d, %r12d
.Ltmp2027:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $r12d
	.loc	0 580 7                         # liblzma/lzma/lzma_decoder.c:580:7
	addl	%r13d, %r13d
.Ltmp2028:
	#DEBUG_VALUE: lzma_decode:symbol <- $eax
	movl	%r15d, %r10d
	subl	%r12d, %r10d
.Ltmp2029:
	.loc	0 580 7                         # liblzma/lzma/lzma_decoder.c:580:7
	jae	.LBB1_557
.Ltmp2030:
# %bb.556:                              # %do.body3338
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $eax
	#DEBUG_VALUE: lzma_decode:limit <- 3
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $r12d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $r12d
	.loc	0 0 7                           # liblzma/lzma/lzma_decoder.c:0:7
	movq	%r11, %rdx
	movl	$2048, %r11d                    # imm = 0x800
.Ltmp2031:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	.loc	0 580 7                         # liblzma/lzma/lzma_decoder.c:580:7
	subl	%r9d, %r11d
	shrl	$5, %r11d
	addl	%r9d, %r11d
.Ltmp2032:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 7                           # liblzma/lzma/lzma_decoder.c:0:7
	movq	8(%rsp), %rcx                   # 8-byte Reload
.Ltmp2033:
	.loc	0 580 7                         # liblzma/lzma/lzma_decoder.c:580:7
	jmp	.LBB1_558
.Ltmp2034:
.LBB1_557:                              # %do.body3354
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $eax
	#DEBUG_VALUE: lzma_decode:limit <- 3
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $r12d
	.loc	0 580 7                         # liblzma/lzma/lzma_decoder.c:580:7
	subl	%r12d, %ebx
.Ltmp2035:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r9d, %ecx
	shrl	$5, %ecx
	subl	%ecx, %r9d
.Ltmp2036:
	.loc	0 580 7                         # liblzma/lzma/lzma_decoder.c:580:7
	orl	$1, %r13d
.Ltmp2037:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 7                           # liblzma/lzma/lzma_decoder.c:0:7
	movq	%rbp, %rsi
	movl	$1, %ebp
.Ltmp2038:
	#DEBUG_VALUE: lzma_decode:rep0 <- $esi
	movq	8(%rsp), %rcx                   # 8-byte Reload
	.loc	0 580 7                         # liblzma/lzma/lzma_decoder.c:580:7
	shll	%cl, %ebp
	addl	%esi, %ebp
.Ltmp2039:
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 0 7                           # liblzma/lzma/lzma_decoder.c:0:7
	movq	80(%rsp), %rsi                  # 8-byte Reload
	movq	%r11, %rdx
	movl	%r9d, %r11d
.Ltmp2040:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
                                        # kill: def $ebp killed $ebp def $rbp
	movl	%ebx, %r12d
.Ltmp2041:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $r12d
	movl	%r10d, %r15d
.Ltmp2042:
.LBB1_558:                              # %do.end3376
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $r12d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- 3
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 580 7                         # liblzma/lzma/lzma_decoder.c:580:7
	movw	%r11w, (%rdx,%rax,2)
.Ltmp2043:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $r12d
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 583 7 is_stmt 1               # liblzma/lzma/lzma_decoder.c:583:7
	incl	%ecx
.Ltmp2044:
	#DEBUG_VALUE: lzma_decode:offset <- $ecx
	#DEBUG_VALUE: lzma_decode:limit <- 2
	.loc	0 0 7 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:7
	movq	%rcx, 8(%rsp)                   # 8-byte Spill
.Ltmp2045:
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	movl	%r12d, %ebx
.Ltmp2046:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movq	%rdx, %r11
.Ltmp2047:
.LBB1_559:                              # %do.body3381
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- 2
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 586 7 is_stmt 1               # liblzma/lzma/lzma_decoder.c:586:7
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp2048:
	.loc	0 586 7 is_stmt 0               # liblzma/lzma/lzma_decoder.c:586:7
	ja	.LBB1_562
.Ltmp2049:
# %bb.560:                              # %if.then3385
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- 2
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 586 7                         # liblzma/lzma/lzma_decoder.c:586:7
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp2050:
	.loc	0 586 7                         # liblzma/lzma/lzma_decoder.c:586:7
	je	.LBB1_656
.Ltmp2051:
# %bb.561:                              # %if.end3390
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- 2
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	shll	$8, %ebx
.Ltmp2052:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	shll	$8, %r15d
.Ltmp2053:
	movzbl	(%r8,%r14), %eax
	incq	%r14
.Ltmp2054:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %eax
.Ltmp2055:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $eax
	.loc	0 0 7                           # liblzma/lzma/lzma_decoder.c:0:7
	movl	%eax, %r15d
.Ltmp2056:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
.LBB1_562:                              # %do.end3402
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- 2
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 586 7                         # liblzma/lzma/lzma_decoder.c:586:7
	movl	%ebx, %r12d
	shrl	$11, %r12d
	movl	%r13d, %eax
	movzwl	(%r11,%rax,2), %r9d
	imull	%r9d, %r12d
.Ltmp2057:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $r12d
	.loc	0 586 7                         # liblzma/lzma/lzma_decoder.c:586:7
	addl	%r13d, %r13d
.Ltmp2058:
	#DEBUG_VALUE: lzma_decode:symbol <- $eax
	movl	%r15d, %r10d
	subl	%r12d, %r10d
.Ltmp2059:
	.loc	0 586 7                         # liblzma/lzma/lzma_decoder.c:586:7
	jae	.LBB1_564
.Ltmp2060:
# %bb.563:                              # %do.body3413
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $eax
	#DEBUG_VALUE: lzma_decode:limit <- 2
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $r12d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $r12d
	.loc	0 0 7                           # liblzma/lzma/lzma_decoder.c:0:7
	movq	%r11, %rdx
	movl	$2048, %r11d                    # imm = 0x800
.Ltmp2061:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	.loc	0 586 7                         # liblzma/lzma/lzma_decoder.c:586:7
	subl	%r9d, %r11d
	shrl	$5, %r11d
	addl	%r9d, %r11d
.Ltmp2062:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 7                           # liblzma/lzma/lzma_decoder.c:0:7
	movq	8(%rsp), %rcx                   # 8-byte Reload
.Ltmp2063:
	.loc	0 586 7                         # liblzma/lzma/lzma_decoder.c:586:7
	jmp	.LBB1_565
.Ltmp2064:
.LBB1_564:                              # %do.body3429
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $eax
	#DEBUG_VALUE: lzma_decode:limit <- 2
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $r12d
	.loc	0 586 7                         # liblzma/lzma/lzma_decoder.c:586:7
	subl	%r12d, %ebx
.Ltmp2065:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	movl	%r9d, %ecx
	shrl	$5, %ecx
	subl	%ecx, %r9d
.Ltmp2066:
	.loc	0 586 7                         # liblzma/lzma/lzma_decoder.c:586:7
	orl	$1, %r13d
.Ltmp2067:
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	.loc	0 0 7                           # liblzma/lzma/lzma_decoder.c:0:7
	movq	%rbp, %rsi
	movl	$1, %ebp
.Ltmp2068:
	#DEBUG_VALUE: lzma_decode:rep0 <- $esi
	movq	8(%rsp), %rcx                   # 8-byte Reload
	.loc	0 586 7                         # liblzma/lzma/lzma_decoder.c:586:7
	shll	%cl, %ebp
	addl	%esi, %ebp
.Ltmp2069:
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 0 7                           # liblzma/lzma/lzma_decoder.c:0:7
	movq	80(%rsp), %rsi                  # 8-byte Reload
	movq	%r11, %rdx
	movl	%r9d, %r11d
.Ltmp2070:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
                                        # kill: def $ebp killed $ebp def $rbp
	movl	%ebx, %r12d
.Ltmp2071:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $r12d
	movl	%r10d, %r15d
.Ltmp2072:
.LBB1_565:                              # %do.end3451
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $r12d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- 2
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 586 7                         # liblzma/lzma/lzma_decoder.c:586:7
	movw	%r11w, (%rdx,%rax,2)
.Ltmp2073:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $r12d
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 589 7 is_stmt 1               # liblzma/lzma/lzma_decoder.c:589:7
	incl	%ecx
.Ltmp2074:
	#DEBUG_VALUE: lzma_decode:offset <- $ecx
	#DEBUG_VALUE: lzma_decode:limit <- 1
	.loc	0 0 7 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:7
	movq	%rcx, 8(%rsp)                   # 8-byte Spill
.Ltmp2075:
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	movl	%r12d, %ebx
.Ltmp2076:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movq	%rdx, %r11
	movl	4(%rsp), %r12d                  # 4-byte Reload
.Ltmp2077:
.LBB1_566:                              # %do.body3456
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- 1
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	.loc	0 598 7 is_stmt 1               # liblzma/lzma/lzma_decoder.c:598:7
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
.Ltmp2078:
	.loc	0 598 7 is_stmt 0               # liblzma/lzma/lzma_decoder.c:598:7
	ja	.LBB1_569
.Ltmp2079:
# %bb.567:                              # %if.then3460
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- 1
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 598 7                         # liblzma/lzma/lzma_decoder.c:598:7
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
.Ltmp2080:
	.loc	0 598 7                         # liblzma/lzma/lzma_decoder.c:598:7
	je	.LBB1_655
.Ltmp2081:
# %bb.568:                              # %if.end3465
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- 1
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
	shll	$8, %eax
.Ltmp2082:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	shll	$8, %r15d
.Ltmp2083:
	movzbl	(%r8,%r14), %ecx
	incq	%r14
.Ltmp2084:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %ecx
.Ltmp2085:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $ecx
	.loc	0 0 7                           # liblzma/lzma/lzma_decoder.c:0:7
	movl	%ecx, %r15d
.Ltmp2086:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_570
.Ltmp2087:
.LBB1_569:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- 1
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%ebx, %eax
.Ltmp2088:
.LBB1_570:                              # %do.end3477
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- 1
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	.loc	0 598 7                         # liblzma/lzma/lzma_decoder.c:598:7
	movl	%eax, %ebx
	shrl	$11, %ebx
	movl	%r13d, %ecx
	movzwl	(%r11,%rcx,2), %r10d
	imull	%r10d, %ebx
.Ltmp2089:
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 598 7                         # liblzma/lzma/lzma_decoder.c:598:7
	movl	%r15d, %r9d
	subl	%ebx, %r9d
.Ltmp2090:
	.loc	0 598 7                         # liblzma/lzma/lzma_decoder.c:598:7
	jae	.LBB1_572
.Ltmp2091:
# %bb.571:                              # %do.body3488
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- 1
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	.loc	0 0 7                           # liblzma/lzma/lzma_decoder.c:0:7
	movl	$2048, %eax                     # imm = 0x800
.Ltmp2092:
	.loc	0 598 7                         # liblzma/lzma/lzma_decoder.c:598:7
	subl	%r10d, %eax
	shrl	$5, %eax
	addl	%r10d, %eax
	movw	%ax, (%r11,%rcx,2)
	jmp	.LBB1_573
.Ltmp2093:
.LBB1_572:                              # %do.body3503
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- 1
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:rc_bound <- $ebx
	.loc	0 598 7                         # liblzma/lzma/lzma_decoder.c:598:7
	subl	%ebx, %eax
.Ltmp2094:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $eax
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] undef
	.loc	0 0 7                           # liblzma/lzma/lzma_decoder.c:0:7
	movq	%r11, %rdx
	.loc	0 598 7                         # liblzma/lzma/lzma_decoder.c:598:7
	movl	%r10d, %r11d
.Ltmp2095:
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	shrl	$5, %r11d
	subl	%r11d, %r10d
	movq	%rdx, %r11
	movw	%r10w, (%rdx,%rcx,2)
.Ltmp2096:
	.loc	0 598 7                         # liblzma/lzma/lzma_decoder.c:598:7
	movl	$1, %r10d
	movq	8(%rsp), %rcx                   # 8-byte Reload
                                        # kill: def $cl killed $cl killed $rcx
	shll	%cl, %r10d
	addl	%ebp, %r10d
.Ltmp2097:
	#DEBUG_VALUE: lzma_decode:rep0 <- $r10d
	.loc	0 0 7                           # liblzma/lzma/lzma_decoder.c:0:7
	movl	%r10d, %ebp
.Ltmp2098:
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	movl	%eax, %ebx
.Ltmp2099:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%r9d, %r15d
.Ltmp2100:
.LBB1_573:                              # %if.end3911
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- 1
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	$1, %ecx
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
.Ltmp2101:
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- $ecx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	movq	%rcx, 64(%rsp)                  # 8-byte Spill
.Ltmp2102:
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	.loc	0 670 8 is_stmt 1               # liblzma/lzma/lzma_decoder.c:670:8
	movl	%ebp, %eax
.Ltmp2103:
	#DEBUG_VALUE: dict_is_distance_valid:distance <- $ebp
	#DEBUG_VALUE: dict_is_distance_valid:dict <- undef
	.loc	12 122 20                       # liblzma/lz/lz_decoder.h:122:20
	cmpq	%rax, 72(%rsp)                  # 8-byte Folded Reload
.Ltmp2104:
	.loc	0 670 8                         # liblzma/lzma/lzma_decoder.c:670:8
	ja	.LBB1_448
.Ltmp2105:
.LBB1_574:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $eax
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- $ecx
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: dict_is_distance_valid:distance <- $eax
	.loc	0 0 8 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:8
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2106:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2107:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2108:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
	jmp	.LBB1_582
.Ltmp2109:
.LBB1_575:                              # %if.then5575
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 64 64] $r12
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movq	%rdx, %r12
.Ltmp2110:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 64 64] $rcx
	movq	%rcx, 56(%rsp)                  # 8-byte Spill
.Ltmp2111:
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	.loc	0 780 20 is_stmt 1              # liblzma/lzma/lzma_decoder.c:780:20
	movl	$70, 28320(%rdi)
	xorl	%ecx, %ecx
	movb	$1, %dl
	movq	%r14, 32(%rsp)                  # 8-byte Spill
.Ltmp2112:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- [DW_OP_plus_uconst 32, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:in_size <- undef
	.loc	0 0 20 is_stmt 0                # liblzma/lzma/lzma_decoder.c:0:20
	jmp	.LBB1_455
.Ltmp2113:
.LBB1_576:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2114:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2115:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2116:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	112(%rsp), %rsi                 # 8-byte Reload
.Ltmp2117:
	.loc	0 353 7 is_stmt 1               # liblzma/lzma/lzma_decoder.c:353:7
	jmp	.LBB1_9
.Ltmp2118:
.LBB1_577:                              # %if.then1298
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	.loc	0 0 7 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:7
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2119:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2120:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2121:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2122:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 475 21 is_stmt 1              # liblzma/lzma/lzma_decoder.c:475:21
	movl	$18, 28320(%rdi)
	xorl	%ecx, %ecx
	movb	$1, %dl
	jmp	.LBB1_579
.Ltmp2123:
.LBB1_578:                              # %if.then4048
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	.loc	0 0 21 is_stmt 0                # liblzma/lzma/lzma_decoder.c:0:21
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2124:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2125:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2126:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2127:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 708 23 is_stmt 1              # liblzma/lzma/lzma_decoder.c:708:23
	movl	$50, 28320(%rdi)
	xorl	%ecx, %ecx
	movb	$1, %dl
	movq	112(%rsp), %rax                 # 8-byte Reload
.Ltmp2128:
.LBB1_579:                              # %out
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 23 is_stmt 0                # liblzma/lzma/lzma_decoder.c:0:23
	movq	%rax, 56(%rsp)                  # 8-byte Spill
.Ltmp2129:
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 64 64] undef
	movq	%r14, 32(%rsp)                  # 8-byte Spill
.Ltmp2130:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- [DW_OP_plus_uconst 32, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:in_size <- undef
	jmp	.LBB1_455
.Ltmp2131:
.LBB1_580:                              # %if.then3880
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	$-1, %ebp
.Ltmp2132:
	.loc	0 654 7 is_stmt 1               # liblzma/lzma/lzma_decoder.c:654:7
	cmpq	$-1, 28312(%rdi)
.Ltmp2133:
	.loc	0 653 11                        # liblzma/lzma/lzma_decoder.c:653:11
	je	.LBB1_583
.Ltmp2134:
# %bb.581:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rdx
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 11 is_stmt 0                # liblzma/lzma/lzma_decoder.c:0:11
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2135:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2136:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
	movl	$-1, %eax
	movq	%rax, 24(%rsp)                  # 8-byte Spill
.Ltmp2137:
.LBB1_582:                              # %out
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- $ecx
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	$9, %eax
	xorl	%edx, %edx
	movq	%r14, 32(%rsp)                  # 8-byte Spill
.Ltmp2138:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- [DW_OP_plus_uconst 32, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:in_size <- undef
	xorl	%ecx, %ecx
.Ltmp2139:
	jmp	.LBB1_456
.Ltmp2140:
.LBB1_583:                              # %do.body3887
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2141:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2142:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movl	$1, %eax
	movb	$1, %cl
.Ltmp2143:
	.loc	0 662 7 is_stmt 1               # liblzma/lzma/lzma_decoder.c:662:7
	cmpl	$16777215, %ebx                 # imm = 0xFFFFFF
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2144:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 0 7 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:7
	movq	%r11, %r12
.Ltmp2145:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	.loc	0 662 7                         # liblzma/lzma/lzma_decoder.c:662:7
	ja	.LBB1_589
.Ltmp2146:
# %bb.584:                              # %if.then3891
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 662 7                         # liblzma/lzma/lzma_decoder.c:662:7
	cmpq	32(%rsp), %r14                  # 8-byte Folded Reload
	movq	8(%rsp), %r11                   # 8-byte Reload
.Ltmp2147:
	.loc	0 662 7                         # liblzma/lzma/lzma_decoder.c:662:7
	jne	.LBB1_657
.Ltmp2148:
# %bb.585:                              # %if.then3894
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 662 7                         # liblzma/lzma/lzma_decoder.c:662:7
	movl	$48, 28320(%rdi)
.Ltmp2149:
.LBB1_586:                              # %out
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- $r11d
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 7                           # liblzma/lzma/lzma_decoder.c:0:7
	xorl	%ecx, %ecx
	movb	$1, %dl
.Ltmp2150:
.LBB1_587:                              # %out
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_LLVM_entry_value 1] $r8
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- $r11d
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	xorl	%eax, %eax
.Ltmp2151:
.LBB1_588:                              # %out
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_LLVM_entry_value 1] $r8
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- $r11d
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	(%rsp), %ebp                    # 4-byte Reload
.Ltmp2152:
	jmp	.LBB1_458
.Ltmp2153:
.LBB1_589:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	xorl	%edx, %edx
	movq	%r14, 32(%rsp)                  # 8-byte Spill
.Ltmp2154:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- [DW_OP_plus_uconst 32, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:in_size <- undef
	jmp	.LBB1_456
.Ltmp2155:
.LBB1_590:                              # %if.then4814
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2156:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2157:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2158:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2159:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 764 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:764:4
	movl	$61, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2160:
.LBB1_591:                              # %if.then5330
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2161:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2162:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2163:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2164:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	$67, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2165:
.LBB1_592:                              # %if.then4384
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2166:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2167:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2168:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2169:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	$56, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2170:
.LBB1_593:                              # %if.then3995
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2171:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2172:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2173:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2174:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 698 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:698:5
	movl	$51, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2175:
.LBB1_594:                              # %if.then2463
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 5 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2176:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2177:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2178:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2179:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 501 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:501:4
	movl	$33, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2180:
.LBB1_595:                              # %if.then5168
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2181:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2182:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2183:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2184:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 764 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:764:4
	movl	$65, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2185:
.LBB1_596:                              # %if.then3813
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2186:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2187:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2188:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2189:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 644 6 is_stmt 1               # liblzma/lzma/lzma_decoder.c:644:6
	movl	$47, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2190:
.LBB1_597:                              # %if.then4584
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 6 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:6
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2191:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2192:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2193:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2194:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 764 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:764:4
	movl	$58, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2195:
.LBB1_598:                              # %if.then4246
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2196:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2197:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2198:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2199:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	$54, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2200:
.LBB1_599:                              # %if.then3659
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2201:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2202:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2203:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2204:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 635 6 is_stmt 1               # liblzma/lzma/lzma_decoder.c:635:6
	movl	$45, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2205:
.LBB1_600:                              # %if.then2139
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 6 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:6
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2206:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2207:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2208:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2209:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 501 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:501:4
	movl	$29, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2210:
.LBB1_601:                              # %if.then3583
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2211:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2212:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2213:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2214:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 632 6 is_stmt 1               # liblzma/lzma/lzma_decoder.c:632:6
	movl	$44, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2215:
.LBB1_602:                              # %if.then2382
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 6 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:6
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2216:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2217:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2218:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2219:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 501 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:501:4
	movl	$32, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2220:
.LBB1_603:                              # %if.then2721
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2221:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2222:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2223:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2224:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 515 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:515:4
	movl	$36, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2225:
.LBB1_604:                              # %if.then1720
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2226:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2227:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2228:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2229:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 501 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:501:4
	movl	$24, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2230:
.LBB1_605:                              # %if.then1071
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2231:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 444 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:444:5
	movl	$15, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2232:
.LBB1_606:                              # %if.then837
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 0 5 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:5
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2233:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 438 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:438:5
	movl	$12, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2234:
.LBB1_607:                              # %if.then2792
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 5 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2235:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2236:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2237:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2238:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 516 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:516:4
	movl	$37, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2239:
.LBB1_608:                              # %if.then4723
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2240:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2241:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2242:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2243:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 764 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:764:4
	movl	$60, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2244:
.LBB1_609:                              # %if.then993
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2245:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 442 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:442:5
	movl	$14, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2246:
.LBB1_610:                              # %if.then5087
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 5 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2247:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2248:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2249:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2250:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 764 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:764:4
	movl	$64, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2251:
.LBB1_611:                              # %if.then759
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2252:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 436 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:436:5
	movl	$11, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2253:
.LBB1_612:                              # %if.then1332
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- $r9d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rsi
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 5 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2254:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- undef
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2255:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2256:
	.loc	0 489 3 is_stmt 1               # liblzma/lzma/lzma_decoder.c:489:3
	movl	$19, 28320(%rdi)
	xorl	%ecx, %ecx
	movb	$1, %dl
	movl	(%rsp), %eax                    # 4-byte Reload
	movl	%eax, 52(%rsp)                  # 4-byte Spill
.Ltmp2257:
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_deref] $rsp
	.loc	0 0 3 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:3
	movl	%r9d, %ebp
.Ltmp2258:
	#DEBUG_VALUE: lzma_decode:rep2 <- $ebp
	xorl	%eax, %eax
	jmp	.LBB1_457
.Ltmp2259:
.LBB1_613:                              # %if.then2934
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2260:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2261:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2262:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2263:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 518 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:518:4
	movl	$39, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2264:
.LBB1_614:                              # %if.then1857
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2265:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2266:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2267:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2268:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 501 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:501:4
	movl	$26, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2269:
.LBB1_615:                              # %if.then4169
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2270:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 738 6 is_stmt 1               # liblzma/lzma/lzma_decoder.c:738:6
	movl	$53, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2271:
.LBB1_616:                              # %if.then462
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 6 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:6
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2272:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2273:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2274:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2275:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 379 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:379:5
	movl	$7, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2276:
.LBB1_617:                              # %if.then533
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 5 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2277:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2278:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2279:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2280:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 380 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:380:5
	movl	$8, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2281:
.LBB1_618:                              # %if.then249
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 5 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2282:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2283:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2284:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2285:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 376 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:376:5
	movl	$4, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2286:
.LBB1_619:                              # %if.then4632
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 5 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2287:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2288:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2289:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2290:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 764 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:764:4
	movl	$59, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2291:
.LBB1_620:                              # %if.then320
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2292:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2293:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2294:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2295:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 377 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:377:5
	movl	$5, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2296:
.LBB1_621:                              # %if.then1227
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $ecx
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 0 5 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2297:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2298:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2299:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2300:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 448 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:448:5
	movl	$17, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2301:
.LBB1_622:                              # %if.then1149
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 0 5 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:5
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2302:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 446 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:446:5
	movl	$16, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2303:
.LBB1_623:                              # %if.then391
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 5 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2304:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2305:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2306:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2307:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 378 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:378:5
	movl	$6, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2308:
.LBB1_624:                              # %if.then604
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 5 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2309:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2310:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2311:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2312:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 381 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:381:5
	movl	$9, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2313:
.LBB1_625:                              # %if.then108
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 5 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2314:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2315:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2316:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2317:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 374 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:374:5
	movl	$2, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2318:
.LBB1_626:                              # %if.then915
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 0 5 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:5
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2319:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 440 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:440:5
	movl	$13, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2320:
.LBB1_627:                              # %if.then178
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 5 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2321:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2322:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2323:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2324:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 375 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:375:5
	movl	$3, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2325:
.LBB1_628:                              # %if.then1520
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 5 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2326:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2327:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2328:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2329:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 501 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:501:4
	movl	$22, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2330:
.LBB1_629:                              # %if.then682
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: match_bit <- $eax
	#DEBUG_VALUE: subcoder_index <- $r9d
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2331:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2332:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2333:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	.loc	0 434 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:434:5
	movl	$10, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2334:
.LBB1_630:                              # %if.then5006
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 5 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2335:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2336:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2337:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2338:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 764 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:764:4
	movl	$63, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2339:
.LBB1_631:                              # %if.then3005
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2340:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2341:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2342:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2343:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 519 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:519:4
	movl	$40, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2344:
.LBB1_632:                              # %if.then1430
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2345:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2346:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2347:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2348:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 501 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:501:4
	movl	$21, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2349:
.LBB1_633:                              # %if.then2863
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2350:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2351:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2352:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2353:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 517 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:517:4
	movl	$38, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2354:
.LBB1_634:                              # %if.then1767
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2355:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2356:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2357:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2358:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 501 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:501:4
	movl	$25, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2359:
.LBB1_635:                              # %if.then1384
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2360:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2361:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2362:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2363:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	$20, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2364:
.LBB1_636:                              # %if.then3736
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2365:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2366:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2367:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2368:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 638 6 is_stmt 1               # liblzma/lzma/lzma_decoder.c:638:6
	movl	$46, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2369:
.LBB1_637:                              # %if.then1611
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 6 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:6
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2370:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2371:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2372:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2373:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 501 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:501:4
	movl	$23, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2374:
.LBB1_638:                              # %if.then3076
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2375:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2376:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2377:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2378:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 520 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:520:4
	movl	$41, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2379:
.LBB1_639:                              # %if.then3946
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $edx
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movl	%edx, 4(%rsp)                   # 4-byte Spill
.Ltmp2380:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2381:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2382:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2383:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 693 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:693:4
	movl	$49, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2384:
.LBB1_640:                              # %if.then4475
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2385:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2386:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2387:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2388:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 764 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:764:4
	movl	$57, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2389:
.LBB1_641:                              # %if.then2625
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2390:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2391:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2392:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2393:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 501 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:501:4
	movl	$35, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2394:
.LBB1_642:                              # %if.then1948
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2395:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2396:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2397:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2398:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	$27, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2399:
.LBB1_643:                              # %if.then5492
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2400:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2401:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2402:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2403:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 764 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:764:4
	movl	$69, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2404:
.LBB1_644:                              # %if.then4293
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2405:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2406:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2407:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2408:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	$55, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2409:
.LBB1_645:                              # %if.then2544
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2410:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2411:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2412:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2413:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 501 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:501:4
	movl	$34, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2414:
.LBB1_646:                              # %if.then2220
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2415:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2416:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2417:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2418:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	$30, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2419:
.LBB1_647:                              # %if.then2059
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2420:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2421:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2422:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2423:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	$28, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2424:
.LBB1_648:                              # %if.then2301
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2425:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2426:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2427:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2428:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 501 4                         # liblzma/lzma/lzma_decoder.c:501:4
	movl	$31, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2429:
.LBB1_649:                              # %if.then4925
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2430:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2431:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2432:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2433:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 764 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:764:4
	movl	$62, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2434:
.LBB1_650:                              # %if.then4101
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2435:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2436:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2437:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2438:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 728 5 is_stmt 1               # liblzma/lzma/lzma_decoder.c:728:5
	movl	$52, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2439:
.LBB1_651:                              # %if.then5411
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 5 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:5
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2440:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2441:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2442:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2443:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 764 4 is_stmt 1               # liblzma/lzma/lzma_decoder.c:764:4
	movl	$68, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2444:
.LBB1_652:                              # %if.then5249
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 4 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2445:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2446:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2447:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2448:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 764 4                         # liblzma/lzma/lzma_decoder.c:764:4
	movl	$66, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2449:
.LBB1_653:
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $r10d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- $r9d
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $rsi
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	#DEBUG_VALUE: dict_is_distance_valid:distance <- 0
	.loc	0 0 4                           # liblzma/lzma/lzma_decoder.c:0:4
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2450:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- undef
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2451:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%rsi, %r12
.Ltmp2452:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movl	$9, %eax
	movq	$0, 72(%rsp)                    # 8-byte Folded Spill
.Ltmp2453:
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_LLVM_fragment 128 64] undef
	movl	(%rsp), %ecx                    # 4-byte Reload
	movl	%ecx, 52(%rsp)                  # 4-byte Spill
.Ltmp2454:
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_deref] $rsp
	movq	%r14, 32(%rsp)                  # 8-byte Spill
.Ltmp2455:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- [DW_OP_plus_uconst 32, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:in_size <- undef
	movl	%r9d, %ebp
.Ltmp2456:
	#DEBUG_VALUE: lzma_decode:rep2 <- $ebp
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	%r10d, %ebx
.Ltmp2457:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	movl	%r11d, %r15d
	jmp	.LBB1_457
.Ltmp2458:
.LBB1_654:                              # %if.then48
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- $r12d
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_state <- $eax
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movl	%r12d, 4(%rsp)                  # 4-byte Spill
.Ltmp2459:
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2460:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2461:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2462:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 356 3 is_stmt 1               # liblzma/lzma/lzma_decoder.c:356:3
	movl	$1, 28320(%rdi)
	jmp	.LBB1_454
.Ltmp2463:
.LBB1_655:                              # %if.then3463
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- 1
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 3 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:3
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2464:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2465:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2466:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 598 7 is_stmt 1               # liblzma/lzma/lzma_decoder.c:598:7
	movl	$42, 28320(%rdi)
	xorl	%ecx, %ecx
	movb	$1, %dl
	movl	$1, %eax
	movq	%rax, 64(%rsp)                  # 8-byte Spill
	jmp	.LBB1_455
.Ltmp2467:
.LBB1_656:                              # %if.then3388
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- 2
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 7 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:7
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2468:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2469:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2470:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 586 7 is_stmt 1               # liblzma/lzma/lzma_decoder.c:586:7
	movl	$42, 28320(%rdi)
	xorl	%ecx, %ecx
	movb	$1, %dl
	movl	$2, %eax
	movq	%rax, 64(%rsp)                  # 8-byte Spill
	jmp	.LBB1_455
.Ltmp2471:
.LBB1_657:                              # %if.end3896
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 662 7                         # liblzma/lzma/lzma_decoder.c:662:7
	shll	$8, %ebx
.Ltmp2472:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	shll	$8, %r15d
.Ltmp2473:
	movzbl	(%r8,%r14), %r9d
	incq	%r14
.Ltmp2474:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	orl	%r15d, %r9d
.Ltmp2475:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r9d
	.loc	0 0 7 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:7
	xorl	%edx, %edx
	movq	%r14, 32(%rsp)                  # 8-byte Spill
.Ltmp2476:
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- [DW_OP_plus_uconst 32, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:in_size <- undef
	movl	%r9d, %r15d
.Ltmp2477:
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	jmp	.LBB1_588
.Ltmp2478:
.LBB1_658:                              # %if.then3313
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- 3
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2479:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2480:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2481:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 580 7 is_stmt 1               # liblzma/lzma/lzma_decoder.c:580:7
	movl	$42, 28320(%rdi)
	xorl	%ecx, %ecx
	movb	$1, %dl
	movl	$3, %eax
	movq	%rax, 64(%rsp)                  # 8-byte Spill
	jmp	.LBB1_455
.Ltmp2482:
.LBB1_659:                              # %if.then3238
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- 4
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 7 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:7
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2483:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2484:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2485:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 574 7 is_stmt 1               # liblzma/lzma/lzma_decoder.c:574:7
	movl	$42, 28320(%rdi)
	xorl	%ecx, %ecx
	movb	$1, %dl
	movl	$4, %eax
	movq	%rax, 64(%rsp)                  # 8-byte Spill
	jmp	.LBB1_455
.Ltmp2486:
.LBB1_660:                              # %if.then3165
	#DEBUG_VALUE: lzma_decode:pcoder <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decode:dictptr <- [DW_OP_plus_uconst 184] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decode:in_pos <- [DW_OP_plus_uconst 176] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:in_size <- [DW_OP_plus_uconst 32] [$rsp+0]
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 80, DW_OP_deref, DW_OP_LLVM_fragment 256 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 96, DW_OP_deref, DW_OP_LLVM_fragment 0 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 56, DW_OP_deref, DW_OP_LLVM_fragment 64 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 72, DW_OP_deref, DW_OP_LLVM_fragment 128 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict <- [DW_OP_plus_uconst 112, DW_OP_deref, DW_OP_LLVM_fragment 192 64] $rsp
	#DEBUG_VALUE: lzma_decode:dict_start <- [DW_OP_plus_uconst 168, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 0 32] $ebx
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 32 32] $r15d
	#DEBUG_VALUE: lzma_decode:rc <- [DW_OP_LLVM_fragment 64 32] 0
	#DEBUG_VALUE: lzma_decode:rc_in_pos <- $r14
	#DEBUG_VALUE: lzma_decode:state <- [DW_OP_plus_uconst 4, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep0 <- $ebp
	#DEBUG_VALUE: lzma_decode:rep1 <- [DW_OP_plus_uconst 52, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep2 <- [DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:rep3 <- [DW_OP_plus_uconst 92, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:pos_mask <- [DW_OP_plus_uconst 108, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:probs <- $r11
	#DEBUG_VALUE: lzma_decode:symbol <- $r13d
	#DEBUG_VALUE: lzma_decode:limit <- [DW_OP_plus_uconst 64, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:offset <- [DW_OP_plus_uconst 8, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:len <- [DW_OP_plus_uconst 40, DW_OP_deref] $rsp
	#DEBUG_VALUE: lzma_decode:ret <- 0
	.loc	0 0 7 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:7
	movq	%r13, 16(%rsp)                  # 8-byte Spill
.Ltmp2487:
	#DEBUG_VALUE: lzma_decode:symbol <- [DW_OP_plus_uconst 16, DW_OP_deref] $rsp
	movq	%r11, %r12
.Ltmp2488:
	#DEBUG_VALUE: lzma_decode:probs <- $r12
	movq	%rbp, 24(%rsp)                  # 8-byte Spill
.Ltmp2489:
	#DEBUG_VALUE: lzma_decode:rep0 <- [DW_OP_plus_uconst 24, DW_OP_deref] $rsp
	.loc	0 568 7 is_stmt 1               # liblzma/lzma/lzma_decoder.c:568:7
	movl	$42, 28320(%rdi)
	xorl	%ecx, %ecx
	movb	$1, %dl
	movl	$5, %eax
	movq	%rax, 64(%rsp)                  # 8-byte Spill
.Ltmp2490:
	#DEBUG_VALUE: lzma_decode:limit <- undef
	.loc	0 0 7 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:7
	jmp	.LBB1_455
.Ltmp2491:
.Lfunc_end1:
	.size	lzma_decode, .Lfunc_end1-lzma_decode
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3, 0x0
.LJTI1_0:
	.quad	.LBB1_16
	.quad	.LBB1_16
	.quad	.LBB1_25
	.quad	.LBB1_31
	.quad	.LBB1_38
	.quad	.LBB1_45
	.quad	.LBB1_52
	.quad	.LBB1_59
	.quad	.LBB1_66
	.quad	.LBB1_73
	.quad	.LBB1_474
	.quad	.LBB1_481
	.quad	.LBB1_489
	.quad	.LBB1_497
	.quad	.LBB1_505
	.quad	.LBB1_513
	.quad	.LBB1_521
	.quad	.LBB1_529
	.quad	.LBB1_537
	.quad	.LBB1_81
	.quad	.LBB1_87
	.quad	.LBB1_93
	.quad	.LBB1_195
	.quad	.LBB1_203
	.quad	.LBB1_211
	.quad	.LBB1_217
	.quad	.LBB1_225
	.quad	.LBB1_233
	.quad	.LBB1_239
	.quad	.LBB1_245
	.quad	.LBB1_252
	.quad	.LBB1_261
	.quad	.LBB1_268
	.quad	.LBB1_275
	.quad	.LBB1_282
	.quad	.LBB1_317
	.quad	.LBB1_326
	.quad	.LBB1_332
	.quad	.LBB1_339
	.quad	.LBB1_346
	.quad	.LBB1_353
	.quad	.LBB1_360
	.quad	.LBB1_372
	.quad	.LBB1_412
	.quad	.LBB1_418
	.quad	.LBB1_424
	.quad	.LBB1_431
	.quad	.LBB1_438
	.quad	.LBB1_583
	.quad	.LBB1_101
	.quad	.LBB1_113
	.quad	.LBB1_107
	.quad	.LBB1_116
	.quad	.LBB1_124
	.quad	.LBB1_133
	.quad	.LBB1_139
	.quad	.LBB1_147
	.quad	.LBB1_155
	.quad	.LBB1_164
	.quad	.LBB1_170
	.quad	.LBB1_394
	.quad	.LBB1_402
	.quad	.LBB1_177
	.quad	.LBB1_183
	.quad	.LBB1_190
	.quad	.LBB1_289
	.quad	.LBB1_296
	.quad	.LBB1_303
	.quad	.LBB1_310
	.quad	.LBB1_383
	.quad	.LBB1_448
.LJTI1_1:
	.quad	.LBB1_566
	.quad	.LBB1_559
	.quad	.LBB1_552
	.quad	.LBB1_545
	.quad	.LBB1_374
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function lzma_decoder_reset
.LCPI2_0:
	.short	1024                            # 0x400
	.short	1024                            # 0x400
	.short	1024                            # 0x400
	.short	1024                            # 0x400
	.short	1024                            # 0x400
	.short	1024                            # 0x400
	.short	1024                            # 0x400
	.short	1024                            # 0x400
	.text
	.p2align	4, 0x90
	.type	lzma_decoder_reset,@function
lzma_decoder_reset:                     # @lzma_decoder_reset
.Lfunc_begin2:
	.cfi_startproc
# %bb.0:                                # %entry
	#DEBUG_VALUE: lzma_decoder_reset:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:opt <- $rsi
	#DEBUG_VALUE: lzma_decoder_reset:coder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:options <- $rsi
	.loc	0 865 36 prologue_end is_stmt 1 # liblzma/lzma/lzma_decoder.c:865:36
	movzbl	28(%rsi), %ecx
	movl	$-1, %eax
	.loc	0 865 40 is_stmt 0              # liblzma/lzma/lzma_decoder.c:865:40
	shll	%cl, %eax
	notl	%eax
	.loc	0 865 18                        # liblzma/lzma/lzma_decoder.c:865:18
	movl	%eax, 28300(%rdi)
	.loc	0 868 53 is_stmt 1              # liblzma/lzma/lzma_decoder.c:868:53
	movl	24(%rsi), %ecx
.Ltmp2492:
	#DEBUG_VALUE: literal_init:lp <- $ecx
	#DEBUG_VALUE: literal_init:probs <- $rdi
	#DEBUG_VALUE: literal_init:lc <- undef
	.loc	1 134 36                        # liblzma/lzma/lzma_common.h:134:36
	addl	20(%rsi), %ecx
.Ltmp2493:
	#DEBUG_VALUE: literal_init:coders <- [DW_OP_LLVM_arg 0, DW_OP_LLVM_arg 1, DW_OP_shl, DW_OP_stack_value] 1, $ecx
	.loc	1 0 36 is_stmt 0                # liblzma/lzma/lzma_common.h:0:36
	movl	$1, %eax
	#DEBUG_VALUE: i <- 0
	movaps	.LCPI2_0(%rip), %xmm0           # xmm0 = [1024,1024,1024,1024,1024,1024,1024,1024]
.Ltmp2494:
	.p2align	4, 0x90
.LBB2_1:                                # %for.cond1.preheader.i
                                        # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: lzma_decoder_reset:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:opt <- $rsi
	#DEBUG_VALUE: lzma_decoder_reset:coder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:options <- $rsi
	#DEBUG_VALUE: literal_init:probs <- $rdi
	#DEBUG_VALUE: literal_init:coders <- [DW_OP_LLVM_arg 0, DW_OP_LLVM_arg 1, DW_OP_shl, DW_OP_stack_value] 1, $ecx
	#DEBUG_VALUE: i <- [DW_OP_constu 1, DW_OP_minus, DW_OP_stack_value] $eax
	#DEBUG_VALUE: j <- 0
	leal	-1(%rax), %edx
.Ltmp2495:
	.loc	1 138 4 is_stmt 1               # liblzma/lzma/lzma_common.h:138:4
	leaq	(%rdx,%rdx,2), %rdx
	shlq	$9, %rdx
	movups	%xmm0, (%rdi,%rdx)
	movups	%xmm0, 16(%rdi,%rdx)
	movups	%xmm0, 32(%rdi,%rdx)
	movups	%xmm0, 48(%rdi,%rdx)
	movups	%xmm0, 64(%rdi,%rdx)
	movups	%xmm0, 80(%rdi,%rdx)
	movups	%xmm0, 96(%rdi,%rdx)
	movups	%xmm0, 112(%rdi,%rdx)
	movups	%xmm0, 128(%rdi,%rdx)
	movups	%xmm0, 144(%rdi,%rdx)
	movups	%xmm0, 160(%rdi,%rdx)
	movups	%xmm0, 176(%rdi,%rdx)
	movups	%xmm0, 192(%rdi,%rdx)
	movups	%xmm0, 208(%rdi,%rdx)
	movups	%xmm0, 224(%rdi,%rdx)
	movups	%xmm0, 240(%rdi,%rdx)
	movups	%xmm0, 256(%rdi,%rdx)
	movups	%xmm0, 272(%rdi,%rdx)
	movups	%xmm0, 288(%rdi,%rdx)
	movups	%xmm0, 304(%rdi,%rdx)
	movups	%xmm0, 320(%rdi,%rdx)
	movups	%xmm0, 336(%rdi,%rdx)
	movups	%xmm0, 352(%rdi,%rdx)
	movups	%xmm0, 368(%rdi,%rdx)
	movups	%xmm0, 384(%rdi,%rdx)
	movups	%xmm0, 400(%rdi,%rdx)
	movups	%xmm0, 416(%rdi,%rdx)
	movups	%xmm0, 432(%rdi,%rdx)
	movups	%xmm0, 448(%rdi,%rdx)
	movups	%xmm0, 464(%rdi,%rdx)
	movups	%xmm0, 480(%rdi,%rdx)
	movups	%xmm0, 496(%rdi,%rdx)
	movups	%xmm0, 512(%rdi,%rdx)
	movups	%xmm0, 528(%rdi,%rdx)
	movups	%xmm0, 544(%rdi,%rdx)
	movups	%xmm0, 560(%rdi,%rdx)
	movups	%xmm0, 576(%rdi,%rdx)
	movups	%xmm0, 592(%rdi,%rdx)
	movups	%xmm0, 608(%rdi,%rdx)
	movups	%xmm0, 624(%rdi,%rdx)
	movups	%xmm0, 640(%rdi,%rdx)
	movups	%xmm0, 656(%rdi,%rdx)
	movups	%xmm0, 672(%rdi,%rdx)
	movups	%xmm0, 688(%rdi,%rdx)
	movups	%xmm0, 704(%rdi,%rdx)
	movups	%xmm0, 720(%rdi,%rdx)
	movups	%xmm0, 736(%rdi,%rdx)
	movups	%xmm0, 752(%rdi,%rdx)
	movups	%xmm0, 768(%rdi,%rdx)
	movups	%xmm0, 784(%rdi,%rdx)
	movups	%xmm0, 800(%rdi,%rdx)
	movups	%xmm0, 816(%rdi,%rdx)
	movups	%xmm0, 832(%rdi,%rdx)
	movups	%xmm0, 848(%rdi,%rdx)
	movups	%xmm0, 864(%rdi,%rdx)
	movups	%xmm0, 880(%rdi,%rdx)
	movups	%xmm0, 896(%rdi,%rdx)
	movups	%xmm0, 912(%rdi,%rdx)
	movups	%xmm0, 928(%rdi,%rdx)
	movups	%xmm0, 944(%rdi,%rdx)
	movups	%xmm0, 960(%rdi,%rdx)
	movups	%xmm0, 976(%rdi,%rdx)
	movups	%xmm0, 992(%rdi,%rdx)
	movups	%xmm0, 1008(%rdi,%rdx)
	movups	%xmm0, 1024(%rdi,%rdx)
	movups	%xmm0, 1040(%rdi,%rdx)
	movups	%xmm0, 1056(%rdi,%rdx)
	movups	%xmm0, 1072(%rdi,%rdx)
	movups	%xmm0, 1088(%rdi,%rdx)
	movups	%xmm0, 1104(%rdi,%rdx)
	movups	%xmm0, 1120(%rdi,%rdx)
	movups	%xmm0, 1136(%rdi,%rdx)
	movups	%xmm0, 1152(%rdi,%rdx)
	movups	%xmm0, 1168(%rdi,%rdx)
	movups	%xmm0, 1184(%rdi,%rdx)
	movups	%xmm0, 1200(%rdi,%rdx)
	movups	%xmm0, 1216(%rdi,%rdx)
	movups	%xmm0, 1232(%rdi,%rdx)
	movups	%xmm0, 1248(%rdi,%rdx)
	movups	%xmm0, 1264(%rdi,%rdx)
	movups	%xmm0, 1280(%rdi,%rdx)
	movups	%xmm0, 1296(%rdi,%rdx)
	movups	%xmm0, 1312(%rdi,%rdx)
	movups	%xmm0, 1328(%rdi,%rdx)
	movups	%xmm0, 1344(%rdi,%rdx)
	movups	%xmm0, 1360(%rdi,%rdx)
	movups	%xmm0, 1376(%rdi,%rdx)
	movups	%xmm0, 1392(%rdi,%rdx)
	movups	%xmm0, 1408(%rdi,%rdx)
	movups	%xmm0, 1424(%rdi,%rdx)
	movups	%xmm0, 1440(%rdi,%rdx)
	movups	%xmm0, 1456(%rdi,%rdx)
	movups	%xmm0, 1472(%rdi,%rdx)
	movups	%xmm0, 1488(%rdi,%rdx)
.Ltmp2496:
	#DEBUG_VALUE: i <- $eax
	.loc	1 136 25                        # liblzma/lzma/lzma_common.h:136:25
	movl	%eax, %r8d
	shrl	%cl, %r8d
.Ltmp2497:
	.loc	1 138 4                         # liblzma/lzma/lzma_common.h:138:4
	movups	%xmm0, 1504(%rdi,%rdx)
	movups	%xmm0, 1520(%rdi,%rdx)
.Ltmp2498:
	.loc	1 136 2                         # liblzma/lzma/lzma_common.h:136:2
	incl	%eax
.Ltmp2499:
	.loc	1 136 25 is_stmt 0              # liblzma/lzma/lzma_common.h:136:25
	testl	%r8d, %r8d
.Ltmp2500:
	.loc	1 136 2                         # liblzma/lzma/lzma_common.h:136:2
	je	.LBB2_1
.Ltmp2501:
# %bb.2:                                # %literal_init.exit
	#DEBUG_VALUE: lzma_decoder_reset:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:opt <- $rsi
	#DEBUG_VALUE: lzma_decoder_reset:coder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:options <- $rsi
	.loc	0 870 41 is_stmt 1              # liblzma/lzma/lzma_decoder.c:870:41
	movl	20(%rsi), %eax
	.loc	0 870 30 is_stmt 0              # liblzma/lzma/lzma_decoder.c:870:30
	movl	%eax, 28304(%rdi)
	.loc	0 871 44 is_stmt 1              # liblzma/lzma/lzma_decoder.c:871:44
	movzbl	24(%rsi), %ecx
	.loc	0 871 48 is_stmt 0              # liblzma/lzma/lzma_decoder.c:871:48
	movl	$-1, %eax
	shll	%cl, %eax
	movl	$-1, %edx
	notl	%eax
	.loc	0 871 26                        # liblzma/lzma/lzma_decoder.c:871:26
	movl	%eax, 28308(%rdi)
	.loc	0 875 14 is_stmt 1              # liblzma/lzma/lzma_decoder.c:875:14
	xorps	%xmm1, %xmm1
	movups	%xmm1, 28280(%rdi)
	movl	$0, 28296(%rdi)
	.loc	0 879 36                        # liblzma/lzma/lzma_decoder.c:879:36
	movzbl	28(%rsi), %ecx
	.loc	0 879 40 is_stmt 0              # liblzma/lzma/lzma_decoder.c:879:40
	shll	%cl, %edx
	notl	%edx
	.loc	0 879 18                        # liblzma/lzma/lzma_decoder.c:879:18
	movl	%edx, 28300(%rdi)
	movl	$4294967295, %eax               # imm = 0xFFFFFFFF
.Ltmp2502:
	.loc	0 882 2 is_stmt 1               # liblzma/lzma/lzma_decoder.c:882:2
	movq	%rax, 28268(%rdi)
	movl	$5, 28276(%rdi)
	xorl	%eax, %eax
.Ltmp2503:
	#DEBUG_VALUE: i <- 0
	#DEBUG_VALUE: j <- 0
	.p2align	4, 0x90
.LBB2_3:                                # %for.body15
                                        # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: lzma_decoder_reset:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:opt <- $rsi
	#DEBUG_VALUE: lzma_decoder_reset:coder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:options <- $rsi
	#DEBUG_VALUE: i <- 0
	#DEBUG_VALUE: j <- $eax
	.loc	0 887 4                         # liblzma/lzma/lzma_decoder.c:887:4
	movl	%eax, %ecx
	movw	$1024, 24576(%rdi,%rcx,2)       # imm = 0x400
	.loc	0 888 4                         # liblzma/lzma/lzma_decoder.c:888:4
	movw	$1024, 25056(%rdi,%rcx,2)       # imm = 0x400
.Ltmp2504:
	.loc	0 886 46                        # liblzma/lzma/lzma_decoder.c:886:46
	incl	%eax
.Ltmp2505:
	#DEBUG_VALUE: j <- $ecx
	#DEBUG_VALUE: j <- $eax
	.loc	0 886 26 is_stmt 0              # liblzma/lzma/lzma_decoder.c:886:26
	cmpl	28300(%rdi), %eax
.Ltmp2506:
	.loc	0 886 3                         # liblzma/lzma/lzma_decoder.c:886:3
	jbe	.LBB2_3
.Ltmp2507:
# %bb.4:                                # %for.cond.cleanup14
	#DEBUG_VALUE: lzma_decoder_reset:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:opt <- $rsi
	#DEBUG_VALUE: lzma_decoder_reset:coder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:options <- $rsi
	#DEBUG_VALUE: i <- 0
	#DEBUG_VALUE: j <- $eax
	.loc	0 891 3 is_stmt 1               # liblzma/lzma/lzma_decoder.c:891:3
	movw	$1024, 24960(%rdi)              # imm = 0x400
	.loc	0 892 3                         # liblzma/lzma/lzma_decoder.c:892:3
	movw	$1024, 24984(%rdi)              # imm = 0x400
	.loc	0 893 3                         # liblzma/lzma/lzma_decoder.c:893:3
	movw	$1024, 25008(%rdi)              # imm = 0x400
	.loc	0 894 3                         # liblzma/lzma/lzma_decoder.c:894:3
	movw	$1024, 25032(%rdi)              # imm = 0x400
	xorl	%eax, %eax
.Ltmp2508:
	#DEBUG_VALUE: i <- 1
	#DEBUG_VALUE: j <- 0
	.p2align	4, 0x90
.LBB2_5:                                # %for.body15.1
                                        # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: lzma_decoder_reset:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:opt <- $rsi
	#DEBUG_VALUE: lzma_decoder_reset:coder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:options <- $rsi
	#DEBUG_VALUE: i <- 1
	#DEBUG_VALUE: j <- $eax
	.loc	0 887 4                         # liblzma/lzma/lzma_decoder.c:887:4
	movl	%eax, %ecx
	movw	$1024, 24608(%rdi,%rcx,2)       # imm = 0x400
	.loc	0 888 4                         # liblzma/lzma/lzma_decoder.c:888:4
	movw	$1024, 25088(%rdi,%rcx,2)       # imm = 0x400
.Ltmp2509:
	.loc	0 886 46                        # liblzma/lzma/lzma_decoder.c:886:46
	incl	%eax
.Ltmp2510:
	#DEBUG_VALUE: j <- $ecx
	#DEBUG_VALUE: j <- $eax
	.loc	0 886 26 is_stmt 0              # liblzma/lzma/lzma_decoder.c:886:26
	cmpl	28300(%rdi), %eax
.Ltmp2511:
	.loc	0 886 3                         # liblzma/lzma/lzma_decoder.c:886:3
	jbe	.LBB2_5
.Ltmp2512:
# %bb.6:                                # %for.cond.cleanup14.1
	#DEBUG_VALUE: lzma_decoder_reset:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:opt <- $rsi
	#DEBUG_VALUE: lzma_decoder_reset:coder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:options <- $rsi
	#DEBUG_VALUE: i <- 1
	#DEBUG_VALUE: j <- $eax
	.loc	0 891 3 is_stmt 1               # liblzma/lzma/lzma_decoder.c:891:3
	movw	$1024, 24962(%rdi)              # imm = 0x400
	.loc	0 892 3                         # liblzma/lzma/lzma_decoder.c:892:3
	movw	$1024, 24986(%rdi)              # imm = 0x400
	.loc	0 893 3                         # liblzma/lzma/lzma_decoder.c:893:3
	movw	$1024, 25010(%rdi)              # imm = 0x400
	.loc	0 894 3                         # liblzma/lzma/lzma_decoder.c:894:3
	movw	$1024, 25034(%rdi)              # imm = 0x400
	xorl	%eax, %eax
.Ltmp2513:
	#DEBUG_VALUE: i <- 2
	#DEBUG_VALUE: j <- 0
	.p2align	4, 0x90
.LBB2_7:                                # %for.body15.2
                                        # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: lzma_decoder_reset:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:opt <- $rsi
	#DEBUG_VALUE: lzma_decoder_reset:coder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:options <- $rsi
	#DEBUG_VALUE: i <- 2
	#DEBUG_VALUE: j <- $eax
	.loc	0 887 4                         # liblzma/lzma/lzma_decoder.c:887:4
	movl	%eax, %ecx
	movw	$1024, 24640(%rdi,%rcx,2)       # imm = 0x400
	.loc	0 888 4                         # liblzma/lzma/lzma_decoder.c:888:4
	movw	$1024, 25120(%rdi,%rcx,2)       # imm = 0x400
.Ltmp2514:
	.loc	0 886 46                        # liblzma/lzma/lzma_decoder.c:886:46
	incl	%eax
.Ltmp2515:
	#DEBUG_VALUE: j <- $ecx
	#DEBUG_VALUE: j <- $eax
	.loc	0 886 26 is_stmt 0              # liblzma/lzma/lzma_decoder.c:886:26
	cmpl	28300(%rdi), %eax
.Ltmp2516:
	.loc	0 886 3                         # liblzma/lzma/lzma_decoder.c:886:3
	jbe	.LBB2_7
.Ltmp2517:
# %bb.8:                                # %for.cond.cleanup14.2
	#DEBUG_VALUE: lzma_decoder_reset:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:opt <- $rsi
	#DEBUG_VALUE: lzma_decoder_reset:coder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:options <- $rsi
	#DEBUG_VALUE: i <- 2
	#DEBUG_VALUE: j <- $eax
	.loc	0 891 3 is_stmt 1               # liblzma/lzma/lzma_decoder.c:891:3
	movw	$1024, 24964(%rdi)              # imm = 0x400
	.loc	0 892 3                         # liblzma/lzma/lzma_decoder.c:892:3
	movw	$1024, 24988(%rdi)              # imm = 0x400
	.loc	0 893 3                         # liblzma/lzma/lzma_decoder.c:893:3
	movw	$1024, 25012(%rdi)              # imm = 0x400
	.loc	0 894 3                         # liblzma/lzma/lzma_decoder.c:894:3
	movw	$1024, 25036(%rdi)              # imm = 0x400
	xorl	%eax, %eax
.Ltmp2518:
	#DEBUG_VALUE: i <- 3
	#DEBUG_VALUE: j <- 0
	.p2align	4, 0x90
.LBB2_9:                                # %for.body15.3
                                        # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: lzma_decoder_reset:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:opt <- $rsi
	#DEBUG_VALUE: lzma_decoder_reset:coder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:options <- $rsi
	#DEBUG_VALUE: i <- 3
	#DEBUG_VALUE: j <- $eax
	.loc	0 887 4                         # liblzma/lzma/lzma_decoder.c:887:4
	movl	%eax, %ecx
	movw	$1024, 24672(%rdi,%rcx,2)       # imm = 0x400
	.loc	0 888 4                         # liblzma/lzma/lzma_decoder.c:888:4
	movw	$1024, 25152(%rdi,%rcx,2)       # imm = 0x400
.Ltmp2519:
	.loc	0 886 46                        # liblzma/lzma/lzma_decoder.c:886:46
	incl	%eax
.Ltmp2520:
	#DEBUG_VALUE: j <- $ecx
	#DEBUG_VALUE: j <- $eax
	.loc	0 886 26 is_stmt 0              # liblzma/lzma/lzma_decoder.c:886:26
	cmpl	28300(%rdi), %eax
.Ltmp2521:
	.loc	0 886 3                         # liblzma/lzma/lzma_decoder.c:886:3
	jbe	.LBB2_9
.Ltmp2522:
# %bb.10:                               # %for.cond.cleanup14.3
	#DEBUG_VALUE: lzma_decoder_reset:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:opt <- $rsi
	#DEBUG_VALUE: lzma_decoder_reset:coder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:options <- $rsi
	#DEBUG_VALUE: i <- 3
	#DEBUG_VALUE: j <- $eax
	.loc	0 891 3 is_stmt 1               # liblzma/lzma/lzma_decoder.c:891:3
	movw	$1024, 24966(%rdi)              # imm = 0x400
	.loc	0 892 3                         # liblzma/lzma/lzma_decoder.c:892:3
	movw	$1024, 24990(%rdi)              # imm = 0x400
	.loc	0 893 3                         # liblzma/lzma/lzma_decoder.c:893:3
	movw	$1024, 25014(%rdi)              # imm = 0x400
	.loc	0 894 3                         # liblzma/lzma/lzma_decoder.c:894:3
	movw	$1024, 25038(%rdi)              # imm = 0x400
	xorl	%eax, %eax
.Ltmp2523:
	#DEBUG_VALUE: i <- 4
	#DEBUG_VALUE: j <- 0
	.p2align	4, 0x90
.LBB2_11:                               # %for.body15.4
                                        # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: lzma_decoder_reset:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:opt <- $rsi
	#DEBUG_VALUE: lzma_decoder_reset:coder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:options <- $rsi
	#DEBUG_VALUE: i <- 4
	#DEBUG_VALUE: j <- $eax
	.loc	0 887 4                         # liblzma/lzma/lzma_decoder.c:887:4
	movl	%eax, %ecx
	movw	$1024, 24704(%rdi,%rcx,2)       # imm = 0x400
	.loc	0 888 4                         # liblzma/lzma/lzma_decoder.c:888:4
	movw	$1024, 25184(%rdi,%rcx,2)       # imm = 0x400
.Ltmp2524:
	.loc	0 886 46                        # liblzma/lzma/lzma_decoder.c:886:46
	incl	%eax
.Ltmp2525:
	#DEBUG_VALUE: j <- $ecx
	#DEBUG_VALUE: j <- $eax
	.loc	0 886 26 is_stmt 0              # liblzma/lzma/lzma_decoder.c:886:26
	cmpl	28300(%rdi), %eax
.Ltmp2526:
	.loc	0 886 3                         # liblzma/lzma/lzma_decoder.c:886:3
	jbe	.LBB2_11
.Ltmp2527:
# %bb.12:                               # %for.cond.cleanup14.4
	#DEBUG_VALUE: lzma_decoder_reset:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:opt <- $rsi
	#DEBUG_VALUE: lzma_decoder_reset:coder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:options <- $rsi
	#DEBUG_VALUE: i <- 4
	#DEBUG_VALUE: j <- $eax
	.loc	0 891 3 is_stmt 1               # liblzma/lzma/lzma_decoder.c:891:3
	movw	$1024, 24968(%rdi)              # imm = 0x400
	.loc	0 892 3                         # liblzma/lzma/lzma_decoder.c:892:3
	movw	$1024, 24992(%rdi)              # imm = 0x400
	.loc	0 893 3                         # liblzma/lzma/lzma_decoder.c:893:3
	movw	$1024, 25016(%rdi)              # imm = 0x400
	.loc	0 894 3                         # liblzma/lzma/lzma_decoder.c:894:3
	movw	$1024, 25040(%rdi)              # imm = 0x400
	xorl	%eax, %eax
.Ltmp2528:
	#DEBUG_VALUE: i <- 5
	#DEBUG_VALUE: j <- 0
	.p2align	4, 0x90
.LBB2_13:                               # %for.body15.5
                                        # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: lzma_decoder_reset:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:opt <- $rsi
	#DEBUG_VALUE: lzma_decoder_reset:coder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:options <- $rsi
	#DEBUG_VALUE: i <- 5
	#DEBUG_VALUE: j <- $eax
	.loc	0 887 4                         # liblzma/lzma/lzma_decoder.c:887:4
	movl	%eax, %ecx
	movw	$1024, 24736(%rdi,%rcx,2)       # imm = 0x400
	.loc	0 888 4                         # liblzma/lzma/lzma_decoder.c:888:4
	movw	$1024, 25216(%rdi,%rcx,2)       # imm = 0x400
.Ltmp2529:
	.loc	0 886 46                        # liblzma/lzma/lzma_decoder.c:886:46
	incl	%eax
.Ltmp2530:
	#DEBUG_VALUE: j <- $ecx
	#DEBUG_VALUE: j <- $eax
	.loc	0 886 26 is_stmt 0              # liblzma/lzma/lzma_decoder.c:886:26
	cmpl	28300(%rdi), %eax
.Ltmp2531:
	.loc	0 886 3                         # liblzma/lzma/lzma_decoder.c:886:3
	jbe	.LBB2_13
.Ltmp2532:
# %bb.14:                               # %for.cond.cleanup14.5
	#DEBUG_VALUE: lzma_decoder_reset:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:opt <- $rsi
	#DEBUG_VALUE: lzma_decoder_reset:coder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:options <- $rsi
	#DEBUG_VALUE: i <- 5
	#DEBUG_VALUE: j <- $eax
	.loc	0 891 3 is_stmt 1               # liblzma/lzma/lzma_decoder.c:891:3
	movw	$1024, 24970(%rdi)              # imm = 0x400
	.loc	0 892 3                         # liblzma/lzma/lzma_decoder.c:892:3
	movw	$1024, 24994(%rdi)              # imm = 0x400
	.loc	0 893 3                         # liblzma/lzma/lzma_decoder.c:893:3
	movw	$1024, 25018(%rdi)              # imm = 0x400
	.loc	0 894 3                         # liblzma/lzma/lzma_decoder.c:894:3
	movw	$1024, 25042(%rdi)              # imm = 0x400
	xorl	%eax, %eax
.Ltmp2533:
	#DEBUG_VALUE: i <- 6
	#DEBUG_VALUE: j <- 0
	.p2align	4, 0x90
.LBB2_15:                               # %for.body15.6
                                        # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: lzma_decoder_reset:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:opt <- $rsi
	#DEBUG_VALUE: lzma_decoder_reset:coder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:options <- $rsi
	#DEBUG_VALUE: i <- 6
	#DEBUG_VALUE: j <- $eax
	.loc	0 887 4                         # liblzma/lzma/lzma_decoder.c:887:4
	movl	%eax, %ecx
	movw	$1024, 24768(%rdi,%rcx,2)       # imm = 0x400
	.loc	0 888 4                         # liblzma/lzma/lzma_decoder.c:888:4
	movw	$1024, 25248(%rdi,%rcx,2)       # imm = 0x400
.Ltmp2534:
	.loc	0 886 46                        # liblzma/lzma/lzma_decoder.c:886:46
	incl	%eax
.Ltmp2535:
	#DEBUG_VALUE: j <- $ecx
	#DEBUG_VALUE: j <- $eax
	.loc	0 886 26 is_stmt 0              # liblzma/lzma/lzma_decoder.c:886:26
	cmpl	28300(%rdi), %eax
.Ltmp2536:
	.loc	0 886 3                         # liblzma/lzma/lzma_decoder.c:886:3
	jbe	.LBB2_15
.Ltmp2537:
# %bb.16:                               # %for.cond.cleanup14.6
	#DEBUG_VALUE: lzma_decoder_reset:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:opt <- $rsi
	#DEBUG_VALUE: lzma_decoder_reset:coder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:options <- $rsi
	#DEBUG_VALUE: i <- 6
	#DEBUG_VALUE: j <- $eax
	.loc	0 891 3 is_stmt 1               # liblzma/lzma/lzma_decoder.c:891:3
	movw	$1024, 24972(%rdi)              # imm = 0x400
	.loc	0 892 3                         # liblzma/lzma/lzma_decoder.c:892:3
	movw	$1024, 24996(%rdi)              # imm = 0x400
	.loc	0 893 3                         # liblzma/lzma/lzma_decoder.c:893:3
	movw	$1024, 25020(%rdi)              # imm = 0x400
	.loc	0 894 3                         # liblzma/lzma/lzma_decoder.c:894:3
	movw	$1024, 25044(%rdi)              # imm = 0x400
	xorl	%eax, %eax
.Ltmp2538:
	#DEBUG_VALUE: i <- 7
	#DEBUG_VALUE: j <- 0
	.p2align	4, 0x90
.LBB2_17:                               # %for.body15.7
                                        # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: lzma_decoder_reset:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:opt <- $rsi
	#DEBUG_VALUE: lzma_decoder_reset:coder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:options <- $rsi
	#DEBUG_VALUE: i <- 7
	#DEBUG_VALUE: j <- $eax
	.loc	0 887 4                         # liblzma/lzma/lzma_decoder.c:887:4
	movl	%eax, %ecx
	movw	$1024, 24800(%rdi,%rcx,2)       # imm = 0x400
	.loc	0 888 4                         # liblzma/lzma/lzma_decoder.c:888:4
	movw	$1024, 25280(%rdi,%rcx,2)       # imm = 0x400
.Ltmp2539:
	.loc	0 886 46                        # liblzma/lzma/lzma_decoder.c:886:46
	incl	%eax
.Ltmp2540:
	#DEBUG_VALUE: j <- $ecx
	#DEBUG_VALUE: j <- $eax
	.loc	0 886 26 is_stmt 0              # liblzma/lzma/lzma_decoder.c:886:26
	cmpl	28300(%rdi), %eax
.Ltmp2541:
	.loc	0 886 3                         # liblzma/lzma/lzma_decoder.c:886:3
	jbe	.LBB2_17
.Ltmp2542:
# %bb.18:                               # %for.cond.cleanup14.7
	#DEBUG_VALUE: lzma_decoder_reset:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:opt <- $rsi
	#DEBUG_VALUE: lzma_decoder_reset:coder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:options <- $rsi
	#DEBUG_VALUE: i <- 7
	#DEBUG_VALUE: j <- $eax
	.loc	0 891 3 is_stmt 1               # liblzma/lzma/lzma_decoder.c:891:3
	movw	$1024, 24974(%rdi)              # imm = 0x400
	.loc	0 892 3                         # liblzma/lzma/lzma_decoder.c:892:3
	movw	$1024, 24998(%rdi)              # imm = 0x400
	.loc	0 893 3                         # liblzma/lzma/lzma_decoder.c:893:3
	movw	$1024, 25022(%rdi)              # imm = 0x400
	.loc	0 894 3                         # liblzma/lzma/lzma_decoder.c:894:3
	movw	$1024, 25046(%rdi)              # imm = 0x400
	xorl	%eax, %eax
.Ltmp2543:
	#DEBUG_VALUE: i <- 8
	#DEBUG_VALUE: j <- 0
	.p2align	4, 0x90
.LBB2_19:                               # %for.body15.8
                                        # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: lzma_decoder_reset:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:opt <- $rsi
	#DEBUG_VALUE: lzma_decoder_reset:coder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:options <- $rsi
	#DEBUG_VALUE: i <- 8
	#DEBUG_VALUE: j <- $eax
	.loc	0 887 4                         # liblzma/lzma/lzma_decoder.c:887:4
	movl	%eax, %ecx
	movw	$1024, 24832(%rdi,%rcx,2)       # imm = 0x400
	.loc	0 888 4                         # liblzma/lzma/lzma_decoder.c:888:4
	movw	$1024, 25312(%rdi,%rcx,2)       # imm = 0x400
.Ltmp2544:
	.loc	0 886 46                        # liblzma/lzma/lzma_decoder.c:886:46
	incl	%eax
.Ltmp2545:
	#DEBUG_VALUE: j <- $ecx
	#DEBUG_VALUE: j <- $eax
	.loc	0 886 26 is_stmt 0              # liblzma/lzma/lzma_decoder.c:886:26
	cmpl	28300(%rdi), %eax
.Ltmp2546:
	.loc	0 886 3                         # liblzma/lzma/lzma_decoder.c:886:3
	jbe	.LBB2_19
.Ltmp2547:
# %bb.20:                               # %for.cond.cleanup14.8
	#DEBUG_VALUE: lzma_decoder_reset:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:opt <- $rsi
	#DEBUG_VALUE: lzma_decoder_reset:coder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:options <- $rsi
	#DEBUG_VALUE: i <- 8
	#DEBUG_VALUE: j <- $eax
	.loc	0 891 3 is_stmt 1               # liblzma/lzma/lzma_decoder.c:891:3
	movw	$1024, 24976(%rdi)              # imm = 0x400
	.loc	0 892 3                         # liblzma/lzma/lzma_decoder.c:892:3
	movw	$1024, 25000(%rdi)              # imm = 0x400
	.loc	0 893 3                         # liblzma/lzma/lzma_decoder.c:893:3
	movw	$1024, 25024(%rdi)              # imm = 0x400
	.loc	0 894 3                         # liblzma/lzma/lzma_decoder.c:894:3
	movw	$1024, 25048(%rdi)              # imm = 0x400
	xorl	%eax, %eax
.Ltmp2548:
	#DEBUG_VALUE: i <- 9
	#DEBUG_VALUE: j <- 0
	.p2align	4, 0x90
.LBB2_21:                               # %for.body15.9
                                        # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: lzma_decoder_reset:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:opt <- $rsi
	#DEBUG_VALUE: lzma_decoder_reset:coder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:options <- $rsi
	#DEBUG_VALUE: i <- 9
	#DEBUG_VALUE: j <- $eax
	.loc	0 887 4                         # liblzma/lzma/lzma_decoder.c:887:4
	movl	%eax, %ecx
	movw	$1024, 24864(%rdi,%rcx,2)       # imm = 0x400
	.loc	0 888 4                         # liblzma/lzma/lzma_decoder.c:888:4
	movw	$1024, 25344(%rdi,%rcx,2)       # imm = 0x400
.Ltmp2549:
	.loc	0 886 46                        # liblzma/lzma/lzma_decoder.c:886:46
	incl	%eax
.Ltmp2550:
	#DEBUG_VALUE: j <- $ecx
	#DEBUG_VALUE: j <- $eax
	.loc	0 886 26 is_stmt 0              # liblzma/lzma/lzma_decoder.c:886:26
	cmpl	28300(%rdi), %eax
.Ltmp2551:
	.loc	0 886 3                         # liblzma/lzma/lzma_decoder.c:886:3
	jbe	.LBB2_21
.Ltmp2552:
# %bb.22:                               # %for.cond.cleanup14.9
	#DEBUG_VALUE: lzma_decoder_reset:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:opt <- $rsi
	#DEBUG_VALUE: lzma_decoder_reset:coder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:options <- $rsi
	#DEBUG_VALUE: i <- 9
	#DEBUG_VALUE: j <- $eax
	.loc	0 891 3 is_stmt 1               # liblzma/lzma/lzma_decoder.c:891:3
	movw	$1024, 24978(%rdi)              # imm = 0x400
	.loc	0 892 3                         # liblzma/lzma/lzma_decoder.c:892:3
	movw	$1024, 25002(%rdi)              # imm = 0x400
	.loc	0 893 3                         # liblzma/lzma/lzma_decoder.c:893:3
	movw	$1024, 25026(%rdi)              # imm = 0x400
	.loc	0 894 3                         # liblzma/lzma/lzma_decoder.c:894:3
	movw	$1024, 25050(%rdi)              # imm = 0x400
	xorl	%eax, %eax
.Ltmp2553:
	#DEBUG_VALUE: i <- 10
	#DEBUG_VALUE: j <- 0
	.p2align	4, 0x90
.LBB2_23:                               # %for.body15.10
                                        # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: lzma_decoder_reset:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:opt <- $rsi
	#DEBUG_VALUE: lzma_decoder_reset:coder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:options <- $rsi
	#DEBUG_VALUE: i <- 10
	#DEBUG_VALUE: j <- $eax
	.loc	0 887 4                         # liblzma/lzma/lzma_decoder.c:887:4
	movl	%eax, %ecx
	movw	$1024, 24896(%rdi,%rcx,2)       # imm = 0x400
	.loc	0 888 4                         # liblzma/lzma/lzma_decoder.c:888:4
	movw	$1024, 25376(%rdi,%rcx,2)       # imm = 0x400
.Ltmp2554:
	.loc	0 886 46                        # liblzma/lzma/lzma_decoder.c:886:46
	incl	%eax
.Ltmp2555:
	#DEBUG_VALUE: j <- $ecx
	#DEBUG_VALUE: j <- $eax
	.loc	0 886 26 is_stmt 0              # liblzma/lzma/lzma_decoder.c:886:26
	cmpl	28300(%rdi), %eax
.Ltmp2556:
	.loc	0 886 3                         # liblzma/lzma/lzma_decoder.c:886:3
	jbe	.LBB2_23
.Ltmp2557:
# %bb.24:                               # %for.cond.cleanup14.10
	#DEBUG_VALUE: lzma_decoder_reset:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:opt <- $rsi
	#DEBUG_VALUE: lzma_decoder_reset:coder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:options <- $rsi
	#DEBUG_VALUE: i <- 10
	#DEBUG_VALUE: j <- $eax
	.loc	0 891 3 is_stmt 1               # liblzma/lzma/lzma_decoder.c:891:3
	movw	$1024, 24980(%rdi)              # imm = 0x400
	.loc	0 892 3                         # liblzma/lzma/lzma_decoder.c:892:3
	movw	$1024, 25004(%rdi)              # imm = 0x400
	.loc	0 893 3                         # liblzma/lzma/lzma_decoder.c:893:3
	movw	$1024, 25028(%rdi)              # imm = 0x400
	.loc	0 894 3                         # liblzma/lzma/lzma_decoder.c:894:3
	movw	$1024, 25052(%rdi)              # imm = 0x400
	xorl	%eax, %eax
.Ltmp2558:
	#DEBUG_VALUE: i <- 11
	#DEBUG_VALUE: j <- 0
	.p2align	4, 0x90
.LBB2_25:                               # %for.body15.11
                                        # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: lzma_decoder_reset:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:opt <- $rsi
	#DEBUG_VALUE: lzma_decoder_reset:coder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:options <- $rsi
	#DEBUG_VALUE: i <- 11
	#DEBUG_VALUE: j <- $eax
	.loc	0 887 4                         # liblzma/lzma/lzma_decoder.c:887:4
	movl	%eax, %ecx
	movw	$1024, 24928(%rdi,%rcx,2)       # imm = 0x400
	.loc	0 888 4                         # liblzma/lzma/lzma_decoder.c:888:4
	movw	$1024, 25408(%rdi,%rcx,2)       # imm = 0x400
.Ltmp2559:
	.loc	0 886 46                        # liblzma/lzma/lzma_decoder.c:886:46
	incl	%eax
.Ltmp2560:
	#DEBUG_VALUE: j <- $ecx
	#DEBUG_VALUE: j <- $eax
	.loc	0 886 26 is_stmt 0              # liblzma/lzma/lzma_decoder.c:886:26
	cmpl	28300(%rdi), %eax
.Ltmp2561:
	.loc	0 886 3                         # liblzma/lzma/lzma_decoder.c:886:3
	jbe	.LBB2_25
.Ltmp2562:
# %bb.26:                               # %for.cond.cleanup14.11
	#DEBUG_VALUE: lzma_decoder_reset:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:opt <- $rsi
	#DEBUG_VALUE: lzma_decoder_reset:coder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:options <- $rsi
	#DEBUG_VALUE: i <- 11
	.loc	0 891 3 is_stmt 1               # liblzma/lzma/lzma_decoder.c:891:3
	movw	$1024, 24982(%rdi)              # imm = 0x400
	.loc	0 892 3                         # liblzma/lzma/lzma_decoder.c:892:3
	movw	$1024, 25006(%rdi)              # imm = 0x400
	.loc	0 893 3                         # liblzma/lzma/lzma_decoder.c:893:3
	movw	$1024, 25030(%rdi)              # imm = 0x400
	.loc	0 894 3                         # liblzma/lzma/lzma_decoder.c:894:3
	movw	$1024, 25054(%rdi)              # imm = 0x400
.Ltmp2563:
	#DEBUG_VALUE: i <- 12
	#DEBUG_VALUE: i <- 0
	.loc	0 898 3                         # liblzma/lzma/lzma_decoder.c:898:3
	movups	%xmm0, 25440(%rdi)
	movups	%xmm0, 25456(%rdi)
	movups	%xmm0, 25472(%rdi)
	movups	%xmm0, 25488(%rdi)
	movups	%xmm0, 25504(%rdi)
	movups	%xmm0, 25520(%rdi)
	movups	%xmm0, 25536(%rdi)
	movups	%xmm0, 25552(%rdi)
	movups	%xmm0, 25568(%rdi)
	movups	%xmm0, 25584(%rdi)
	movups	%xmm0, 25600(%rdi)
	movups	%xmm0, 25616(%rdi)
	movups	%xmm0, 25632(%rdi)
	movups	%xmm0, 25648(%rdi)
	movups	%xmm0, 25664(%rdi)
	movups	%xmm0, 25680(%rdi)
	movups	%xmm0, 25696(%rdi)
	movups	%xmm0, 25712(%rdi)
	movups	%xmm0, 25728(%rdi)
	movups	%xmm0, 25744(%rdi)
	movups	%xmm0, 25760(%rdi)
	movups	%xmm0, 25776(%rdi)
	movups	%xmm0, 25792(%rdi)
	movups	%xmm0, 25808(%rdi)
	movups	%xmm0, 25824(%rdi)
	movups	%xmm0, 25840(%rdi)
	movups	%xmm0, 25856(%rdi)
	movups	%xmm0, 25872(%rdi)
	movups	%xmm0, 25888(%rdi)
	movups	%xmm0, 25904(%rdi)
	movups	%xmm0, 25920(%rdi)
	movups	%xmm0, 25936(%rdi)
.Ltmp2564:
	#DEBUG_VALUE: i <- 0
	.loc	0 901 3                         # liblzma/lzma/lzma_decoder.c:901:3
	movups	%xmm0, 25952(%rdi)
	movups	%xmm0, 25968(%rdi)
	movups	%xmm0, 25984(%rdi)
	movups	%xmm0, 26000(%rdi)
	movups	%xmm0, 26016(%rdi)
	movups	%xmm0, 26032(%rdi)
	movups	%xmm0, 26048(%rdi)
	movups	%xmm0, 26064(%rdi)
	movups	%xmm0, 26080(%rdi)
	movups	%xmm0, 26096(%rdi)
	movups	%xmm0, 26112(%rdi)
	movups	%xmm0, 26128(%rdi)
.Ltmp2565:
	#DEBUG_VALUE: i <- 96
	movups	%xmm0, 26144(%rdi)
.Ltmp2566:
	#DEBUG_VALUE: i <- 97
	#DEBUG_VALUE: i <- 98
	#DEBUG_VALUE: i <- 99
	#DEBUG_VALUE: i <- 100
	#DEBUG_VALUE: i <- 101
	#DEBUG_VALUE: i <- 102
	#DEBUG_VALUE: i <- 103
	#DEBUG_VALUE: i <- 104
	movups	%xmm0, 26160(%rdi)
.Ltmp2567:
	#DEBUG_VALUE: i <- 105
	#DEBUG_VALUE: i <- 106
	#DEBUG_VALUE: i <- 107
	#DEBUG_VALUE: i <- 108
	#DEBUG_VALUE: i <- 109
	#DEBUG_VALUE: i <- 110
	#DEBUG_VALUE: i <- 111
	#DEBUG_VALUE: i <- 112
	movl	$67109888, 26176(%rdi)          # imm = 0x4000400
.Ltmp2568:
	#DEBUG_VALUE: i <- 113
	#DEBUG_VALUE: i <- 114
	#DEBUG_VALUE: bt_i <- 7
	.loc	0 903 2                         # liblzma/lzma/lzma_decoder.c:903:2
	movups	%xmm0, 26180(%rdi)
.Ltmp2569:
	#DEBUG_VALUE: bt_i <- 8
	#DEBUG_VALUE: bt_i <- 15
	movups	%xmm0, 26196(%rdi)
.Ltmp2570:
	#DEBUG_VALUE: bt_i <- 16
	.loc	0 906 49                        # liblzma/lzma/lzma_decoder.c:906:49
	movl	28(%rsi), %ecx
.Ltmp2571:
	#DEBUG_VALUE: lzma_decoder_reset:num_pos_states <- [DW_OP_LLVM_arg 0, DW_OP_LLVM_arg 1, DW_OP_shl, DW_OP_stack_value] 1, $ecx
	.loc	0 907 2                         # liblzma/lzma/lzma_decoder.c:907:2
	movl	$67109888, 26212(%rdi)          # imm = 0x4000400
	.loc	0 909 2                         # liblzma/lzma/lzma_decoder.c:909:2
	movl	$67109888, 27240(%rdi)          # imm = 0x4000400
	#DEBUG_VALUE: pos_state <- 0
	leaq	26216(%rdi), %rax
	leaq	26472(%rdi), %rdx
	leaq	27244(%rdi), %rsi
.Ltmp2572:
	#DEBUG_VALUE: lzma_decoder_reset:opt <- [DW_OP_LLVM_entry_value 1] $rsi
	.loc	0 0 2 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:2
	leaq	27500(%rdi), %r8
	movl	$1, %r9d
.Ltmp2573:
	.p2align	4, 0x90
.LBB2_27:                               # %for.cond83.preheader
                                        # =>This Inner Loop Header: Depth=1
	#DEBUG_VALUE: lzma_decoder_reset:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:opt <- [DW_OP_LLVM_entry_value 1] $rsi
	#DEBUG_VALUE: lzma_decoder_reset:coder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:num_pos_states <- [DW_OP_LLVM_arg 0, DW_OP_LLVM_arg 1, DW_OP_shl, DW_OP_stack_value] 1, $ecx
	#DEBUG_VALUE: pos_state <- [DW_OP_constu 1, DW_OP_minus, DW_OP_stack_value] $r9d
	leal	-1(%r9), %r10d
.Ltmp2574:
	#DEBUG_VALUE: bt_i <- 0
	.loc	0 913 3 is_stmt 1               # liblzma/lzma/lzma_decoder.c:913:3
	shlq	$4, %r10
.Ltmp2575:
	#DEBUG_VALUE: bt_i <- 7
	movups	%xmm0, (%rax,%r10)
.Ltmp2576:
	#DEBUG_VALUE: bt_i <- 8
	#DEBUG_VALUE: bt_i <- 0
	#DEBUG_VALUE: bt_i <- 7
	.loc	0 915 3                         # liblzma/lzma/lzma_decoder.c:915:3
	movups	%xmm0, (%rdx,%r10)
.Ltmp2577:
	#DEBUG_VALUE: bt_i <- 8
	#DEBUG_VALUE: bt_i <- 0
	#DEBUG_VALUE: bt_i <- 7
	#DEBUG_VALUE: pos_state <- $r9d
	.loc	0 912 41                        # liblzma/lzma/lzma_decoder.c:912:41
	movl	%r9d, %r11d
	shrl	%cl, %r11d
.Ltmp2578:
	.loc	0 918 3                         # liblzma/lzma/lzma_decoder.c:918:3
	movups	%xmm0, (%rsi,%r10)
.Ltmp2579:
	#DEBUG_VALUE: bt_i <- 8
	#DEBUG_VALUE: bt_i <- 0
	#DEBUG_VALUE: bt_i <- 7
	.loc	0 920 3                         # liblzma/lzma/lzma_decoder.c:920:3
	movups	%xmm0, (%r8,%r10)
.Ltmp2580:
	#DEBUG_VALUE: bt_i <- 8
	.loc	0 912 2                         # liblzma/lzma/lzma_decoder.c:912:2
	incl	%r9d
.Ltmp2581:
	.loc	0 912 41 is_stmt 0              # liblzma/lzma/lzma_decoder.c:912:41
	testl	%r11d, %r11d
.Ltmp2582:
	.loc	0 912 2                         # liblzma/lzma/lzma_decoder.c:912:2
	je	.LBB2_27
.Ltmp2583:
# %bb.28:                               # %vector.body315
	#DEBUG_VALUE: lzma_decoder_reset:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:opt <- [DW_OP_LLVM_entry_value 1] $rsi
	#DEBUG_VALUE: lzma_decoder_reset:coder <- $rdi
	#DEBUG_VALUE: lzma_decoder_reset:num_pos_states <- [DW_OP_LLVM_arg 0, DW_OP_LLVM_arg 1, DW_OP_shl, DW_OP_stack_value] 1, $ecx
	#DEBUG_VALUE: bt_i <- 0
	.loc	0 924 2 is_stmt 1               # liblzma/lzma/lzma_decoder.c:924:2
	movups	%xmm0, 26728(%rdi)
	movups	%xmm0, 26744(%rdi)
	movups	%xmm0, 26760(%rdi)
	movups	%xmm0, 26776(%rdi)
	movups	%xmm0, 26792(%rdi)
	movups	%xmm0, 26808(%rdi)
	movups	%xmm0, 26824(%rdi)
	movups	%xmm0, 26840(%rdi)
	movups	%xmm0, 26856(%rdi)
	movups	%xmm0, 26872(%rdi)
	movups	%xmm0, 26888(%rdi)
	movups	%xmm0, 26904(%rdi)
	movups	%xmm0, 26920(%rdi)
	movups	%xmm0, 26936(%rdi)
	movups	%xmm0, 26952(%rdi)
	movups	%xmm0, 26968(%rdi)
	movups	%xmm0, 26984(%rdi)
	movups	%xmm0, 27000(%rdi)
	movups	%xmm0, 27016(%rdi)
	movups	%xmm0, 27032(%rdi)
	movups	%xmm0, 27048(%rdi)
	movups	%xmm0, 27064(%rdi)
	movups	%xmm0, 27080(%rdi)
	movups	%xmm0, 27096(%rdi)
	movups	%xmm0, 27112(%rdi)
	movups	%xmm0, 27128(%rdi)
	movups	%xmm0, 27144(%rdi)
	movups	%xmm0, 27160(%rdi)
	movups	%xmm0, 27176(%rdi)
	movups	%xmm0, 27192(%rdi)
	movups	%xmm0, 27208(%rdi)
	movups	%xmm0, 27224(%rdi)
.Ltmp2584:
	#DEBUG_VALUE: bt_i <- 0
	.loc	0 925 2                         # liblzma/lzma/lzma_decoder.c:925:2
	movups	%xmm0, 27756(%rdi)
	movups	%xmm0, 27772(%rdi)
	movups	%xmm0, 27788(%rdi)
	movups	%xmm0, 27804(%rdi)
	movups	%xmm0, 27820(%rdi)
	movups	%xmm0, 27836(%rdi)
	movups	%xmm0, 27852(%rdi)
	movups	%xmm0, 27868(%rdi)
	movups	%xmm0, 27884(%rdi)
	movups	%xmm0, 27900(%rdi)
	movups	%xmm0, 27916(%rdi)
	movups	%xmm0, 27932(%rdi)
	movups	%xmm0, 27948(%rdi)
	movups	%xmm0, 27964(%rdi)
	movups	%xmm0, 27980(%rdi)
	movups	%xmm0, 27996(%rdi)
	movups	%xmm0, 28012(%rdi)
	movups	%xmm0, 28028(%rdi)
	movups	%xmm0, 28044(%rdi)
	movups	%xmm0, 28060(%rdi)
	movups	%xmm0, 28076(%rdi)
	movups	%xmm0, 28092(%rdi)
	movups	%xmm0, 28108(%rdi)
	movups	%xmm0, 28124(%rdi)
	movups	%xmm0, 28140(%rdi)
	movups	%xmm0, 28156(%rdi)
	movups	%xmm0, 28172(%rdi)
	movups	%xmm0, 28188(%rdi)
	movups	%xmm0, 28204(%rdi)
	movups	%xmm0, 28220(%rdi)
	movups	%xmm0, 28236(%rdi)
	movups	%xmm0, 28252(%rdi)
.Ltmp2585:
	.loc	0 927 18                        # liblzma/lzma/lzma_decoder.c:927:18
	movl	$1, 28320(%rdi)
	.loc	0 929 16                        # liblzma/lzma/lzma_decoder.c:929:16
	xorps	%xmm0, %xmm0
	movups	%xmm0, 28328(%rdi)
	movq	$0, 28344(%rdi)
	.loc	0 935 1                         # liblzma/lzma/lzma_decoder.c:935:1
	retq
.Ltmp2586:
.Lfunc_end2:
	.size	lzma_decoder_reset, .Lfunc_end2-lzma_decoder_reset
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90                         # -- Begin function lzma_decoder_uncompressed
	.type	lzma_decoder_uncompressed,@function
lzma_decoder_uncompressed:              # @lzma_decoder_uncompressed
.Lfunc_begin3:
	.cfi_startproc
# %bb.0:                                # %entry
	#DEBUG_VALUE: lzma_decoder_uncompressed:pcoder <- $rdi
	#DEBUG_VALUE: lzma_decoder_uncompressed:uncompressed_size <- $rsi
	#DEBUG_VALUE: lzma_decoder_uncompressed:coder <- $rdi
	.loc	0 843 27 prologue_end           # liblzma/lzma/lzma_decoder.c:843:27
	movq	%rsi, 28312(%rdi)
	.loc	0 844 1                         # liblzma/lzma/lzma_decoder.c:844:1
	retq
.Ltmp2587:
.Lfunc_end3:
	.size	lzma_decoder_uncompressed, .Lfunc_end3-lzma_decoder_uncompressed
	.cfi_endproc
                                        # -- End function
	.globl	lzma_lzma_decoder_init          # -- Begin function lzma_lzma_decoder_init
	.p2align	4, 0x90
	.type	lzma_lzma_decoder_init,@function
lzma_lzma_decoder_init:                 # @lzma_lzma_decoder_init
.Lfunc_begin4:
	.cfi_startproc
# %bb.0:                                # %entry
	#DEBUG_VALUE: lzma_lzma_decoder_init:next <- $rdi
	#DEBUG_VALUE: lzma_lzma_decoder_init:allocator <- $rsi
	#DEBUG_VALUE: lzma_lzma_decoder_init:filters <- $rdx
	.loc	0 991 9 prologue_end            # liblzma/lzma/lzma_decoder.c:991:9
	movl	$lzma_decoder_init, %ecx
.Ltmp2588:
	jmp	lzma_lz_decoder_init@PLT        # TAILCALL
.Ltmp2589:
.Lfunc_end4:
	.size	lzma_lzma_decoder_init, .Lfunc_end4-lzma_lzma_decoder_init
	.cfi_endproc
	.file	13 "/usr/include" "stdint.h" md5 0xa48e64edacc5b19f56c99745232c963c
	.file	14 "liblzma/api/lzma" "filter.h" md5 0x5eb86d86854a7619ed1d1ac1b57b2484
                                        # -- End function
	.p2align	4, 0x90                         # -- Begin function lzma_decoder_init
	.type	lzma_decoder_init,@function
lzma_decoder_init:                      # @lzma_decoder_init
.Lfunc_begin5:
	.cfi_startproc
# %bb.0:                                # %entry
	#DEBUG_VALUE: lzma_decoder_init:lz <- $rdi
	#DEBUG_VALUE: lzma_decoder_init:allocator <- $rsi
	#DEBUG_VALUE: lzma_decoder_init:options <- $rdx
	#DEBUG_VALUE: lzma_decoder_init:lz_options <- $rcx
	#DEBUG_VALUE: is_lclppb_valid:options <- $rdx
	.loc	1 35 18 prologue_end            # liblzma/lzma/lzma_common.h:35:18
	movl	20(%rdx), %r8d
	movl	$11, %eax
	.loc	1 35 21 is_stmt 0               # liblzma/lzma/lzma_common.h:35:21
	cmpl	$4, %r8d
	.loc	1 35 38                         # liblzma/lzma/lzma_common.h:35:38
	ja	.LBB5_9
.Ltmp2590:
# %bb.1:                                # %land.lhs.true.i
	#DEBUG_VALUE: lzma_decoder_init:lz <- $rdi
	#DEBUG_VALUE: lzma_decoder_init:allocator <- $rsi
	#DEBUG_VALUE: lzma_decoder_init:options <- $rdx
	#DEBUG_VALUE: lzma_decoder_init:lz_options <- $rcx
	#DEBUG_VALUE: is_lclppb_valid:options <- $rdx
	.loc	1 35 50                         # liblzma/lzma/lzma_common.h:35:50
	movl	24(%rdx), %r9d
	.loc	1 35 53                         # liblzma/lzma/lzma_common.h:35:53
	cmpl	$5, %r9d
	setb	%r10b
	addl	%r9d, %r8d
	cmpl	$5, %r8d
	setb	%r8b
	.loc	1 36 4 is_stmt 1                # liblzma/lzma/lzma_common.h:36:4
	andb	%r10b, %r8b
	cmpb	$1, %r8b
	jne	.LBB5_9
.Ltmp2591:
# %bb.2:                                # %is_lclppb_valid.exit
	#DEBUG_VALUE: lzma_decoder_init:lz <- $rdi
	#DEBUG_VALUE: lzma_decoder_init:allocator <- $rsi
	#DEBUG_VALUE: lzma_decoder_init:options <- $rdx
	#DEBUG_VALUE: lzma_decoder_init:lz_options <- $rcx
	#DEBUG_VALUE: is_lclppb_valid:options <- $rdx
	.loc	1 37 19                         # liblzma/lzma/lzma_common.h:37:19
	cmpl	$4, 28(%rdx)
.Ltmp2592:
	.loc	0 970 6                         # liblzma/lzma/lzma_decoder.c:970:6
	ja	.LBB5_9
.Ltmp2593:
# %bb.3:                                # %do.body
	#DEBUG_VALUE: lzma_decoder_init:lz <- $rdi
	#DEBUG_VALUE: lzma_decoder_init:allocator <- $rsi
	#DEBUG_VALUE: lzma_decoder_init:options <- $rdx
	#DEBUG_VALUE: lzma_decoder_init:lz_options <- $rcx
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
.Ltmp2594:
	#DEBUG_VALUE: lzma_lzma_decoder_create:lz <- $rdi
	#DEBUG_VALUE: lzma_lzma_decoder_create:allocator <- $rsi
	#DEBUG_VALUE: lzma_lzma_decoder_create:opt <- $rdx
	#DEBUG_VALUE: lzma_lzma_decoder_create:lz_options <- $rcx
	.loc	0 942 16                        # liblzma/lzma/lzma_decoder.c:942:16
	cmpq	$0, (%rdi)
.Ltmp2595:
	.loc	0 942 6 is_stmt 0               # liblzma/lzma/lzma_decoder.c:942:6
	jne	.LBB5_7
.Ltmp2596:
# %bb.4:                                # %if.then.i
	#DEBUG_VALUE: lzma_decoder_init:lz <- $rdi
	#DEBUG_VALUE: lzma_decoder_init:allocator <- $rsi
	#DEBUG_VALUE: lzma_decoder_init:options <- $rdx
	#DEBUG_VALUE: lzma_decoder_init:lz_options <- $rcx
	#DEBUG_VALUE: lzma_lzma_decoder_create:lz <- $rdi
	#DEBUG_VALUE: lzma_lzma_decoder_create:allocator <- $rsi
	#DEBUG_VALUE: lzma_lzma_decoder_create:opt <- $rdx
	#DEBUG_VALUE: lzma_lzma_decoder_create:lz_options <- $rcx
	.loc	0 0 6                           # liblzma/lzma/lzma_decoder.c:0:6
	movq	%rcx, %rbx
.Ltmp2597:
	#DEBUG_VALUE: lzma_lzma_decoder_create:lz_options <- $rbx
	#DEBUG_VALUE: lzma_decoder_init:lz_options <- $rbx
	movq	%rdx, %r14
.Ltmp2598:
	#DEBUG_VALUE: lzma_lzma_decoder_create:opt <- $r14
	#DEBUG_VALUE: lzma_decoder_init:options <- $r14
	movq	%rdi, %r15
.Ltmp2599:
	#DEBUG_VALUE: lzma_lzma_decoder_create:lz <- $r15
	#DEBUG_VALUE: lzma_decoder_init:lz <- $r15
	.loc	0 943 15 is_stmt 1              # liblzma/lzma/lzma_decoder.c:943:15
	movl	$28352, %edi                    # imm = 0x6EC0
	callq	lzma_alloc@PLT
.Ltmp2600:
	#DEBUG_VALUE: lzma_decoder_init:allocator <- [DW_OP_LLVM_entry_value 1] $rsi
	.loc	0 943 13 is_stmt 0              # liblzma/lzma/lzma_decoder.c:943:13
	movq	%rax, (%r15)
.Ltmp2601:
	.loc	0 944 17 is_stmt 1              # liblzma/lzma/lzma_decoder.c:944:17
	testq	%rax, %rax
.Ltmp2602:
	.loc	0 944 7 is_stmt 0               # liblzma/lzma/lzma_decoder.c:944:7
	je	.LBB5_5
.Ltmp2603:
# %bb.6:                                # %if.end.i
	#DEBUG_VALUE: lzma_decoder_init:lz <- $r15
	#DEBUG_VALUE: lzma_decoder_init:allocator <- [DW_OP_LLVM_entry_value 1] $rsi
	#DEBUG_VALUE: lzma_decoder_init:options <- $r14
	#DEBUG_VALUE: lzma_decoder_init:lz_options <- $rbx
	#DEBUG_VALUE: lzma_lzma_decoder_create:lz <- $r15
	#DEBUG_VALUE: lzma_lzma_decoder_create:opt <- $r14
	#DEBUG_VALUE: lzma_lzma_decoder_create:lz_options <- $rbx
	.loc	0 0 7                           # liblzma/lzma/lzma_decoder.c:0:7
	movq	%r15, %rdi
	.loc	0 947 12 is_stmt 1              # liblzma/lzma/lzma_decoder.c:947:12
	movq	$lzma_decode, 8(%r15)
	.loc	0 948 13                        # liblzma/lzma/lzma_decoder.c:948:13
	movq	$lzma_decoder_reset, 16(%r15)
	.loc	0 949 24                        # liblzma/lzma/lzma_decoder.c:949:24
	movq	$lzma_decoder_uncompressed, 24(%r15)
	movq	%r14, %rdx
	movq	%rbx, %rcx
.Ltmp2604:
.LBB5_7:                                # %do.end
	#DEBUG_VALUE: lzma_decoder_init:lz <- $rdi
	#DEBUG_VALUE: lzma_decoder_init:allocator <- [DW_OP_LLVM_entry_value 1] $rsi
	#DEBUG_VALUE: lzma_decoder_init:options <- $rdx
	#DEBUG_VALUE: lzma_decoder_init:lz_options <- $rcx
	#DEBUG_VALUE: lzma_lzma_decoder_create:lz <- $rdi
	#DEBUG_VALUE: lzma_lzma_decoder_create:opt <- $rdx
	#DEBUG_VALUE: lzma_lzma_decoder_create:lz_options <- $rcx
	#DEBUG_VALUE: lzma_lzma_decoder_create:options <- $rdx
	.loc	0 955 35                        # liblzma/lzma/lzma_decoder.c:955:35
	movl	(%rdx), %eax
	.loc	0 955 24 is_stmt 0              # liblzma/lzma/lzma_decoder.c:955:24
	movq	%rax, (%rcx)
	.loc	0 956 37 is_stmt 1              # liblzma/lzma/lzma_decoder.c:956:37
	movq	8(%rdx), %rax
	.loc	0 956 26 is_stmt 0              # liblzma/lzma/lzma_decoder.c:956:26
	movq	%rax, 8(%rcx)
	.loc	0 957 42 is_stmt 1              # liblzma/lzma/lzma_decoder.c:957:42
	movl	16(%rdx), %eax
	.loc	0 957 31 is_stmt 0              # liblzma/lzma/lzma_decoder.c:957:31
	movq	%rax, 16(%rcx)
.Ltmp2605:
	#DEBUG_VALUE: ret_ <- 0
	.loc	0 976 25 is_stmt 1              # liblzma/lzma/lzma_decoder.c:976:25
	movq	(%rdi), %rax
	movq	%rdi, %rbx
.Ltmp2606:
	#DEBUG_VALUE: lzma_lzma_decoder_create:lz <- $rbx
	#DEBUG_VALUE: lzma_decoder_init:lz <- $rbx
	.loc	0 976 2 is_stmt 0               # liblzma/lzma/lzma_decoder.c:976:2
	movq	%rax, %rdi
	movq	%rdx, %rsi
	callq	lzma_decoder_reset
.Ltmp2607:
	#DEBUG_VALUE: lzma_decoder_init:options <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decoder_init:lz_options <- [DW_OP_LLVM_entry_value 1] $rcx
	.loc	0 977 32 is_stmt 1              # liblzma/lzma/lzma_decoder.c:977:32
	movq	(%rbx), %rax
.Ltmp2608:
	#DEBUG_VALUE: lzma_decoder_uncompressed:pcoder <- $rax
	#DEBUG_VALUE: lzma_decoder_uncompressed:coder <- $rax
	#DEBUG_VALUE: lzma_decoder_uncompressed:uncompressed_size <- -1
	.loc	0 843 27                        # liblzma/lzma/lzma_decoder.c:843:27
	movq	$-1, 28312(%rax)
	xorl	%eax, %eax
.Ltmp2609:
.LBB5_8:
	#DEBUG_VALUE: lzma_decoder_init:lz <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decoder_init:allocator <- [DW_OP_LLVM_entry_value 1] $rsi
	#DEBUG_VALUE: lzma_decoder_init:options <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decoder_init:lz_options <- [DW_OP_LLVM_entry_value 1] $rcx
	.loc	0 0 27 is_stmt 0                # liblzma/lzma/lzma_decoder.c:0:27
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	.cfi_restore %rbx
	.cfi_restore %r14
	.cfi_restore %r15
.Ltmp2610:
.LBB5_9:                                # %return
	#DEBUG_VALUE: lzma_decoder_init:lz <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_decoder_init:allocator <- [DW_OP_LLVM_entry_value 1] $rsi
	#DEBUG_VALUE: lzma_decoder_init:options <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_decoder_init:lz_options <- [DW_OP_LLVM_entry_value 1] $rcx
	.loc	0 980 1 is_stmt 1               # liblzma/lzma/lzma_decoder.c:980:1
	retq
.Ltmp2611:
.LBB5_5:
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	#DEBUG_VALUE: lzma_decoder_init:lz <- $r15
	#DEBUG_VALUE: lzma_decoder_init:allocator <- [DW_OP_LLVM_entry_value 1] $rsi
	#DEBUG_VALUE: lzma_decoder_init:options <- $r14
	#DEBUG_VALUE: lzma_decoder_init:lz_options <- $rbx
	#DEBUG_VALUE: lzma_lzma_decoder_create:lz <- $r15
	#DEBUG_VALUE: lzma_lzma_decoder_create:opt <- $r14
	#DEBUG_VALUE: lzma_lzma_decoder_create:lz_options <- $rbx
	.loc	0 0 1 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:1
	movl	$5, %eax
.Ltmp2612:
	.loc	0 944 7 is_stmt 1               # liblzma/lzma/lzma_decoder.c:944:7
	jmp	.LBB5_8
.Ltmp2613:
.Lfunc_end5:
	.size	lzma_decoder_init, .Lfunc_end5-lzma_decoder_init
	.cfi_endproc
                                        # -- End function
	.globl	lzma_lzma_lclppb_decode         # -- Begin function lzma_lzma_lclppb_decode
	.p2align	4, 0x90
	.type	lzma_lzma_lclppb_decode,@function
lzma_lzma_lclppb_decode:                # @lzma_lzma_lclppb_decode
.Lfunc_begin6:
	.loc	0 998 0                         # liblzma/lzma/lzma_decoder.c:998:0
	.cfi_startproc
# %bb.0:                                # %entry
	#DEBUG_VALUE: lzma_lzma_lclppb_decode:options <- $rdi
	#DEBUG_VALUE: lzma_lzma_lclppb_decode:byte <- $esi
	movb	$1, %al
.Ltmp2614:
	.loc	0 999 11 prologue_end           # liblzma/lzma/lzma_decoder.c:999:11
	cmpb	$-32, %sil
.Ltmp2615:
	.loc	0 999 6 is_stmt 0               # liblzma/lzma/lzma_decoder.c:999:6
	ja	.LBB6_2
.Ltmp2616:
# %bb.1:                                # %if.end
	#DEBUG_VALUE: lzma_lzma_lclppb_decode:options <- $rdi
	#DEBUG_VALUE: lzma_lzma_lclppb_decode:byte <- $esi
	.loc	0 1003 21 is_stmt 1             # liblzma/lzma/lzma_decoder.c:1003:21
	movzbl	%sil, %eax
	imull	$109, %eax, %eax
	shrl	$8, %eax
	movl	%esi, %ecx
	subb	%al, %cl
	shrb	%cl
	addb	%al, %cl
	shrb	$5, %cl
	movzbl	%cl, %eax
	.loc	0 1003 14 is_stmt 0             # liblzma/lzma/lzma_decoder.c:1003:14
	movl	%eax, 28(%rdi)
	.loc	0 1004 7 is_stmt 1              # liblzma/lzma/lzma_decoder.c:1004:7
	imull	$-45, %eax, %eax
	addb	%sil, %al
.Ltmp2617:
	#DEBUG_VALUE: lzma_lzma_lclppb_decode:byte <- $al
	.loc	0 1005 16                       # liblzma/lzma/lzma_decoder.c:1005:16
	movzbl	%al, %eax
.Ltmp2618:
	.loc	0 1005 21 is_stmt 0             # liblzma/lzma/lzma_decoder.c:1005:21
	imull	$57, %eax, %ecx
	shrl	$9, %ecx
	.loc	0 1005 14                       # liblzma/lzma/lzma_decoder.c:1005:14
	movl	%ecx, 24(%rdi)
	.loc	0 1006 35 is_stmt 1             # liblzma/lzma/lzma_decoder.c:1006:35
	leal	(%rcx,%rcx,8), %edx
	.loc	0 1006 21 is_stmt 0             # liblzma/lzma/lzma_decoder.c:1006:21
	subl	%edx, %eax
	.loc	0 1006 14                       # liblzma/lzma/lzma_decoder.c:1006:14
	movl	%eax, 20(%rdi)
	.loc	0 1008 21 is_stmt 1             # liblzma/lzma/lzma_decoder.c:1008:21
	addl	%ecx, %eax
	.loc	0 1008 35 is_stmt 0             # liblzma/lzma/lzma_decoder.c:1008:35
	cmpl	$5, %eax
	setae	%al
.Ltmp2619:
.LBB6_2:                                # %return
	#DEBUG_VALUE: lzma_lzma_lclppb_decode:options <- $rdi
	.loc	0 1009 1 is_stmt 1              # liblzma/lzma/lzma_decoder.c:1009:1
	retq
.Ltmp2620:
.Lfunc_end6:
	.size	lzma_lzma_lclppb_decode, .Lfunc_end6-lzma_lzma_lclppb_decode
	.cfi_endproc
                                        # -- End function
	.globl	lzma_lzma_decoder_memusage_nocheck # -- Begin function lzma_lzma_decoder_memusage_nocheck
	.p2align	4, 0x90
	.type	lzma_lzma_decoder_memusage_nocheck,@function
lzma_lzma_decoder_memusage_nocheck:     # @lzma_lzma_decoder_memusage_nocheck
.Lfunc_begin7:
	.loc	0 1014 0                        # liblzma/lzma/lzma_decoder.c:1014:0
	.cfi_startproc
# %bb.0:                                # %entry
	#DEBUG_VALUE: lzma_lzma_decoder_memusage_nocheck:options <- $rdi
	pushq	%rax
	.cfi_def_cfa_offset 16
.Ltmp2621:
	#DEBUG_VALUE: lzma_lzma_decoder_memusage_nocheck:opt <- $rdi
	.loc	0 1016 69 prologue_end          # liblzma/lzma/lzma_decoder.c:1016:69
	movl	(%rdi), %edi
.Ltmp2622:
	#DEBUG_VALUE: lzma_lzma_decoder_memusage_nocheck:options <- [DW_OP_LLVM_entry_value 1] $rdi
	.loc	0 1016 39 is_stmt 0             # liblzma/lzma/lzma_decoder.c:1016:39
	callq	lzma_lz_decoder_memusage@PLT
.Ltmp2623:
	.loc	0 1016 37                       # liblzma/lzma/lzma_decoder.c:1016:37
	addq	$28352, %rax                    # imm = 0x6EC0
	.loc	0 1016 2 epilogue_begin         # liblzma/lzma/lzma_decoder.c:1016:2
	popq	%rcx
	.cfi_def_cfa_offset 8
	retq
.Ltmp2624:
.Lfunc_end7:
	.size	lzma_lzma_decoder_memusage_nocheck, .Lfunc_end7-lzma_lzma_decoder_memusage_nocheck
	.cfi_endproc
                                        # -- End function
	.globl	lzma_lzma_decoder_memusage      # -- Begin function lzma_lzma_decoder_memusage
	.p2align	4, 0x90
	.type	lzma_lzma_decoder_memusage,@function
lzma_lzma_decoder_memusage:             # @lzma_lzma_decoder_memusage
.Lfunc_begin8:
	.cfi_startproc
# %bb.0:                                # %entry
	#DEBUG_VALUE: lzma_lzma_decoder_memusage:options <- $rdi
	#DEBUG_VALUE: is_lclppb_valid:options <- $rdi
	.loc	1 35 18 prologue_end is_stmt 1  # liblzma/lzma/lzma_common.h:35:18
	movl	20(%rdi), %ecx
	movq	$-1, %rax
	.loc	1 35 21 is_stmt 0               # liblzma/lzma/lzma_common.h:35:21
	cmpl	$4, %ecx
	.loc	1 35 38                         # liblzma/lzma/lzma_common.h:35:38
	ja	.LBB8_4
.Ltmp2625:
# %bb.1:                                # %land.lhs.true.i
	#DEBUG_VALUE: lzma_lzma_decoder_memusage:options <- $rdi
	#DEBUG_VALUE: is_lclppb_valid:options <- $rdi
	.loc	1 35 50                         # liblzma/lzma/lzma_common.h:35:50
	movl	24(%rdi), %edx
	.loc	1 35 53                         # liblzma/lzma/lzma_common.h:35:53
	cmpl	$5, %edx
	setb	%sil
	addl	%edx, %ecx
	cmpl	$5, %ecx
	setb	%cl
	.loc	1 36 4 is_stmt 1                # liblzma/lzma/lzma_common.h:36:4
	andb	%sil, %cl
	cmpb	$1, %cl
	jne	.LBB8_4
.Ltmp2626:
# %bb.2:                                # %is_lclppb_valid.exit
	#DEBUG_VALUE: lzma_lzma_decoder_memusage:options <- $rdi
	#DEBUG_VALUE: is_lclppb_valid:options <- $rdi
	.loc	1 37 19                         # liblzma/lzma/lzma_common.h:37:19
	cmpl	$4, 28(%rdi)
.Ltmp2627:
	.loc	0 1023 6                        # liblzma/lzma/lzma_decoder.c:1023:6
	ja	.LBB8_4
.Ltmp2628:
# %bb.3:                                # %if.end
	#DEBUG_VALUE: lzma_lzma_decoder_memusage:options <- $rdi
	pushq	%rax
	.cfi_def_cfa_offset 16
.Ltmp2629:
	#DEBUG_VALUE: lzma_lzma_decoder_memusage_nocheck:options <- $rdi
	#DEBUG_VALUE: lzma_lzma_decoder_memusage_nocheck:opt <- $rdi
	.loc	0 1016 69                       # liblzma/lzma/lzma_decoder.c:1016:69
	movl	(%rdi), %edi
.Ltmp2630:
	#DEBUG_VALUE: lzma_lzma_decoder_memusage:options <- [DW_OP_LLVM_entry_value 1] $rdi
	.loc	0 1016 39 is_stmt 0             # liblzma/lzma/lzma_decoder.c:1016:39
	callq	lzma_lz_decoder_memusage@PLT
.Ltmp2631:
	.loc	0 1016 37                       # liblzma/lzma/lzma_decoder.c:1016:37
	addq	$28352, %rax                    # imm = 0x6EC0
	addq	$8, %rsp
.Ltmp2632:
	.cfi_def_cfa_offset 8
.LBB8_4:                                # %return
	#DEBUG_VALUE: lzma_lzma_decoder_memusage:options <- [DW_OP_LLVM_entry_value 1] $rdi
	.loc	0 1027 1 is_stmt 1              # liblzma/lzma/lzma_decoder.c:1027:1
	retq
.Ltmp2633:
.Lfunc_end8:
	.size	lzma_lzma_decoder_memusage, .Lfunc_end8-lzma_lzma_decoder_memusage
	.cfi_endproc
                                        # -- End function
	.globl	lzma_lzma_props_decode          # -- Begin function lzma_lzma_props_decode
	.p2align	4, 0x90
	.type	lzma_lzma_props_decode,@function
lzma_lzma_props_decode:                 # @lzma_lzma_props_decode
.Lfunc_begin9:
	.loc	0 1033 0                        # liblzma/lzma/lzma_decoder.c:1033:0
	.cfi_startproc
# %bb.0:                                # %entry
	#DEBUG_VALUE: lzma_lzma_props_decode:options <- $rdi
	#DEBUG_VALUE: lzma_lzma_props_decode:allocator <- $rsi
	#DEBUG_VALUE: lzma_lzma_props_decode:props <- $rdx
	#DEBUG_VALUE: lzma_lzma_props_decode:props_size <- $rcx
	movl	$8, %eax
.Ltmp2634:
	.loc	0 1034 17 prologue_end          # liblzma/lzma/lzma_decoder.c:1034:17
	cmpq	$5, %rcx
.Ltmp2635:
	.loc	0 1034 6 is_stmt 0              # liblzma/lzma/lzma_decoder.c:1034:6
	jne	.LBB9_8
.Ltmp2636:
# %bb.1:                                # %if.end
	#DEBUG_VALUE: lzma_lzma_props_decode:options <- $rdi
	#DEBUG_VALUE: lzma_lzma_props_decode:allocator <- $rsi
	#DEBUG_VALUE: lzma_lzma_props_decode:props <- $rdx
	#DEBUG_VALUE: lzma_lzma_props_decode:props_size <- $rcx
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rdx, %rbx
	movq	%rdi, %r15
.Ltmp2637:
	#DEBUG_VALUE: lzma_lzma_props_decode:options <- $r15
	.loc	0 1038 6 is_stmt 1              # liblzma/lzma/lzma_decoder.c:1038:6
	movl	$112, %edi
	movq	%rsi, %r14
	callq	lzma_alloc@PLT
.Ltmp2638:
	#DEBUG_VALUE: lzma_lzma_props_decode:props_size <- [DW_OP_LLVM_entry_value 1] $rcx
	#DEBUG_VALUE: lzma_lzma_props_decode:allocator <- $r14
	#DEBUG_VALUE: lzma_lzma_props_decode:props <- $rbx
	#DEBUG_VALUE: lzma_lzma_props_decode:opt <- $rax
	.loc	0 1039 10                       # liblzma/lzma/lzma_decoder.c:1039:10
	testq	%rax, %rax
.Ltmp2639:
	.loc	0 1039 6 is_stmt 0              # liblzma/lzma/lzma_decoder.c:1039:6
	je	.LBB9_2
.Ltmp2640:
# %bb.3:                                # %if.end3
	#DEBUG_VALUE: lzma_lzma_props_decode:options <- $r15
	#DEBUG_VALUE: lzma_lzma_props_decode:allocator <- $r14
	#DEBUG_VALUE: lzma_lzma_props_decode:props <- $rbx
	#DEBUG_VALUE: lzma_lzma_props_decode:props_size <- [DW_OP_LLVM_entry_value 1] $rcx
	#DEBUG_VALUE: lzma_lzma_props_decode:opt <- $rax
	.loc	0 1042 35 is_stmt 1             # liblzma/lzma/lzma_decoder.c:1042:35
	movzbl	(%rbx), %ecx
.Ltmp2641:
	#DEBUG_VALUE: lzma_lzma_lclppb_decode:byte <- $cl
	#DEBUG_VALUE: lzma_lzma_lclppb_decode:options <- $rax
	.loc	0 999 11                        # liblzma/lzma/lzma_decoder.c:999:11
	cmpb	$-32, %cl
.Ltmp2642:
	.loc	0 999 6 is_stmt 0               # liblzma/lzma/lzma_decoder.c:999:6
	ja	.LBB9_6
.Ltmp2643:
# %bb.4:                                # %lzma_lzma_lclppb_decode.exit
	#DEBUG_VALUE: lzma_lzma_props_decode:options <- $r15
	#DEBUG_VALUE: lzma_lzma_props_decode:allocator <- $r14
	#DEBUG_VALUE: lzma_lzma_props_decode:props <- $rbx
	#DEBUG_VALUE: lzma_lzma_props_decode:props_size <- [DW_OP_LLVM_entry_value 1] $rcx
	#DEBUG_VALUE: lzma_lzma_props_decode:opt <- $rax
	#DEBUG_VALUE: lzma_lzma_lclppb_decode:byte <- $cl
	#DEBUG_VALUE: lzma_lzma_lclppb_decode:options <- $rax
	.loc	0 1003 21 is_stmt 1             # liblzma/lzma/lzma_decoder.c:1003:21
	movzbl	%cl, %edx
	imull	$109, %edx, %edx
	shrl	$8, %edx
	movl	%ecx, %esi
	subb	%dl, %sil
	shrb	%sil
	addb	%dl, %sil
	shrb	$5, %sil
	movzbl	%sil, %edx
	.loc	0 1003 14 is_stmt 0             # liblzma/lzma/lzma_decoder.c:1003:14
	movl	%edx, 28(%rax)
	.loc	0 1004 7 is_stmt 1              # liblzma/lzma/lzma_decoder.c:1004:7
	imull	$-45, %edx, %edx
	addb	%cl, %dl
.Ltmp2644:
	#DEBUG_VALUE: lzma_lzma_lclppb_decode:byte <- $dl
	.loc	0 1005 16                       # liblzma/lzma/lzma_decoder.c:1005:16
	movzbl	%dl, %ecx
	.loc	0 1005 21 is_stmt 0             # liblzma/lzma/lzma_decoder.c:1005:21
	imull	$57, %ecx, %edx
.Ltmp2645:
	shrl	$9, %edx
	.loc	0 1005 14                       # liblzma/lzma/lzma_decoder.c:1005:14
	movl	%edx, 24(%rax)
	.loc	0 1006 35 is_stmt 1             # liblzma/lzma/lzma_decoder.c:1006:35
	leal	(%rdx,%rdx,8), %esi
	.loc	0 1006 21 is_stmt 0             # liblzma/lzma/lzma_decoder.c:1006:21
	subl	%esi, %ecx
	.loc	0 1006 14                       # liblzma/lzma/lzma_decoder.c:1006:14
	movl	%ecx, 20(%rax)
	.loc	0 1008 21 is_stmt 1             # liblzma/lzma/lzma_decoder.c:1008:21
	addl	%edx, %ecx
	.loc	0 1008 35 is_stmt 0             # liblzma/lzma/lzma_decoder.c:1008:35
	cmpl	$4, %ecx
.Ltmp2646:
	.loc	0 1042 6 is_stmt 1              # liblzma/lzma/lzma_decoder.c:1042:6
	jbe	.LBB9_5
.Ltmp2647:
.LBB9_6:                                # %error
	#DEBUG_VALUE: lzma_lzma_props_decode:options <- $r15
	#DEBUG_VALUE: lzma_lzma_props_decode:allocator <- $r14
	#DEBUG_VALUE: lzma_lzma_props_decode:props <- $rbx
	#DEBUG_VALUE: lzma_lzma_props_decode:props_size <- [DW_OP_LLVM_entry_value 1] $rcx
	#DEBUG_VALUE: lzma_lzma_props_decode:opt <- $rax
	#DEBUG_LABEL: lzma_lzma_props_decode:error
	.loc	0 1058 2                        # liblzma/lzma/lzma_decoder.c:1058:2
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	lzma_free@PLT
.Ltmp2648:
	.loc	0 0 2 is_stmt 0                 # liblzma/lzma/lzma_decoder.c:0:2
	movl	$8, %eax
	jmp	.LBB9_7
.Ltmp2649:
.LBB9_2:
	#DEBUG_VALUE: lzma_lzma_props_decode:options <- $r15
	#DEBUG_VALUE: lzma_lzma_props_decode:allocator <- $r14
	#DEBUG_VALUE: lzma_lzma_props_decode:props <- $rbx
	#DEBUG_VALUE: lzma_lzma_props_decode:props_size <- [DW_OP_LLVM_entry_value 1] $rcx
	#DEBUG_VALUE: lzma_lzma_props_decode:opt <- $rax
	movl	$5, %eax
.Ltmp2650:
	.loc	0 1039 6 is_stmt 1              # liblzma/lzma/lzma_decoder.c:1039:6
	jmp	.LBB9_7
.Ltmp2651:
.LBB9_5:                                # %if.end6
	#DEBUG_VALUE: lzma_lzma_props_decode:options <- $r15
	#DEBUG_VALUE: lzma_lzma_props_decode:allocator <- $r14
	#DEBUG_VALUE: lzma_lzma_props_decode:props <- $rbx
	#DEBUG_VALUE: lzma_lzma_props_decode:props_size <- [DW_OP_LLVM_entry_value 1] $rcx
	#DEBUG_VALUE: lzma_lzma_props_decode:opt <- $rax
	#DEBUG_VALUE: unaligned_read32le:buf <- [DW_OP_plus_uconst 1, DW_OP_stack_value] $rbx
	.file	15 "common" "tuklib_integer.h" md5 0x877bd6a1d04ec1170bc985c87ef412ed
	.loc	15 313 27                       # common/tuklib_integer.h:313:27
	movl	1(%rbx), %ecx
.Ltmp2652:
	#DEBUG_VALUE: unaligned_read32le:num <- $ecx
	.loc	0 1048 17                       # liblzma/lzma/lzma_decoder.c:1048:17
	movl	%ecx, (%rax)
	.loc	0 1050 19                       # liblzma/lzma/lzma_decoder.c:1050:19
	movq	$0, 8(%rax)
	.loc	0 1051 24                       # liblzma/lzma/lzma_decoder.c:1051:24
	movl	$0, 16(%rax)
	.loc	0 1053 11                       # liblzma/lzma/lzma_decoder.c:1053:11
	movq	%rax, (%r15)
	xorl	%eax, %eax
.Ltmp2653:
.LBB9_7:
	#DEBUG_VALUE: lzma_lzma_props_decode:options <- $r15
	#DEBUG_VALUE: lzma_lzma_props_decode:allocator <- $r14
	#DEBUG_VALUE: lzma_lzma_props_decode:props <- $rbx
	#DEBUG_VALUE: lzma_lzma_props_decode:props_size <- [DW_OP_LLVM_entry_value 1] $rcx
	.loc	0 0 11 is_stmt 0                # liblzma/lzma/lzma_decoder.c:0:11
	popq	%rbx
.Ltmp2654:
	#DEBUG_VALUE: lzma_lzma_props_decode:props <- [DW_OP_LLVM_entry_value 1] $rdx
	.cfi_def_cfa_offset 24
	popq	%r14
.Ltmp2655:
	#DEBUG_VALUE: lzma_lzma_props_decode:allocator <- [DW_OP_LLVM_entry_value 1] $rsi
	.cfi_def_cfa_offset 16
	popq	%r15
.Ltmp2656:
	#DEBUG_VALUE: lzma_lzma_props_decode:options <- [DW_OP_LLVM_entry_value 1] $rdi
	.cfi_def_cfa_offset 8
	.cfi_restore %rbx
	.cfi_restore %r14
	.cfi_restore %r15
.LBB9_8:                                # %return
	#DEBUG_VALUE: lzma_lzma_props_decode:options <- [DW_OP_LLVM_entry_value 1] $rdi
	#DEBUG_VALUE: lzma_lzma_props_decode:allocator <- [DW_OP_LLVM_entry_value 1] $rsi
	#DEBUG_VALUE: lzma_lzma_props_decode:props <- [DW_OP_LLVM_entry_value 1] $rdx
	#DEBUG_VALUE: lzma_lzma_props_decode:props_size <- [DW_OP_LLVM_entry_value 1] $rcx
	.loc	0 1060 1 is_stmt 1              # liblzma/lzma/lzma_decoder.c:1060:1
	retq
.Ltmp2657:
.Lfunc_end9:
	.size	lzma_lzma_props_decode, .Lfunc_end9-lzma_lzma_props_decode
	.cfi_endproc
                                        # -- End function
	.type	lzma_decode.next_state,@object  # @lzma_decode.next_state
	.section	.rodata,"a",@progbits
	.p2align	4, 0x0
lzma_decode.next_state:
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	2                               # 0x2
	.long	3                               # 0x3
	.long	4                               # 0x4
	.long	5                               # 0x5
	.long	6                               # 0x6
	.long	4                               # 0x4
	.long	5                               # 0x5
	.size	lzma_decode.next_state, 48

	.section	.debug_loclists,"",@progbits
	.long	.Ldebug_list_header_end0-.Ldebug_list_header_start0 # Length
.Ldebug_list_header_start0:
	.short	5                               # Version
	.byte	8                               # Address size
	.byte	0                               # Segment selector size
	.long	79                              # Offset entry count
.Lloclists_table_base0:
	.long	.Ldebug_loc0-.Lloclists_table_base0
	.long	.Ldebug_loc1-.Lloclists_table_base0
	.long	.Ldebug_loc2-.Lloclists_table_base0
	.long	.Ldebug_loc3-.Lloclists_table_base0
	.long	.Ldebug_loc4-.Lloclists_table_base0
	.long	.Ldebug_loc5-.Lloclists_table_base0
	.long	.Ldebug_loc6-.Lloclists_table_base0
	.long	.Ldebug_loc7-.Lloclists_table_base0
	.long	.Ldebug_loc8-.Lloclists_table_base0
	.long	.Ldebug_loc9-.Lloclists_table_base0
	.long	.Ldebug_loc10-.Lloclists_table_base0
	.long	.Ldebug_loc11-.Lloclists_table_base0
	.long	.Ldebug_loc12-.Lloclists_table_base0
	.long	.Ldebug_loc13-.Lloclists_table_base0
	.long	.Ldebug_loc14-.Lloclists_table_base0
	.long	.Ldebug_loc15-.Lloclists_table_base0
	.long	.Ldebug_loc16-.Lloclists_table_base0
	.long	.Ldebug_loc17-.Lloclists_table_base0
	.long	.Ldebug_loc18-.Lloclists_table_base0
	.long	.Ldebug_loc19-.Lloclists_table_base0
	.long	.Ldebug_loc20-.Lloclists_table_base0
	.long	.Ldebug_loc21-.Lloclists_table_base0
	.long	.Ldebug_loc22-.Lloclists_table_base0
	.long	.Ldebug_loc23-.Lloclists_table_base0
	.long	.Ldebug_loc24-.Lloclists_table_base0
	.long	.Ldebug_loc25-.Lloclists_table_base0
	.long	.Ldebug_loc26-.Lloclists_table_base0
	.long	.Ldebug_loc27-.Lloclists_table_base0
	.long	.Ldebug_loc28-.Lloclists_table_base0
	.long	.Ldebug_loc29-.Lloclists_table_base0
	.long	.Ldebug_loc30-.Lloclists_table_base0
	.long	.Ldebug_loc31-.Lloclists_table_base0
	.long	.Ldebug_loc32-.Lloclists_table_base0
	.long	.Ldebug_loc33-.Lloclists_table_base0
	.long	.Ldebug_loc34-.Lloclists_table_base0
	.long	.Ldebug_loc35-.Lloclists_table_base0
	.long	.Ldebug_loc36-.Lloclists_table_base0
	.long	.Ldebug_loc37-.Lloclists_table_base0
	.long	.Ldebug_loc38-.Lloclists_table_base0
	.long	.Ldebug_loc39-.Lloclists_table_base0
	.long	.Ldebug_loc40-.Lloclists_table_base0
	.long	.Ldebug_loc41-.Lloclists_table_base0
	.long	.Ldebug_loc42-.Lloclists_table_base0
	.long	.Ldebug_loc43-.Lloclists_table_base0
	.long	.Ldebug_loc44-.Lloclists_table_base0
	.long	.Ldebug_loc45-.Lloclists_table_base0
	.long	.Ldebug_loc46-.Lloclists_table_base0
	.long	.Ldebug_loc47-.Lloclists_table_base0
	.long	.Ldebug_loc48-.Lloclists_table_base0
	.long	.Ldebug_loc49-.Lloclists_table_base0
	.long	.Ldebug_loc50-.Lloclists_table_base0
	.long	.Ldebug_loc51-.Lloclists_table_base0
	.long	.Ldebug_loc52-.Lloclists_table_base0
	.long	.Ldebug_loc53-.Lloclists_table_base0
	.long	.Ldebug_loc54-.Lloclists_table_base0
	.long	.Ldebug_loc55-.Lloclists_table_base0
	.long	.Ldebug_loc56-.Lloclists_table_base0
	.long	.Ldebug_loc57-.Lloclists_table_base0
	.long	.Ldebug_loc58-.Lloclists_table_base0
	.long	.Ldebug_loc59-.Lloclists_table_base0
	.long	.Ldebug_loc60-.Lloclists_table_base0
	.long	.Ldebug_loc61-.Lloclists_table_base0
	.long	.Ldebug_loc62-.Lloclists_table_base0
	.long	.Ldebug_loc63-.Lloclists_table_base0
	.long	.Ldebug_loc64-.Lloclists_table_base0
	.long	.Ldebug_loc65-.Lloclists_table_base0
	.long	.Ldebug_loc66-.Lloclists_table_base0
	.long	.Ldebug_loc67-.Lloclists_table_base0
	.long	.Ldebug_loc68-.Lloclists_table_base0
	.long	.Ldebug_loc69-.Lloclists_table_base0
	.long	.Ldebug_loc70-.Lloclists_table_base0
	.long	.Ldebug_loc71-.Lloclists_table_base0
	.long	.Ldebug_loc72-.Lloclists_table_base0
	.long	.Ldebug_loc73-.Lloclists_table_base0
	.long	.Ldebug_loc74-.Lloclists_table_base0
	.long	.Ldebug_loc75-.Lloclists_table_base0
	.long	.Ldebug_loc76-.Lloclists_table_base0
	.long	.Ldebug_loc77-.Lloclists_table_base0
	.long	.Ldebug_loc78-.Lloclists_table_base0
.Ldebug_loc0:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Lfunc_begin0-.Lfunc_begin0    #   starting offset
	.uleb128 .Ltmp4-.Lfunc_begin0           #   ending offset
	.byte	1                               # Loc expr size
	.byte	85                              # DW_OP_reg5
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp4-.Lfunc_begin0           #   starting offset
	.uleb128 .Ltmp9-.Lfunc_begin0           #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp9-.Lfunc_begin0           #   starting offset
	.uleb128 .Ltmp10-.Lfunc_begin0          #   ending offset
	.byte	4                               # Loc expr size
	.byte	163                             # DW_OP_entry_value
	.byte	1                               # 1
	.byte	85                              # DW_OP_reg5
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp10-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp11-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp11-.Lfunc_begin0          #   starting offset
	.uleb128 .Lfunc_end0-.Lfunc_begin0      #   ending offset
	.byte	4                               # Loc expr size
	.byte	163                             # DW_OP_entry_value
	.byte	1                               # 1
	.byte	85                              # DW_OP_reg5
	.byte	159                             # DW_OP_stack_value
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc1:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Lfunc_begin0-.Lfunc_begin0    #   starting offset
	.uleb128 .Ltmp5-.Lfunc_begin0           #   ending offset
	.byte	1                               # Loc expr size
	.byte	84                              # DW_OP_reg4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp5-.Lfunc_begin0           #   starting offset
	.uleb128 .Lfunc_end0-.Lfunc_begin0      #   ending offset
	.byte	4                               # Loc expr size
	.byte	163                             # DW_OP_entry_value
	.byte	1                               # 1
	.byte	84                              # DW_OP_reg4
	.byte	159                             # DW_OP_stack_value
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc2:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Lfunc_begin0-.Lfunc_begin0    #   starting offset
	.uleb128 .Ltmp2-.Lfunc_begin0           #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2-.Lfunc_begin0           #   starting offset
	.uleb128 .Ltmp9-.Lfunc_begin0           #   ending offset
	.byte	1                               # Loc expr size
	.byte	94                              # DW_OP_reg14
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp9-.Lfunc_begin0           #   starting offset
	.uleb128 .Ltmp10-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp10-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp12-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	94                              # DW_OP_reg14
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp12-.Lfunc_begin0          #   starting offset
	.uleb128 .Lfunc_end0-.Lfunc_begin0      #   ending offset
	.byte	4                               # Loc expr size
	.byte	163                             # DW_OP_entry_value
	.byte	1                               # 1
	.byte	81                              # DW_OP_reg1
	.byte	159                             # DW_OP_stack_value
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc3:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Lfunc_begin0-.Lfunc_begin0    #   starting offset
	.uleb128 .Ltmp3-.Lfunc_begin0           #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp3-.Lfunc_begin0           #   starting offset
	.uleb128 .Ltmp9-.Lfunc_begin0           #   ending offset
	.byte	1                               # Loc expr size
	.byte	95                              # DW_OP_reg15
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp9-.Lfunc_begin0           #   starting offset
	.uleb128 .Ltmp10-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp10-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp13-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	95                              # DW_OP_reg15
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp13-.Lfunc_begin0          #   starting offset
	.uleb128 .Lfunc_end0-.Lfunc_begin0      #   ending offset
	.byte	4                               # Loc expr size
	.byte	163                             # DW_OP_entry_value
	.byte	1                               # 1
	.byte	82                              # DW_OP_reg2
	.byte	159                             # DW_OP_stack_value
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc4:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp9-.Lfunc_begin0           #   starting offset
	.uleb128 .Ltmp10-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc5:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Lfunc_begin1-.Lfunc_begin0    #   starting offset
	.uleb128 .Ltmp63-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	85                              # DW_OP_reg5
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp63-.Lfunc_begin0          #   starting offset
	.uleb128 .Lfunc_end1-.Lfunc_begin0      #   ending offset
	.byte	4                               # Loc expr size
	.byte	163                             # DW_OP_entry_value
	.byte	1                               # 1
	.byte	85                              # DW_OP_reg5
	.byte	159                             # DW_OP_stack_value
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc6:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Lfunc_begin1-.Lfunc_begin0    #   starting offset
	.uleb128 .Ltmp51-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	84                              # DW_OP_reg4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp51-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp60-.Lfunc_begin0          #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	184                             # 184
	.byte	1                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp60-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp62-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	84                              # DW_OP_reg4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp62-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp1635-.Lfunc_begin0        #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	184                             # 184
	.byte	1                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1635-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1636-.Lfunc_begin0        #   ending offset
	.byte	4                               # Loc expr size
	.byte	163                             # DW_OP_entry_value
	.byte	1                               # 1
	.byte	84                              # DW_OP_reg4
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1636-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end1-.Lfunc_begin0      #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	184                             # 184
	.byte	1                               # 
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc7:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Lfunc_begin1-.Lfunc_begin0    #   starting offset
	.uleb128 .Ltmp56-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp56-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp60-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	88                              # DW_OP_reg8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp60-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp63-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp63-.Lfunc_begin0          #   starting offset
	.uleb128 .Lfunc_end1-.Lfunc_begin0      #   ending offset
	.byte	4                               # Loc expr size
	.byte	163                             # DW_OP_entry_value
	.byte	1                               # 1
	.byte	81                              # DW_OP_reg1
	.byte	159                             # DW_OP_stack_value
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc8:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Lfunc_begin1-.Lfunc_begin0    #   starting offset
	.uleb128 .Ltmp26-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp26-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp60-.Lfunc_begin0          #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	176                             # 176
	.byte	1                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp60-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp62-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp62-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp1635-.Lfunc_begin0        #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	176                             # 176
	.byte	1                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1635-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1636-.Lfunc_begin0        #   ending offset
	.byte	4                               # Loc expr size
	.byte	163                             # DW_OP_entry_value
	.byte	1                               # 1
	.byte	82                              # DW_OP_reg2
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1636-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end1-.Lfunc_begin0      #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	176                             # 176
	.byte	1                               # 
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc9:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Lfunc_begin1-.Lfunc_begin0    #   starting offset
	.uleb128 .Ltmp16-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	88                              # DW_OP_reg8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp16-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp76-.Lfunc_begin0          #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	32                              # 32
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp77-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp1613-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	32                              # 32
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1613-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1636-.Lfunc_begin0        #   ending offset
	.byte	4                               # Loc expr size
	.byte	163                             # DW_OP_entry_value
	.byte	1                               # 1
	.byte	88                              # DW_OP_reg8
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1636-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2112-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	32                              # 32
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2113-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2130-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	32                              # 32
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2131-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2138-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	32                              # 32
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2140-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2150-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	32                              # 32
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2150-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2153-.Lfunc_begin0        #   ending offset
	.byte	4                               # Loc expr size
	.byte	163                             # DW_OP_entry_value
	.byte	1                               # 1
	.byte	88                              # DW_OP_reg8
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2153-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2154-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	32                              # 32
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2155-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2455-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	32                              # 32
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2458-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2476-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	32                              # 32
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2478-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end1-.Lfunc_begin0      #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	32                              # 32
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc10:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp15-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp63-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	85                              # DW_OP_reg5
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc11:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp17-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp24-.Lfunc_begin0          #   ending offset
	.byte	5                               # Loc expr size
	.byte	117                             # DW_OP_breg5
	.byte	236                             # 28268
	.byte	220                             # 
	.byte	1                               # 
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp60-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp62-.Lfunc_begin0          #   ending offset
	.byte	5                               # Loc expr size
	.byte	117                             # DW_OP_breg5
	.byte	236                             # 28268
	.byte	220                             # 
	.byte	1                               # 
	.byte	159                             # DW_OP_stack_value
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc12:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp27-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp46-.Lfunc_begin0          #   ending offset
	.byte	13                              # Loc expr size
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	89                              # DW_OP_reg9
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	80                              # DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp46-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp47-.Lfunc_begin0          #   ending offset
	.byte	13                              # Loc expr size
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	89                              # DW_OP_reg9
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	90                              # DW_OP_reg10
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp47-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp52-.Lfunc_begin0          #   ending offset
	.byte	15                              # Loc expr size
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	89                              # DW_OP_reg9
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp52-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp54-.Lfunc_begin0          #   ending offset
	.byte	17                              # Loc expr size
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	168                             # 168
	.byte	1                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp54-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp55-.Lfunc_begin0          #   ending offset
	.byte	18                              # Loc expr size
	.byte	80                              # DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	168                             # 168
	.byte	1                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp55-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp57-.Lfunc_begin0          #   ending offset
	.byte	21                              # Loc expr size
	.byte	80                              # DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	168                             # 168
	.byte	1                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	84                              # DW_OP_reg4
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp57-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp60-.Lfunc_begin0          #   ending offset
	.byte	20                              # Loc expr size
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	168                             # 168
	.byte	1                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	84                              # DW_OP_reg4
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp62-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp63-.Lfunc_begin0          #   ending offset
	.byte	17                              # Loc expr size
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	168                             # 168
	.byte	1                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp63-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp65-.Lfunc_begin0          #   ending offset
	.byte	15                              # Loc expr size
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	84                              # DW_OP_reg4
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp65-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp77-.Lfunc_begin0          #   ending offset
	.byte	16                              # Loc expr size
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	56                              # 56
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp77-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp78-.Lfunc_begin0          #   ending offset
	.byte	23                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	82                              # DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp78-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp418-.Lfunc_begin0         #   ending offset
	.byte	24                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	56                              # 56
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp418-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp420-.Lfunc_begin0         #   ending offset
	.byte	23                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	82                              # DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp420-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp422-.Lfunc_begin0         #   ending offset
	.byte	20                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	82                              # DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp422-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp1613-.Lfunc_begin0        #   ending offset
	.byte	24                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	56                              # 56
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1613-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1615-.Lfunc_begin0        #   ending offset
	.byte	22                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1615-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1616-.Lfunc_begin0        #   ending offset
	.byte	17                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	147                             # DW_OP_piece
	.byte	16                              # 16
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1616-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1635-.Lfunc_begin0        #   ending offset
	.byte	7                               # Loc expr size
	.byte	147                             # DW_OP_piece
	.byte	24                              # 24
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1636-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1639-.Lfunc_begin0        #   ending offset
	.byte	24                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	56                              # 56
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1639-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1640-.Lfunc_begin0        #   ending offset
	.byte	23                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	84                              # DW_OP_reg4
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1640-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1644-.Lfunc_begin0        #   ending offset
	.byte	24                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	56                              # 56
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1644-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1646-.Lfunc_begin0        #   ending offset
	.byte	23                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	92                              # DW_OP_reg12
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1646-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1647-.Lfunc_begin0        #   ending offset
	.byte	23                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	86                              # DW_OP_reg6
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1647-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1651-.Lfunc_begin0        #   ending offset
	.byte	22                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1651-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1653-.Lfunc_begin0        #   ending offset
	.byte	23                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	92                              # DW_OP_reg12
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1653-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1660-.Lfunc_begin0        #   ending offset
	.byte	24                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	56                              # 56
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1660-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1664-.Lfunc_begin0        #   ending offset
	.byte	23                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	92                              # DW_OP_reg12
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1664-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1961-.Lfunc_begin0        #   ending offset
	.byte	24                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	56                              # 56
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1961-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1962-.Lfunc_begin0        #   ending offset
	.byte	23                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	82                              # DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1962-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1963-.Lfunc_begin0        #   ending offset
	.byte	20                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	82                              # DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1963-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1965-.Lfunc_begin0        #   ending offset
	.byte	24                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	56                              # 56
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1965-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1968-.Lfunc_begin0        #   ending offset
	.byte	23                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	92                              # DW_OP_reg12
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1968-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1969-.Lfunc_begin0        #   ending offset
	.byte	21                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	92                              # DW_OP_reg12
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	80                              # DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1969-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1973-.Lfunc_begin0        #   ending offset
	.byte	23                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	92                              # DW_OP_reg12
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1973-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1975-.Lfunc_begin0        #   ending offset
	.byte	22                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1975-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2109-.Lfunc_begin0        #   ending offset
	.byte	24                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	56                              # 56
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2109-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2110-.Lfunc_begin0        #   ending offset
	.byte	23                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	92                              # DW_OP_reg12
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2110-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2111-.Lfunc_begin0        #   ending offset
	.byte	23                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	82                              # DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2111-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2129-.Lfunc_begin0        #   ending offset
	.byte	24                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	56                              # 56
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2129-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2131-.Lfunc_begin0        #   ending offset
	.byte	22                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2131-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2149-.Lfunc_begin0        #   ending offset
	.byte	24                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	56                              # 56
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2149-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2153-.Lfunc_begin0        #   ending offset
	.byte	16                              # Loc expr size
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	56                              # 56
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2153-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2453-.Lfunc_begin0        #   ending offset
	.byte	24                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	56                              # 56
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2453-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2458-.Lfunc_begin0        #   ending offset
	.byte	21                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	56                              # 56
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2458-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end1-.Lfunc_begin0      #   ending offset
	.byte	24                              # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	224                             # 96
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	56                              # 56
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	240                             # 112
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	119                             # DW_OP_breg7
	.byte	208                             # 80
	.byte	0                               # 
	.byte	147                             # DW_OP_piece
	.byte	8                               # 8
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc13:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp27-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp52-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp52-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp60-.Lfunc_begin0          #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	168                             # 168
	.byte	1                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp62-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp1635-.Lfunc_begin0        #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	168                             # 168
	.byte	1                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1636-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end1-.Lfunc_begin0      #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	168                             # 168
	.byte	1                               # 
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc14:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp28-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp60-.Lfunc_begin0          #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp62-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp72-.Lfunc_begin0          #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp72-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp74-.Lfunc_begin0          #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp74-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp75-.Lfunc_begin0          #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp75-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp87-.Lfunc_begin0          #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp87-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp88-.Lfunc_begin0          #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp88-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp90-.Lfunc_begin0          #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp90-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp91-.Lfunc_begin0          #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp91-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp92-.Lfunc_begin0          #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp92-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp95-.Lfunc_begin0          #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp95-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp111-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp111-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp112-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp112-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp114-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp114-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp115-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp115-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp116-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp116-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp120-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp120-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp127-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp127-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp128-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp128-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp130-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp130-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp132-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp132-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp136-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp136-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp137-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp137-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp140-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp140-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp144-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp144-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp151-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp151-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp152-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp152-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp154-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp154-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp156-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp156-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp160-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp160-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp161-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp161-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp164-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp164-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp168-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp168-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp175-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp175-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp176-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp176-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp178-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp178-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp179-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp179-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp181-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp181-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp185-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp185-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp186-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp186-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp189-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp189-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp193-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp193-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp200-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp200-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp201-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp201-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp203-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp203-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp204-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp204-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp206-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp206-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp210-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp210-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp211-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp211-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp214-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp214-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp218-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp218-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp225-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp225-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp226-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp226-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp228-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp228-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp229-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp229-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp231-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp231-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp235-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp235-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp236-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp236-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp239-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp239-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp243-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp243-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp250-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp250-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp251-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp251-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp253-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp253-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp254-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp254-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp256-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp256-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp260-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp260-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp261-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp261-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp264-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp264-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp268-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp268-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp272-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp272-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp273-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp273-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp277-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp277-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp278-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp278-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp284-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp284-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp286-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp286-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp287-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp287-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp291-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp291-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp294-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp294-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp295-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp295-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp299-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp299-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp300-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp300-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp302-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp302-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp306-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp306-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp311-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp311-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp312-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	90                              # super-register DW_OP_reg10
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp312-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp314-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	90                              # super-register DW_OP_reg10
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp314-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp315-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	90                              # super-register DW_OP_reg10
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp315-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp316-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	90                              # super-register DW_OP_reg10
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp316-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp317-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp317-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp320-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	90                              # super-register DW_OP_reg10
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp320-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp333-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp333-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp334-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp334-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp336-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp336-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp337-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	89                              # super-register DW_OP_reg9
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp337-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp338-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp338-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp339-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp339-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp342-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp342-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp350-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp350-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp351-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp351-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp353-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp353-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp354-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	89                              # super-register DW_OP_reg9
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp354-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp355-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp355-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp357-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp357-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp361-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp361-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp364-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp364-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp365-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	90                              # super-register DW_OP_reg10
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp365-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp372-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	90                              # super-register DW_OP_reg10
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp372-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp374-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp374-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp380-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp380-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp381-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp381-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp383-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp383-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp384-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	89                              # super-register DW_OP_reg9
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp384-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp385-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp385-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp386-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp386-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp389-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp389-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp397-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp397-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp398-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp398-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp400-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp400-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp401-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	89                              # super-register DW_OP_reg9
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp401-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp402-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp402-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp404-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp404-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp407-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp407-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp422-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp422-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp423-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp423-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp425-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp425-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp426-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp426-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp433-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp433-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp435-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp435-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp436-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	89                              # super-register DW_OP_reg9
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp436-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp438-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp438-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp441-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	89                              # super-register DW_OP_reg9
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp441-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp445-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	89                              # super-register DW_OP_reg9
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp445-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp446-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp446-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp450-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp450-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp451-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	89                              # super-register DW_OP_reg9
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp451-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp453-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp453-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp462-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp462-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp464-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp464-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp465-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	89                              # super-register DW_OP_reg9
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp465-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp467-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp467-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp471-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	89                              # super-register DW_OP_reg9
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp471-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp474-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	89                              # super-register DW_OP_reg9
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp474-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp475-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	89                              # super-register DW_OP_reg9
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp475-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp480-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp480-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp482-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp482-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp487-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	89                              # super-register DW_OP_reg9
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp487-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp488-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	89                              # super-register DW_OP_reg9
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp488-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp494-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp494-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp495-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp495-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp497-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp497-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp498-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	89                              # super-register DW_OP_reg9
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp498-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp499-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp499-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp500-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp500-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp503-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp503-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp511-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp511-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp512-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp512-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp514-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp514-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp515-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	89                              # super-register DW_OP_reg9
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp515-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp516-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp516-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp518-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp518-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp522-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp522-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp525-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp525-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp526-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp526-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp530-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp530-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp532-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp532-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp538-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp538-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp539-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp539-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp541-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp541-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp542-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	89                              # super-register DW_OP_reg9
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp542-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp543-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp543-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp545-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp545-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp549-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp549-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp552-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp552-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp553-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp553-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp557-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp557-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp559-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp559-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp565-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp565-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp567-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp567-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp568-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp568-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp575-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp575-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp578-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp578-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp579-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp579-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp583-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp583-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp584-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp584-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp587-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp587-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp589-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp589-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp590-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp590-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp595-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp595-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp596-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp596-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp598-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp598-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp599-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	89                              # super-register DW_OP_reg9
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp599-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp600-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp600-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp601-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp601-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp604-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp604-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp612-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp612-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp613-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp613-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp615-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp615-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp616-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	89                              # super-register DW_OP_reg9
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp616-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp617-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp617-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp619-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp619-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp623-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp623-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp626-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp626-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp627-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp627-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp629-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp629-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp630-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp630-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp635-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp635-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp636-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp636-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp638-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp638-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp639-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp639-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp640-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp640-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp641-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp641-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp645-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp645-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp652-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp652-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp653-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp653-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp655-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp655-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp656-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp656-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp658-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp658-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp662-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp662-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp663-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp663-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp666-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp666-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp670-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp670-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp677-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp677-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp678-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp678-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp680-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp680-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp681-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp681-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp682-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp682-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp683-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp683-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp687-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp687-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp689-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp689-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp695-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp695-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp696-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp696-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp698-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp698-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp699-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	89                              # super-register DW_OP_reg9
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp699-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp700-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp700-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp702-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp702-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp706-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp706-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp709-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp709-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp710-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp710-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp714-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp714-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp716-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp716-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp722-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp722-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp724-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp724-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp725-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp725-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp731-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp731-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp734-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp734-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp735-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp735-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp739-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp739-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp740-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp740-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp743-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp743-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp745-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp745-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp746-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp746-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp751-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp751-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp752-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp752-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp754-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp754-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp755-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	89                              # super-register DW_OP_reg9
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp755-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp756-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp756-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp757-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp757-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp760-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp760-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp768-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp768-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp769-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp769-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp771-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp771-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp772-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	89                              # super-register DW_OP_reg9
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp772-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp773-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp773-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp775-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp775-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp779-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp779-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp782-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp782-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp783-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp783-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp787-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp787-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp789-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp789-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp795-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp795-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp796-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp796-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp798-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp798-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp799-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	89                              # super-register DW_OP_reg9
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp799-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp800-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp800-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp802-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp802-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp806-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp806-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp809-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp809-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp810-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp810-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp814-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp814-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp816-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp816-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp822-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp822-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp824-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp824-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp825-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp825-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp831-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp831-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp835-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp835-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp837-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp837-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp838-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp838-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp843-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp843-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp844-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp844-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp846-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp846-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp847-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp847-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp848-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp848-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp849-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp849-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp853-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp853-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp860-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp860-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp861-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp861-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp863-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp863-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp864-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp864-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp866-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp866-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp870-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp870-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp871-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp871-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp874-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp874-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp878-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp878-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp885-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp885-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp886-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp886-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp888-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp888-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp889-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp889-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp890-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp890-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp891-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp891-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp895-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp895-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp896-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp896-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp898-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp898-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp899-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp899-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp903-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp903-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp904-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp904-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp907-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp907-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp911-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp911-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp918-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp918-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp919-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp919-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp921-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp921-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp922-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp922-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp924-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp924-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp928-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp928-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp929-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp929-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp932-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp932-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp936-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp936-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp943-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp943-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp944-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp944-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp946-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp946-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp947-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp947-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp949-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp949-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp953-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp953-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp954-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp954-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp957-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp957-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp961-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp961-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp968-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp968-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp969-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp969-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp971-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp971-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp972-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp972-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp974-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp974-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp978-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp978-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp979-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp979-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp982-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp982-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp986-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp986-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp993-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp993-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp994-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp994-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp996-.Lfunc_begin0         #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp996-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp997-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp997-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp999-.Lfunc_begin0         #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp999-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp1003-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1003-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1004-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1004-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1007-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1007-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1011-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1011-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1018-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1018-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1019-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1019-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1021-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1021-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1022-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1022-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1024-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1024-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1028-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1028-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1029-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1029-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1032-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1032-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1036-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1036-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1043-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1043-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1044-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1044-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1046-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1046-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1047-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1047-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1049-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1049-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1053-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1053-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1054-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1054-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1057-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1057-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1061-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1061-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1068-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1068-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1069-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1069-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1071-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1071-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1072-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1072-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1074-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1074-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1078-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1078-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1079-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1079-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1082-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1082-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1086-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1086-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1093-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1093-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1094-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1094-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1096-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1096-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1097-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1097-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1099-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1099-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1103-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1103-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1104-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1104-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1107-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1107-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1111-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1111-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1115-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1115-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1116-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1116-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1120-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1120-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1121-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1121-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1127-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1127-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1129-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1129-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1130-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1130-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1135-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1135-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1138-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1138-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1139-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1139-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1143-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1143-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1144-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1144-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1149-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1149-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1154-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1154-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1155-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1155-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1157-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1157-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1158-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1158-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1159-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1159-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1160-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1160-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1164-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1164-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1171-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1171-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1172-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1172-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1174-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1174-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1175-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1175-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1177-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1177-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1181-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1181-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1182-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1182-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1185-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1185-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1189-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1189-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1196-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1196-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1197-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1197-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1199-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1199-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1200-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1200-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1202-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1202-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1206-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1206-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1207-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1207-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1210-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1210-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1214-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1214-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1221-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1221-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1222-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1222-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1224-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1224-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1225-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1225-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1227-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1227-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1231-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1231-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1232-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1232-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1235-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1235-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1239-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1239-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1246-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1246-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1247-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1247-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1249-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1249-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1250-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1250-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1252-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1252-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1256-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1256-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1257-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1257-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1260-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1260-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1264-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1264-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1271-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1271-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1272-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1272-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1274-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1274-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1275-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1275-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1276-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1276-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1277-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1277-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1281-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1281-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1282-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1282-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1285-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1285-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1290-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1290-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1293-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1293-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1294-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1294-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1297-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1297-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1299-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1299-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1329-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1329-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1331-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1331-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1332-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1332-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1337-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1337-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1340-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1340-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1341-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1341-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1345-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1345-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1346-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1346-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1349-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1349-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1353-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1353-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1361-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1361-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1363-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1363-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1364-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1364-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1365-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1365-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1366-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1366-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1370-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1370-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1371-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1371-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1378-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1378-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1381-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1381-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1382-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1382-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1386-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1386-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1387-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1387-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1390-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1390-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1391-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1391-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1392-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1392-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1396-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1396-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1398-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1398-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1404-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1404-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1405-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1405-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1407-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1407-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1408-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	89                              # super-register DW_OP_reg9
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1408-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1409-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1409-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1411-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1411-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1415-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1415-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1418-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1418-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1419-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1419-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1423-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1423-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1425-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1425-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1431-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1431-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1433-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1433-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1434-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1434-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1441-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1441-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1444-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1444-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1445-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1445-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1449-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1449-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1450-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1450-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1453-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1453-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1462-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1462-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1463-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1463-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1466-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1466-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1474-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1474-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1476-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1476-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1484-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1484-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1485-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1485-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1487-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1487-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1488-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1488-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1489-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1489-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1490-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1490-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1494-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1494-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1501-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1501-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1502-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1502-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1504-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1504-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1505-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1505-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1507-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1507-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1512-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1512-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1513-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1513-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1516-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1516-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1520-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1520-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1527-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1527-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1528-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1528-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1530-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1530-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1531-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1531-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1533-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1533-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1538-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1538-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1539-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1539-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1542-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1542-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1546-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1546-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1553-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1553-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1554-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1554-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1556-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1556-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1557-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1557-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1558-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1558-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1559-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1559-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1564-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1564-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1565-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1565-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1568-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1568-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1571-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1571-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1574-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1574-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1575-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1575-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1578-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1578-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1580-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1580-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1615-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1615-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1635-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1636-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1679-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1679-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1681-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1681-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1682-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1682-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1688-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1688-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1692-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1692-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1693-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1693-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1697-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1697-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1698-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1698-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1702-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1702-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1712-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1712-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1714-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1714-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1715-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1715-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1723-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1723-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1727-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1727-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1728-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1728-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1732-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1732-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1733-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1733-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1738-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1738-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1749-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1749-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1751-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1751-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1752-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1752-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1760-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1760-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1764-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1764-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1765-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1765-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1769-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1769-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1770-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1770-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1775-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1775-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1786-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1786-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1788-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1788-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1789-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1789-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1797-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1797-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1801-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1801-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1802-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1802-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1806-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1806-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1807-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1807-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1812-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1812-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1823-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1823-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1825-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1825-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1826-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1826-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1834-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1834-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1838-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1838-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1839-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1839-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1843-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1843-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1844-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1844-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1849-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1849-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1860-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1860-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1862-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1862-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1863-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1863-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1871-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1871-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1875-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1875-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1876-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1876-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1880-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1880-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1881-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1881-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1886-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1886-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1897-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1897-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1899-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1899-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1900-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1900-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1908-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1908-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1912-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1912-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1913-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1913-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1917-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1917-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1918-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1918-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1923-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1923-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1933-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1933-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1935-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1935-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1936-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1936-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1942-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1942-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1947-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1947-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1948-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1948-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1953-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1953-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1954-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1954-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1956-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1956-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1976-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1976-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1981-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1981-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1982-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1982-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1986-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1986-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1992-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1992-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1994-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1994-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1995-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1995-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1999-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1999-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2003-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2003-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2004-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2004-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2012-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2012-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2013-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2013-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2016-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2016-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2023-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2023-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2025-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2025-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2026-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2026-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2030-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2030-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2034-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2034-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2035-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2035-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2041-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2041-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2043-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2043-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2046-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2046-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2053-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2053-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2055-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2055-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2056-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2056-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2060-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2060-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2064-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2064-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2065-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2065-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2071-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2071-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2073-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2073-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2076-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2076-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2082-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2082-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2083-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2083-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2085-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2085-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2086-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	82                              # super-register DW_OP_reg2
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2086-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2087-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2087-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2088-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2088-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2091-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2091-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2093-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2093-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2094-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2094-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2099-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2099-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2101-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2101-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2449-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2449-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2457-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	90                              # super-register DW_OP_reg10
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2457-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2458-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2458-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2473-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2473-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2475-.Lfunc_begin0        #   ending offset
	.byte	9                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2475-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2477-.Lfunc_begin0        #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	89                              # super-register DW_OP_reg9
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2477-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end1-.Lfunc_begin0      #   ending offset
	.byte	10                              # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	95                              # super-register DW_OP_reg15
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	147                             # DW_OP_piece
	.byte	4                               # 4
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc15:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp28-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp60-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	94                              # DW_OP_reg14
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp62-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp76-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	94                              # DW_OP_reg14
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp76-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp77-.Lfunc_begin0          #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	32                              # 32
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp77-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp1635-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	94                              # DW_OP_reg14
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1636-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2112-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	94                              # DW_OP_reg14
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2112-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2113-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	32                              # 32
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2113-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2130-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	94                              # DW_OP_reg14
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2130-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2131-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	32                              # 32
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2131-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2138-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	94                              # DW_OP_reg14
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2138-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2140-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	32                              # 32
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2140-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2154-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	94                              # DW_OP_reg14
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2154-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2155-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	32                              # 32
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2155-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2455-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	94                              # DW_OP_reg14
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2455-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2458-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	32                              # 32
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2458-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2476-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	94                              # DW_OP_reg14
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2476-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2478-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	32                              # 32
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2478-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end1-.Lfunc_begin0      #   ending offset
	.byte	1                               # Loc expr size
	.byte	94                              # DW_OP_reg14
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc16:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp29-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp30-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp30-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp60-.Lfunc_begin0          #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp62-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp77-.Lfunc_begin0          #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp77-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp349-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp349-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp355-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp355-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp356-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp356-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp364-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp364-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp376-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp376-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp391-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp391-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp396-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp396-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp402-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp402-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp403-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp403-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp410-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp410-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp411-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp411-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp422-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp422-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp426-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp426-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp431-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp431-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp436-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp436-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp437-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp437-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp453-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp453-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp454-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp454-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp481-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp481-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp489-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp489-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp510-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp510-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp516-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp516-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp517-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp517-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp532-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp532-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp537-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp537-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp543-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp543-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp544-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp544-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp559-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp559-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp611-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp611-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp617-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp617-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp618-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp618-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp626-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp626-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp682-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp682-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp689-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp689-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp694-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp694-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp700-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp700-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp701-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp701-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp716-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp716-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp767-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp767-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp773-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp773-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp774-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp774-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp789-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp789-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp794-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp794-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp800-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp800-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp801-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp801-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp816-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp816-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp1321-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1321-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1340-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1340-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1391-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1391-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1398-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1398-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1403-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1403-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1409-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1409-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1410-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1410-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1425-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1425-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1459-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1459-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1479-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1479-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1588-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1588-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1635-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1636-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1664-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1664-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1706-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1706-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1739-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1739-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1743-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1743-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1776-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1776-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1780-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1780-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1813-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1813-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1817-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1817-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1850-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1850-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1854-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1854-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1887-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1887-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1891-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1891-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1925-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1925-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1963-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1963-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2105-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2105-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2106-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2106-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2113-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2113-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2114-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2114-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2118-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2118-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2119-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2119-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2123-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2123-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2124-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2124-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2131-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2131-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2135-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2135-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2140-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2140-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2141-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2141-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2155-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2155-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2156-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2156-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2160-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2160-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2161-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2161-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2165-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2165-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2166-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2166-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2170-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2170-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2171-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2171-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2175-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2175-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2176-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2176-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2180-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2180-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2181-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2181-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2185-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2185-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2186-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2186-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2190-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2190-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2191-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2191-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2195-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2195-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2196-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2196-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2200-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2200-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2201-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2201-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2205-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2205-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2206-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2206-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2210-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2210-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2211-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2211-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2215-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2215-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2216-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2216-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2220-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2220-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2221-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2221-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2225-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2225-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2226-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2226-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2234-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2234-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2235-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2235-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2239-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2239-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2240-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2240-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2246-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2246-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2247-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2247-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2253-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2253-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2254-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2254-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2259-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2259-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2260-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2260-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2264-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2264-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2265-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2265-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2271-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2271-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2272-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2272-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2276-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2276-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2277-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2277-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2281-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2281-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2282-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2282-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2286-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2286-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2287-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2287-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2291-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2291-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2292-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2292-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2296-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2296-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2297-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2297-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2303-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2303-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2304-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2304-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2308-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2308-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2309-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2309-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2313-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2313-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2314-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2314-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2320-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2320-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2321-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2321-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2325-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2325-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2326-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2326-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2330-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2330-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2331-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2331-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2334-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2334-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2335-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2335-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2339-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2339-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2340-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2340-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2344-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2344-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2345-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2345-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2349-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2349-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2350-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2350-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2354-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2354-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2355-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2355-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2359-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2359-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2360-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2360-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2364-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2364-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2365-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2365-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2369-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2369-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2370-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2370-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2374-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2374-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2375-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2375-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2379-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2379-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2380-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2380-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2384-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2384-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2385-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2385-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2389-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2389-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2390-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2390-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2394-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2394-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2395-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2395-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2399-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2399-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2400-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2400-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2404-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2404-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2405-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2405-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2409-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2409-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2410-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2410-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2414-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2414-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2415-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2415-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2419-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2419-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2420-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2420-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2424-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2424-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2425-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2425-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2429-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2429-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2430-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2430-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2434-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2434-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2435-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2435-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2439-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2439-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2440-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2440-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2444-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2444-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2445-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2445-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2449-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2449-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2450-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2450-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2458-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2458-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2459-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2459-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end1-.Lfunc_begin0      #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc17:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp31-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp60-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp62-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp64-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp64-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp77-.Lfunc_begin0          #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp77-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp305-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp305-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp328-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp328-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp364-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp364-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp374-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp374-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp443-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp443-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp445-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	52                              # 52
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp445-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp448-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp448-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp450-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	90                              # super-register DW_OP_reg10
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp450-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp468-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp468-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp473-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	84                              # super-register DW_OP_reg4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp473-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp474-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	0                               # 0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp474-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp477-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	84                              # super-register DW_OP_reg4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp477-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp478-.Lfunc_begin0         #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	220                             # 92
	.byte	0                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp478-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp486-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	90                              # super-register DW_OP_reg10
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp486-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp1303-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1304-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1311-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1312-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1464-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1465-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1589-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1591-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1596-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1596-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1599-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1599-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1600-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1600-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1605-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1605-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1608-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1608-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1611-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1611-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1612-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1612-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1613-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1636-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1664-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1664-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1671-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1671-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1702-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1702-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1721-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1721-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1739-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	84                              # super-register DW_OP_reg4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1739-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1758-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1758-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1776-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	84                              # super-register DW_OP_reg4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1776-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1795-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1795-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1813-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	84                              # super-register DW_OP_reg4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1813-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1832-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1832-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1850-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	84                              # super-register DW_OP_reg4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1850-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1869-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1869-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1887-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	84                              # super-register DW_OP_reg4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1887-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1906-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1906-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1925-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	84                              # super-register DW_OP_reg4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1925-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1963-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1963-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1975-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1975-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2008-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2008-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2009-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	84                              # super-register DW_OP_reg4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2009-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2038-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2038-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2039-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	84                              # super-register DW_OP_reg4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2039-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2068-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2068-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2069-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	84                              # super-register DW_OP_reg4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2069-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2097-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2097-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2098-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	90                              # super-register DW_OP_reg10
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2098-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2105-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2105-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2109-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2109-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2113-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2113-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2122-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2122-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2123-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2123-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2127-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2127-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2128-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2128-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2132-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2140-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2144-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2144-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2149-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2149-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2152-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2153-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2155-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2155-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2159-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2159-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2160-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2160-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2164-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2164-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2165-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2165-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2169-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2169-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2170-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2170-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2174-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2174-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2175-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2175-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2179-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2179-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2180-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2180-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2184-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2184-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2185-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2185-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2189-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2189-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2190-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2190-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2194-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2194-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2195-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2195-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2199-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2199-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2200-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2200-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2204-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2204-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2205-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2205-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2209-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2209-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2210-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2210-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2214-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2214-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2215-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2215-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2219-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2219-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2220-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2220-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2224-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2224-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2225-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2225-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2229-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2229-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2230-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2230-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2231-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2231-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2232-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2232-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2233-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2233-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2234-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2234-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2238-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2238-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2239-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2239-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2243-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2243-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2244-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2244-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2245-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2245-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2246-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2246-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2250-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2250-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2251-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2251-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2252-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2252-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2259-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2259-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2263-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2263-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2264-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2264-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2268-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2268-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2269-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2269-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2270-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2270-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2271-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2271-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2275-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2275-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2276-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2276-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2280-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2280-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2281-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2281-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2285-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2285-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2286-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2286-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2290-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2290-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2291-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2291-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2295-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2295-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2296-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2296-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2300-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2300-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2301-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2301-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2302-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2302-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2303-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2303-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2307-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2307-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2308-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2308-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2312-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2312-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2313-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2313-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2317-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2317-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2318-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2318-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2319-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2319-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2320-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2320-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2324-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2324-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2325-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2325-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2329-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2329-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2334-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2334-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2338-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2338-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2339-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2339-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2343-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2343-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2344-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2344-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2348-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2348-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2349-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2349-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2353-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2353-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2354-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2354-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2358-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2358-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2359-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2359-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2363-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2363-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2364-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2364-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2368-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2368-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2369-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2369-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2373-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2373-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2374-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2374-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2378-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2378-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2379-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2379-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2383-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2383-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2384-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2384-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2388-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2388-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2389-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2389-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2393-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2393-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2394-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2394-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2398-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2398-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2399-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2399-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2403-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2403-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2404-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2404-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2408-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2408-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2409-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2409-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2413-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2413-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2414-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2414-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2418-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2418-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2419-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2419-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2423-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2423-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2424-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2424-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2428-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2428-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2429-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2429-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2433-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2433-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2434-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2434-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2438-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2438-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2439-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2439-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2443-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2443-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2444-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2444-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2448-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2448-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2458-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2458-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2462-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2462-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2463-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2463-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2466-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2466-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2467-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2467-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2470-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2470-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2478-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2478-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2481-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2481-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2482-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2482-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2485-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2485-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2486-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2486-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2489-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2489-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end1-.Lfunc_begin0      #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc18:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp32-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp33-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp33-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp60-.Lfunc_begin0          #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	52                              # 52
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp62-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp324-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	52                              # 52
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp324-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp328-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp328-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp370-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	52                              # 52
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp370-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp371-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	0                               # 0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp371-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp443-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	52                              # 52
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp443-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp445-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp445-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp473-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	52                              # 52
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp473-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp474-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	84                              # super-register DW_OP_reg4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp474-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp477-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	52                              # 52
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp477-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp481-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	84                              # super-register DW_OP_reg4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp481-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp483-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp483-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp1635-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	52                              # 52
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1636-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2257-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	52                              # 52
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2257-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2259-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	0                               # 0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2259-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2454-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	52                              # 52
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2454-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2458-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	0                               # 0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2458-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end1-.Lfunc_begin0      #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	52                              # 52
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc19:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp34-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp35-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp35-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp60-.Lfunc_begin0          #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	0                               # 0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp62-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp306-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	0                               # 0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp306-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp324-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp324-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp325-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	52                              # 52
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp325-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp364-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	0                               # 0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp364-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp371-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp371-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp473-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	0                               # 0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp473-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp474-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	52                              # 52
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp474-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp477-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	0                               # 0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp477-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp481-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	52                              # 52
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp481-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp482-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # super-register DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp482-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp1615-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	0                               # 0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1615-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1635-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1636-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2253-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	0                               # 0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2253-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2258-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2258-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2259-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2259-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2449-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	0                               # 0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2449-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2456-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2456-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2458-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2458-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end1-.Lfunc_begin0      #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	0                               # 0
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc20:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp36-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp37-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp37-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp60-.Lfunc_begin0          #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	220                             # 92
	.byte	0                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp62-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp324-.Lfunc_begin0         #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	220                             # 92
	.byte	0                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp324-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp326-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp326-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp477-.Lfunc_begin0         #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	220                             # 92
	.byte	0                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp477-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp480-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	0                               # 0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp480-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp1635-.Lfunc_begin0        #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	220                             # 92
	.byte	0                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1636-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end1-.Lfunc_begin0      #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	220                             # 92
	.byte	0                               # 
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc21:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp56-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp60-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp77-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp1616-.Lfunc_begin0        #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	236                             # 108
	.byte	0                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1636-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2149-.Lfunc_begin0        #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	236                             # 108
	.byte	0                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2153-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end1-.Lfunc_begin0      #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	236                             # 108
	.byte	0                               # 
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc22:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp38-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp59-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp62-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp77-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp77-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp92-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp92-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp101-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp102-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp106-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp106-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp133-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp133-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp139-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp139-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp157-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp157-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp163-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp163-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp182-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp182-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp188-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp188-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp207-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp207-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp213-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp213-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp232-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp232-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp238-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp238-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp257-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp257-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp263-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp263-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp274-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp274-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp280-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp280-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp299-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp299-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp303-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp303-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp308-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp308-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp327-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	84                              # DW_OP_reg4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp327-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp349-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp349-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp355-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp355-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp356-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp356-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp364-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp364-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp373-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	84                              # DW_OP_reg4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp373-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp377-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp377-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp391-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp391-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp396-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp396-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp402-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp402-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp403-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp403-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp411-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp411-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp422-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp422-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp426-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp426-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp431-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp431-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp436-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp436-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp437-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp437-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp453-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp453-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp458-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp458-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp465-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp465-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp466-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp466-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp489-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp489-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp510-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp510-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp516-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp516-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp517-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp517-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp532-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp532-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp537-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp537-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp543-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp543-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp544-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp544-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp559-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp559-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp570-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp570-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp586-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp586-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp588-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp588-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp590-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp590-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp611-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp611-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp617-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp617-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp618-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp618-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp626-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp626-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp659-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp659-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp665-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp665-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp682-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp682-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp689-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp689-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp694-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp694-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp700-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp700-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp701-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp701-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp716-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp716-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp729-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp742-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp744-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp744-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp746-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp746-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp767-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp767-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp773-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp773-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp774-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp774-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp789-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp789-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp794-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp794-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp800-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp800-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp801-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp801-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp816-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp816-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp829-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp834-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp867-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp867-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp873-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp873-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp890-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp898-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp900-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp900-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp906-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp906-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp925-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp925-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp931-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp931-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp950-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp950-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp956-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp956-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp975-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp975-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp981-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp981-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp1000-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1000-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1006-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1006-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1025-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1025-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1031-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1031-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1050-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1050-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1056-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1056-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1075-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1075-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1081-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1081-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1100-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1100-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1106-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1106-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1117-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1117-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1123-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1123-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1133-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1147-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1178-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1178-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1184-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1184-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1203-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1203-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1209-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1209-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1228-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1228-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1234-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1234-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1253-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1253-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1259-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1259-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1278-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1278-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1284-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1284-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1288-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1288-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1318-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1318-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1335-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1335-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1340-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1340-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1342-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1342-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1348-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1348-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1367-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1367-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1373-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1373-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1374-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1374-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1391-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1391-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1398-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1398-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1403-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1403-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1409-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1409-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1410-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1410-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1425-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1425-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1436-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1436-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1457-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1457-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1508-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1508-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1515-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1515-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1534-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1534-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1541-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1541-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1560-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1560-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1567-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1567-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1568-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1568-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1582-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1582-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1602-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1602-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1608-.Lfunc_begin0        #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	136                             # 136
	.byte	1                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1608-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1610-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1610-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1635-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1636-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1642-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1642-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1653-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1653-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1664-.Lfunc_begin0        #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	136                             # 136
	.byte	1                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1664-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1670-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1670-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1684-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1684-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1702-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1702-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1707-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1707-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1739-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1739-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1744-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1744-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1776-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1776-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1781-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1781-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1813-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1813-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1818-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1818-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1850-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1850-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1855-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1855-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1887-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1887-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1892-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1892-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1924-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1925-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1937-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1937-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1954-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1954-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1963-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1963-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1967-.Lfunc_begin0        #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	136                             # 136
	.byte	1                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1967-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1986-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1986-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2000-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2000-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2003-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2003-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2010-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2010-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2017-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2017-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2031-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2031-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2034-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2034-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2040-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2040-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2047-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2047-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2061-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2061-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2064-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2064-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2070-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2070-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2077-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2077-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2095-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2095-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2100-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2100-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2108-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2108-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2109-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2109-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2110-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2110-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2113-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2113-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2116-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2116-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2118-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2118-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2121-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2121-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2123-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2123-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2126-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2126-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2131-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2131-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2137-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2137-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2140-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2140-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2145-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2145-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2155-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2155-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2158-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2158-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2160-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2160-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2163-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2163-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2165-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2165-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2168-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2168-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2170-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2170-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2173-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2173-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2175-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2175-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2178-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2178-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2180-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2180-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2183-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2183-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2185-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2185-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2188-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2188-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2190-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2190-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2193-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2193-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2195-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2195-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2198-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2198-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2200-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2200-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2203-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2203-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2205-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2205-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2208-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2208-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2210-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2210-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2213-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2213-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2215-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2215-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2218-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2218-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2220-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2220-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2223-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2223-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2225-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2225-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2228-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2228-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2234-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2234-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2237-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2237-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2239-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2239-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2242-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2242-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2246-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2246-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2249-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2249-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2253-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2253-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2259-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	84                              # DW_OP_reg4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2259-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2262-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2262-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2264-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2264-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2267-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2267-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2271-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2271-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2274-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2274-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2276-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2276-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2279-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2279-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2281-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2281-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2284-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2284-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2286-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2286-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2289-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2289-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2291-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2291-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2294-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2294-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2296-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2296-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2299-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2299-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2303-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2303-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2306-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2306-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2308-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2308-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2311-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2311-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2313-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2313-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2316-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2316-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2320-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2320-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2323-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2323-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2325-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2325-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2328-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2328-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2330-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2330-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2333-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2333-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2334-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2334-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2337-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2337-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2339-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2339-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2342-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2342-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2344-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2344-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2347-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2347-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2349-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2349-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2352-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2352-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2354-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2354-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2357-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2357-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2359-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2359-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2362-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2362-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2364-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2364-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2367-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2367-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2369-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2369-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2372-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2372-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2374-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2374-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2377-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2377-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2382-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2382-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2387-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2387-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2389-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2389-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2392-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2392-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2394-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2394-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2397-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2397-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2399-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2399-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2402-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2402-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2404-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2404-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2407-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2407-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2409-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2409-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2412-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2412-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2414-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2414-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2417-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2417-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2419-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2419-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2422-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2422-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2424-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2424-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2427-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2427-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2429-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2429-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2432-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2432-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2434-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2434-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2437-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2437-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2439-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2439-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2442-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2442-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2444-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2444-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2447-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2447-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2449-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2449-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2452-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	84                              # DW_OP_reg4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2452-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2458-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2458-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2461-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2461-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2463-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2463-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2465-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2465-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2467-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2467-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2469-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2469-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2478-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2478-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2480-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2480-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2482-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2482-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2484-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2484-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2486-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2486-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2488-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2488-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end1-.Lfunc_begin0      #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # DW_OP_reg12
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc23:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp39-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp40-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp40-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp60-.Lfunc_begin0          #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp62-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp77-.Lfunc_begin0          #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp77-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp98-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp103-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp106-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	49                              # DW_OP_lit1
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp106-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp118-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp118-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp122-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp122-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp131-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp131-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp135-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp135-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp142-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp142-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp146-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp146-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp155-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp155-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp159-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp159-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp166-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp166-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp170-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp170-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp180-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp180-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp184-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp184-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp191-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp191-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp195-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp195-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp205-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp205-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp209-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp209-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp216-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp216-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp220-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp220-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp230-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp230-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp234-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp234-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp241-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp241-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp245-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp245-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp255-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp255-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp259-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp259-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp266-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp266-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp270-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp270-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp272-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp272-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp276-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp276-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp289-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp289-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp293-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp293-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp294-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp294-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp298-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp298-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp324-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp324-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp328-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	49                              # DW_OP_lit1
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp328-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp359-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp363-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp457-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp457-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp465-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp465-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp485-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp485-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp489-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	49                              # DW_OP_lit1
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp489-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp520-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp524-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp525-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp529-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp547-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp551-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp552-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp556-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp573-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp573-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp576-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	90                              # super-register DW_OP_reg10
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp577-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp578-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp578-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp582-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	90                              # super-register DW_OP_reg10
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp582-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp621-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp625-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp643-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp643-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp647-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp647-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp657-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp657-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp661-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp661-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp668-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp668-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp672-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp672-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp682-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp686-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp704-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp708-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp709-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp713-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp728-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp728-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp732-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	90                              # super-register DW_OP_reg10
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp733-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp734-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp734-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp738-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	90                              # super-register DW_OP_reg10
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp738-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp741-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp742-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp777-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp781-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp782-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp786-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp804-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp808-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp809-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp813-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp828-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp828-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp832-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	90                              # super-register DW_OP_reg10
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp833-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp851-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp851-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp855-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp855-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp865-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp865-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp869-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp869-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp876-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp876-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp880-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp880-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp890-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp890-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp894-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	90                              # super-register DW_OP_reg10
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp894-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp897-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp898-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp902-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp902-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp909-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp909-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp913-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp913-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp923-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp923-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp927-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp927-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp934-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp934-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp938-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp938-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp948-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp948-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp952-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp952-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp959-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp959-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp963-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp963-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp973-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp973-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp977-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp977-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp984-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp984-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp988-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp988-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp998-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp998-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp1002-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1002-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1009-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1009-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1013-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1013-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1023-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1023-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1027-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1027-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1034-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1034-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1038-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1038-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1048-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1048-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1052-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1052-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1059-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1059-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1063-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1063-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1073-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1073-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1077-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1077-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1084-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1084-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1088-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1088-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1098-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1098-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1102-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1102-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1109-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1109-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1113-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1113-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1115-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1115-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1119-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1119-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1132-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1132-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1137-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1137-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1138-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1138-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1142-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1142-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1145-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1148-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1149-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	49                              # DW_OP_lit1
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1149-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1162-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1162-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1166-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1166-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1176-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1176-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1180-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1180-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1187-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1187-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1191-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1191-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1201-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1201-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1205-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1205-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1212-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1212-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1216-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1216-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1226-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1226-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1230-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1230-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1237-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1237-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1241-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1241-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1251-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1251-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1255-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1255-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1262-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1262-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1266-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1266-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1276-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1276-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1280-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1280-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1287-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1287-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1292-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1292-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1293-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1293-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1296-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1296-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1300-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1300-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1304-.Lfunc_begin0        #   ending offset
	.byte	13                              # Loc expr size
	.byte	125                             # DW_OP_breg13
	.byte	0                               # 0
	.byte	16                              # DW_OP_constu
	.byte	255                             # 4294967295
	.byte	255                             # 
	.byte	255                             # 
	.byte	255                             # 
	.byte	15                              # 
	.byte	26                              # DW_OP_and
	.byte	16                              # DW_OP_constu
	.byte	64                              # 64
	.byte	28                              # DW_OP_minus
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1304-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1308-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1308-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1310-.Lfunc_begin0        #   ending offset
	.byte	13                              # Loc expr size
	.byte	125                             # DW_OP_breg13
	.byte	0                               # 0
	.byte	16                              # DW_OP_constu
	.byte	255                             # 4294967295
	.byte	255                             # 
	.byte	255                             # 
	.byte	255                             # 
	.byte	15                              # 
	.byte	26                              # DW_OP_and
	.byte	16                              # DW_OP_constu
	.byte	64                              # 64
	.byte	28                              # DW_OP_minus
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1320-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1334-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1334-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1339-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1339-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1340-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1340-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1344-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1344-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1351-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1351-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1355-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1355-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1365-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1365-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1369-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1369-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1376-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1376-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1380-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1380-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1381-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1381-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1385-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1385-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1391-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1395-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1413-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1417-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1418-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1422-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1439-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1439-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1442-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	90                              # super-register DW_OP_reg10
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1443-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1444-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1444-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1448-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	90                              # super-register DW_OP_reg10
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1448-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1454-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1457-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1458-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1458-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1479-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1479-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1492-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1492-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1496-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1496-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1506-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1506-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1510-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1510-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1518-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1518-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1522-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1522-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1532-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1532-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1536-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1536-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1544-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1544-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1548-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1548-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1558-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1558-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1562-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1562-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1587-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1587-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1635-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1636-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1664-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1664-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1670-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	49                              # DW_OP_lit1
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1670-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1686-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1690-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1692-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1696-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1705-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1705-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1725-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1725-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1727-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1727-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1731-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1731-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1742-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1742-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1762-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1762-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1764-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1764-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1768-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1768-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1779-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1779-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1799-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1799-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1801-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1801-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1805-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1805-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1816-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1816-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1836-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1836-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1838-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1838-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1842-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1842-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1853-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1853-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1873-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1873-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1875-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1875-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1879-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1879-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1890-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1890-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1910-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1910-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1912-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1912-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1916-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1916-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1939-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1944-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1947-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1951-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1963-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1963-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1975-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1975-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1979-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1979-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1997-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1997-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2001-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2001-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2003-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2003-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2007-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2007-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2028-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2028-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2032-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2032-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2034-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2034-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2037-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2037-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2058-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2058-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2062-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2062-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2064-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2064-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2067-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2067-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2107-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2107-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2113-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2113-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2115-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2115-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2118-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2118-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2120-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2120-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2123-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2123-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2125-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2125-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2131-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2131-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2136-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2136-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2140-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2140-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2142-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2142-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2155-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2155-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2157-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2157-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2160-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2160-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2162-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2162-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2165-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2165-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2167-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2167-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2170-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2170-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2172-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2172-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2175-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2175-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2177-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2177-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2180-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2180-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2182-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2182-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2185-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2185-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2187-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2187-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2190-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2190-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2192-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2192-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2195-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2195-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2197-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2197-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2200-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2200-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2202-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2202-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2205-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2205-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2207-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2207-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2210-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2210-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2212-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2212-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2215-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2215-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2217-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2217-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2220-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2220-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2222-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2222-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2225-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2225-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2227-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2227-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2234-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2234-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2236-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2236-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2239-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2239-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2241-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2241-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2246-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2246-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2248-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2248-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2253-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2253-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2255-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2255-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2259-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2259-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2261-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2261-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2264-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2264-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2266-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2266-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2271-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2271-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2273-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2273-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2276-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2276-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2278-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2278-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2281-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2281-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2283-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2283-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2286-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2286-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2288-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2288-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2291-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2291-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2293-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2293-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2296-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2296-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2298-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2298-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2303-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2303-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2305-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2305-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2308-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2308-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2310-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2310-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2313-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2313-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2315-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2315-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2320-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2320-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2322-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2322-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2325-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2325-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2327-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2327-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2330-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2330-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2332-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2332-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2334-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2334-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2336-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2336-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2339-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2339-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2341-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2341-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2344-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2344-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2346-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2346-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2349-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2349-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2351-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2351-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2354-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2354-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2356-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2356-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2359-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2359-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2361-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2361-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2364-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2364-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2366-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2366-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2369-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2369-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2371-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2371-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2374-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2374-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2376-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2376-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2379-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2379-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2381-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2381-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2384-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2384-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2386-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2386-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2389-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2389-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2391-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2391-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2394-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2394-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2396-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2396-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2399-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2399-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2401-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2401-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2404-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2404-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2406-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2406-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2409-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2409-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2411-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2411-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2414-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2414-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2416-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2416-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2419-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2419-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2421-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2421-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2424-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2424-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2426-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2426-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2429-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2429-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2431-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2431-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2434-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2434-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2436-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2436-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2439-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2439-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2441-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2441-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2444-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2444-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2446-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2446-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2449-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2449-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2451-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2451-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2458-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2458-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2460-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2460-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2463-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2463-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2464-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2464-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2467-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2467-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2468-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2468-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2478-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2478-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2479-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2479-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2482-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2482-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2483-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2483-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2486-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2486-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2487-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2487-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end1-.Lfunc_begin0      #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	16                              # 16
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc24:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp44-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp50-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp53-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp60-.Lfunc_begin0          #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	192                             # 64
	.byte	0                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp62-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp1305-.Lfunc_begin0        #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	192                             # 64
	.byte	0                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1305-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1308-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1308-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1309-.Lfunc_begin0        #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	192                             # 64
	.byte	0                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1309-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1315-.Lfunc_begin0        #   ending offset
	.byte	12                              # Loc expr size
	.byte	114                             # DW_OP_breg2
	.byte	0                               # 0
	.byte	16                              # DW_OP_constu
	.byte	255                             # 4294967295
	.byte	255                             # 
	.byte	255                             # 
	.byte	255                             # 
	.byte	15                              # 
	.byte	26                              # DW_OP_and
	.byte	49                              # DW_OP_lit1
	.byte	28                              # DW_OP_minus
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1315-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1316-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1316-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1454-.Lfunc_begin0        #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	192                             # 64
	.byte	0                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1454-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1455-.Lfunc_begin0        #   ending offset
	.byte	12                              # Loc expr size
	.byte	114                             # DW_OP_breg2
	.byte	0                               # 0
	.byte	16                              # DW_OP_constu
	.byte	255                             # 4294967295
	.byte	255                             # 
	.byte	255                             # 
	.byte	255                             # 
	.byte	15                              # 
	.byte	26                              # DW_OP_and
	.byte	49                              # DW_OP_lit1
	.byte	28                              # DW_OP_minus
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1455-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1456-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1456-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1460-.Lfunc_begin0        #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	192                             # 64
	.byte	0                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1460-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1479-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1479-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1582-.Lfunc_begin0        #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	192                             # 64
	.byte	0                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1582-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1583-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1583-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1608-.Lfunc_begin0        #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	192                             # 64
	.byte	0                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1608-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1609-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1609-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1613-.Lfunc_begin0        #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	192                             # 64
	.byte	0                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1636-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1984-.Lfunc_begin0        #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	192                             # 64
	.byte	0                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1984-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2014-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	52                              # DW_OP_lit4
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2014-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2044-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	51                              # DW_OP_lit3
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2044-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2074-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	50                              # DW_OP_lit2
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2074-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2101-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	49                              # DW_OP_lit1
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2101-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2102-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2102-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2105-.Lfunc_begin0        #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	192                             # 64
	.byte	0                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2105-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2109-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2109-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2137-.Lfunc_begin0        #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	192                             # 64
	.byte	0                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2137-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2139-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2140-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2463-.Lfunc_begin0        #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	192                             # 64
	.byte	0                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2463-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2467-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	49                              # DW_OP_lit1
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2467-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2471-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	50                              # DW_OP_lit2
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2471-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2478-.Lfunc_begin0        #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	192                             # 64
	.byte	0                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2478-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2482-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	51                              # DW_OP_lit3
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2482-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2486-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	52                              # DW_OP_lit4
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2486-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2490-.Lfunc_begin0        #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	192                             # 64
	.byte	0                               # 
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc25:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp48-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp49-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp53-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp60-.Lfunc_begin0          #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp62-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp1319-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1320-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1616-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1616-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1635-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # super-register DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1636-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1668-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1669-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1670-.Lfunc_begin0        #   ending offset
	.byte	4                               # Loc expr size
	.byte	16                              # DW_OP_constu
	.byte	128                             # 256
	.byte	2                               # 
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1670-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1691-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1691-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1692-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1692-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1696-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1696-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1701-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1701-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1726-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1726-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1727-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1727-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1731-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1731-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1737-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1737-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1763-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1763-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1764-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1764-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1768-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1768-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1774-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1774-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1800-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1800-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1801-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1801-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1805-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1805-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1811-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1811-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1837-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1837-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1838-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1838-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1842-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1842-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1848-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1848-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1874-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1874-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1875-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1875-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1879-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1879-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1885-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1885-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1911-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1911-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1912-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1912-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1916-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1916-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1922-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1922-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1945-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1945-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1946-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1946-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1951-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1951-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1954-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1954-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1984-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1984-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1985-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1985-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2014-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2014-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2015-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2015-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2044-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2044-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2045-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2045-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2074-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2074-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2075-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2075-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2149-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2149-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2153-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	91                              # super-register DW_OP_reg11
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2153-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end1-.Lfunc_begin0      #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	8                               # 8
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc26:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp49-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp53-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp53-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp60-.Lfunc_begin0          #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	40                              # 40
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp62-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp585-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	40                              # 40
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp585-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp586-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp586-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp741-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	40                              # 40
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp741-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp742-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp742-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp897-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	40                              # 40
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp897-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp898-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp898-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp1145-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	40                              # 40
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1145-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1146-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1146-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1388-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	40                              # 40
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1388-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1389-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1389-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1451-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	40                              # 40
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1451-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1452-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1452-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1593-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	40                              # 40
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1593-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1597-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1597-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1600-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	40                              # 40
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1600-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1601-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1601-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1635-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	40                              # 40
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1636-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1666-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	40                              # 40
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1666-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1667-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1667-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1699-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	40                              # 40
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1699-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1700-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	84                              # super-register DW_OP_reg4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1700-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1735-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	40                              # 40
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1735-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1736-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1736-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1772-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	40                              # 40
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1772-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1773-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1773-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1809-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	40                              # 40
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1809-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1810-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1810-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1846-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	40                              # 40
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1846-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1847-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1847-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1883-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	40                              # 40
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1883-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1884-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1884-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1920-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	40                              # 40
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1920-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1921-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1921-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1972-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	40                              # 40
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1972-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1974-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1975-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end1-.Lfunc_begin0      #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	40                              # 40
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc27:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp58-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp60-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp79-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp96-.Lfunc_begin0          #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp299-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp304-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp304-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp328-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp328-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp364-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp364-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp374-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp374-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp408-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp422-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp571-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp586-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp628-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp682-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp726-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp742-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp826-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp834-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp836-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1391-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1437-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2113-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2118-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2155-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2160-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2165-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2175-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2190-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2200-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2225-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2230-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2239-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2244-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2253-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2254-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2264-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2271-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2286-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2291-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2325-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2330-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2344-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2349-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2354-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2364-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2369-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2374-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2379-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2389-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2394-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2399-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2404-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2409-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2434-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2439-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2449-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2450-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	4                               # 4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2458-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2463-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc28:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp39-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp60-.Lfunc_begin0          #   ending offset
	.byte	2                               # Loc expr size
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp62-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp1630-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1630-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1631-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1633-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1635-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1636-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end1-.Lfunc_begin0      #   ending offset
	.byte	2                               # Loc expr size
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc29:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp93-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp106-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp117-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp122-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp131-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp136-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp141-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp146-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp155-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp160-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp165-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp170-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp180-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp185-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp190-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp195-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp205-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp210-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp215-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp220-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp230-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp235-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp240-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp245-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp255-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp260-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp265-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp270-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp272-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp277-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp288-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp296-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp299-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp301-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp318-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp328-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp340-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp344-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp358-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp366-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp387-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp391-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp405-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp411-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp422-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp424-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp439-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp445-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp445-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp447-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp450-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp452-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp469-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp476-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp479-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp480-.Lfunc_begin0         #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	220                             # 92
	.byte	0                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp501-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp505-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp519-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp527-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp546-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp554-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp572-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp580-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp586-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp589-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp602-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp606-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp620-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp629-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp642-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp647-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp657-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp662-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp667-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp672-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp682-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp684-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp703-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp711-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp727-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp736-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp742-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp745-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp758-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp762-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp776-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp784-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp803-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp811-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp827-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp834-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp834-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp837-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp850-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp855-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp865-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp870-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp875-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp880-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp890-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp892-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp898-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp903-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp908-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp913-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp923-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp928-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp933-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp938-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp948-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp953-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp958-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp963-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp973-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp978-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp983-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp988-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp998-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp1003-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1008-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1013-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1023-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1028-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1033-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1038-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1048-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1053-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1058-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1063-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1073-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1078-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1083-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1088-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1098-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1103-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1108-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1113-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1115-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1120-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1131-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1140-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1161-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1166-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1176-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1181-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1186-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1191-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1201-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1206-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1211-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1216-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1226-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1231-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1236-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1241-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1251-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1256-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1261-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1266-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1276-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1281-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1286-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1297-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1333-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1340-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1340-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1345-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1350-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1355-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1365-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1370-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1375-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1383-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1391-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1393-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1412-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1420-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1438-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1446-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1463-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1468-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1477-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1479-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1491-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1496-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1506-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1512-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1517-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1522-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1532-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1538-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1543-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1548-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1558-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1564-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1569-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1578-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1664-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1670-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1685-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1694-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1719-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1729-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1756-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1766-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1793-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1803-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1830-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1840-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1867-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1877-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1904-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1914-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1938-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1949-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1952-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1953-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1975-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1977-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1996-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2005-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2011-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2012-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	8                               # 8
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2027-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2041-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2057-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2071-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	92                              # super-register DW_OP_reg12
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2089-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2099-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # super-register DW_OP_reg3
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc30:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp417-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp419-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp421-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp422-.Lfunc_begin0         #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	200                             # 72
	.byte	0                               # 
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc31:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp443-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp445-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	52                              # 52
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc32:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp473-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp474-.Lfunc_begin0         #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	0                               # 0
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc33:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp477-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp478-.Lfunc_begin0         #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	220                             # 92
	.byte	0                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp478-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp480-.Lfunc_begin0         #   ending offset
	.byte	1                               # Loc expr size
	.byte	90                              # super-register DW_OP_reg10
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc34:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1306-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1308-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1584-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1586-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2103-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2105-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc35:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1591-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1596-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1596-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1599-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1599-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1600-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1600-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1605-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1605-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1608-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1636-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1664-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1963-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1971-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc36:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1591-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1592-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # DW_OP_reg6
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc37:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1592-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1607-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1636-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1642-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1642-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1646-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1646-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1652-.Lfunc_begin0        #   ending offset
	.byte	12                              # Loc expr size
	.byte	114                             # DW_OP_breg2
	.byte	0                               # 0
	.byte	16                              # DW_OP_constu
	.byte	255                             # 4294967295
	.byte	255                             # 
	.byte	255                             # 
	.byte	255                             # 
	.byte	15                              # 
	.byte	26                              # DW_OP_and
	.byte	49                              # DW_OP_lit1
	.byte	28                              # DW_OP_minus
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1652-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1653-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1653-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1661-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1963-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1964-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc38:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1636-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1642-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1644-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1653-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	24                              # 24
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc39:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1655-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1659-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1659-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1661-.Lfunc_begin0        #   ending offset
	.byte	3                               # Loc expr size
	.byte	119                             # DW_OP_breg7
	.byte	128                             # 128
	.byte	1                               # 
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1661-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1662-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	86                              # super-register DW_OP_reg6
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1963-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1965-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc40:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1672-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1691-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1692-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1697-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1703-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1726-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1727-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1732-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1740-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1763-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1764-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1769-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1777-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1800-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1801-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1806-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1814-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1837-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1838-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1843-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1851-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1874-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1875-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1880-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1888-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1911-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1912-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1917-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1926-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1945-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1947-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1953-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2230-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2234-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2244-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2246-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2251-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2253-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2296-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2301-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2301-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2303-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2318-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2320-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2330-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2334-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc41:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1673-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1683-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1688-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1702-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1704-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1718-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1723-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1739-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1741-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1755-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1760-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1776-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1778-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1792-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1797-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1813-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1815-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1829-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1834-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1850-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1852-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1866-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1871-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1887-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1889-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1903-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1908-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1925-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1927-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1940-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1940-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1953-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	90                              # super-register DW_OP_reg10
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2230-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2234-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2244-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2246-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2251-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2253-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2296-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2303-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2318-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2320-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2330-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2334-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc42:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1956-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1960-.Lfunc_begin0        #   ending offset
	.byte	20                              # Loc expr size
	.byte	125                             # DW_OP_breg13
	.byte	0                               # 0
	.byte	16                              # DW_OP_constu
	.byte	255                             # 4294967295
	.byte	255                             # 
	.byte	255                             # 
	.byte	255                             # 
	.byte	15                              # 
	.byte	26                              # DW_OP_and
	.byte	168                             # DW_OP_convert
	.asciz	"\253\200\200"                  # 
	.byte	168                             # DW_OP_convert
	.asciz	"\260\200\200"                  # 
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp1960-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1963-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	93                              # super-register DW_OP_reg13
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc43:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Lfunc_begin2-.Lfunc_begin0    #   starting offset
	.uleb128 .Ltmp2572-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	84                              # DW_OP_reg4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2572-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end2-.Lfunc_begin0      #   ending offset
	.byte	4                               # Loc expr size
	.byte	163                             # DW_OP_entry_value
	.byte	1                               # 1
	.byte	84                              # DW_OP_reg4
	.byte	159                             # DW_OP_stack_value
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc44:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Lfunc_begin2-.Lfunc_begin0    #   starting offset
	.uleb128 .Ltmp2572-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	84                              # DW_OP_reg4
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc45:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2492-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2493-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc46:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2493-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2501-.Lfunc_begin0        #   ending offset
	.byte	12                              # Loc expr size
	.byte	49                              # DW_OP_lit1
	.byte	114                             # DW_OP_breg2
	.byte	0                               # 0
	.byte	16                              # DW_OP_constu
	.byte	255                             # 4294967295
	.byte	255                             # 
	.byte	255                             # 
	.byte	255                             # 
	.byte	15                              # 
	.byte	26                              # DW_OP_and
	.byte	36                              # DW_OP_shl
	.byte	159                             # DW_OP_stack_value
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc47:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2494-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2496-.Lfunc_begin0        #   ending offset
	.byte	12                              # Loc expr size
	.byte	112                             # DW_OP_breg0
	.byte	0                               # 0
	.byte	16                              # DW_OP_constu
	.byte	255                             # 4294967295
	.byte	255                             # 
	.byte	255                             # 
	.byte	255                             # 
	.byte	15                              # 
	.byte	26                              # DW_OP_and
	.byte	49                              # DW_OP_lit1
	.byte	28                              # DW_OP_minus
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2496-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2499-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc48:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2503-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2508-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2508-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2513-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	49                              # DW_OP_lit1
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2513-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2518-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	50                              # DW_OP_lit2
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2518-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2523-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	51                              # DW_OP_lit3
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2523-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2528-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	52                              # DW_OP_lit4
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2528-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2533-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	53                              # DW_OP_lit5
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2533-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2538-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	54                              # DW_OP_lit6
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2538-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2543-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	55                              # DW_OP_lit7
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2543-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2548-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	56                              # DW_OP_lit8
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2548-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2553-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	57                              # DW_OP_lit9
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2553-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2558-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	58                              # DW_OP_lit10
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2558-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2563-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	59                              # DW_OP_lit11
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2563-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2573-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	60                              # DW_OP_lit12
	.byte	159                             # DW_OP_stack_value
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc49:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2503-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2507-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2508-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2512-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2513-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2517-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2518-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2522-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2523-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2527-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2528-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2532-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2533-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2537-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2538-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2542-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2543-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2547-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2548-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2552-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2553-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2557-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2558-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2562-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc50:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2564-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2565-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2565-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2566-.Lfunc_begin0        #   ending offset
	.byte	3                               # Loc expr size
	.byte	16                              # DW_OP_constu
	.byte	96                              # 96
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2566-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2567-.Lfunc_begin0        #   ending offset
	.byte	3                               # Loc expr size
	.byte	16                              # DW_OP_constu
	.byte	104                             # 104
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2567-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2568-.Lfunc_begin0        #   ending offset
	.byte	3                               # Loc expr size
	.byte	16                              # DW_OP_constu
	.byte	112                             # 112
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2568-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2573-.Lfunc_begin0        #   ending offset
	.byte	3                               # Loc expr size
	.byte	16                              # DW_OP_constu
	.byte	114                             # 114
	.byte	159                             # DW_OP_stack_value
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc51:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2568-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2569-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	55                              # DW_OP_lit7
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2569-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2570-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	63                              # DW_OP_lit15
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2570-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2573-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	64                              # DW_OP_lit16
	.byte	159                             # DW_OP_stack_value
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc52:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2571-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end2-.Lfunc_begin0      #   ending offset
	.byte	12                              # Loc expr size
	.byte	49                              # DW_OP_lit1
	.byte	114                             # DW_OP_breg2
	.byte	0                               # 0
	.byte	16                              # DW_OP_constu
	.byte	255                             # 4294967295
	.byte	255                             # 
	.byte	255                             # 
	.byte	255                             # 
	.byte	15                              # 
	.byte	26                              # DW_OP_and
	.byte	36                              # DW_OP_shl
	.byte	159                             # DW_OP_stack_value
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc53:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2573-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2577-.Lfunc_begin0        #   ending offset
	.byte	12                              # Loc expr size
	.byte	121                             # DW_OP_breg9
	.byte	0                               # 0
	.byte	16                              # DW_OP_constu
	.byte	255                             # 4294967295
	.byte	255                             # 
	.byte	255                             # 
	.byte	255                             # 
	.byte	15                              # 
	.byte	26                              # DW_OP_and
	.byte	49                              # DW_OP_lit1
	.byte	28                              # DW_OP_minus
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2577-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2581-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	89                              # super-register DW_OP_reg9
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc54:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2574-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2575-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	48                              # DW_OP_lit0
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2575-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2576-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	55                              # DW_OP_lit7
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2576-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2583-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	56                              # DW_OP_lit8
	.byte	159                             # DW_OP_stack_value
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc55:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2576-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2577-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	55                              # DW_OP_lit7
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2577-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2583-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	56                              # DW_OP_lit8
	.byte	159                             # DW_OP_stack_value
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc56:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2577-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2579-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	55                              # DW_OP_lit7
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2579-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2583-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	56                              # DW_OP_lit8
	.byte	159                             # DW_OP_stack_value
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc57:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2579-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2580-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	55                              # DW_OP_lit7
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2580-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2583-.Lfunc_begin0        #   ending offset
	.byte	2                               # Loc expr size
	.byte	56                              # DW_OP_lit8
	.byte	159                             # DW_OP_stack_value
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc58:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Lfunc_begin5-.Lfunc_begin0    #   starting offset
	.uleb128 .Ltmp2599-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	85                              # DW_OP_reg5
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2599-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2604-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	95                              # DW_OP_reg15
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2604-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2606-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	85                              # DW_OP_reg5
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2606-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2609-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2609-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2611-.Lfunc_begin0        #   ending offset
	.byte	4                               # Loc expr size
	.byte	163                             # DW_OP_entry_value
	.byte	1                               # 1
	.byte	85                              # DW_OP_reg5
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2611-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end5-.Lfunc_begin0      #   ending offset
	.byte	1                               # Loc expr size
	.byte	95                              # DW_OP_reg15
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc59:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Lfunc_begin5-.Lfunc_begin0    #   starting offset
	.uleb128 .Ltmp2600-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	84                              # DW_OP_reg4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2600-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end5-.Lfunc_begin0      #   ending offset
	.byte	4                               # Loc expr size
	.byte	163                             # DW_OP_entry_value
	.byte	1                               # 1
	.byte	84                              # DW_OP_reg4
	.byte	159                             # DW_OP_stack_value
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc60:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Lfunc_begin5-.Lfunc_begin0    #   starting offset
	.uleb128 .Ltmp2598-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2598-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2604-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	94                              # DW_OP_reg14
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2604-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2607-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2607-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2611-.Lfunc_begin0        #   ending offset
	.byte	4                               # Loc expr size
	.byte	163                             # DW_OP_entry_value
	.byte	1                               # 1
	.byte	81                              # DW_OP_reg1
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2611-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end5-.Lfunc_begin0      #   ending offset
	.byte	1                               # Loc expr size
	.byte	94                              # DW_OP_reg14
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc61:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Lfunc_begin5-.Lfunc_begin0    #   starting offset
	.uleb128 .Ltmp2597-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2597-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2604-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2604-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2607-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2607-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2611-.Lfunc_begin0        #   ending offset
	.byte	4                               # Loc expr size
	.byte	163                             # DW_OP_entry_value
	.byte	1                               # 1
	.byte	82                              # DW_OP_reg2
	.byte	159                             # DW_OP_stack_value
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2611-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end5-.Lfunc_begin0      #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # DW_OP_reg3
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc62:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2594-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2599-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	85                              # DW_OP_reg5
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2599-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2604-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	95                              # DW_OP_reg15
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2604-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2606-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	85                              # DW_OP_reg5
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2606-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2609-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2611-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end5-.Lfunc_begin0      #   ending offset
	.byte	1                               # Loc expr size
	.byte	95                              # DW_OP_reg15
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc63:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2594-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2600-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	84                              # DW_OP_reg4
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc64:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2594-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2598-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2598-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2604-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	94                              # DW_OP_reg14
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2604-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2607-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2611-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end5-.Lfunc_begin0      #   ending offset
	.byte	1                               # Loc expr size
	.byte	94                              # DW_OP_reg14
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc65:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2594-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2597-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2597-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2604-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2604-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2607-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2611-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end5-.Lfunc_begin0      #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # DW_OP_reg3
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc66:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2604-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2607-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc67:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Lfunc_begin6-.Lfunc_begin0    #   starting offset
	.uleb128 .Ltmp2617-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	84                              # super-register DW_OP_reg4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2617-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2618-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # super-register DW_OP_reg0
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc68:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Lfunc_begin7-.Lfunc_begin0    #   starting offset
	.uleb128 .Ltmp2622-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	85                              # DW_OP_reg5
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2622-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end7-.Lfunc_begin0      #   ending offset
	.byte	4                               # Loc expr size
	.byte	163                             # DW_OP_entry_value
	.byte	1                               # 1
	.byte	85                              # DW_OP_reg5
	.byte	159                             # DW_OP_stack_value
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc69:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2621-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2622-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	85                              # DW_OP_reg5
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc70:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Lfunc_begin8-.Lfunc_begin0    #   starting offset
	.uleb128 .Ltmp2630-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	85                              # DW_OP_reg5
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2630-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end8-.Lfunc_begin0      #   ending offset
	.byte	4                               # Loc expr size
	.byte	163                             # DW_OP_entry_value
	.byte	1                               # 1
	.byte	85                              # DW_OP_reg5
	.byte	159                             # DW_OP_stack_value
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc71:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2629-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2630-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	85                              # DW_OP_reg5
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc72:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2629-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2630-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	85                              # DW_OP_reg5
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc73:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Lfunc_begin9-.Lfunc_begin0    #   starting offset
	.uleb128 .Ltmp2637-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	85                              # DW_OP_reg5
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2637-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2656-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	95                              # DW_OP_reg15
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2656-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end9-.Lfunc_begin0      #   ending offset
	.byte	4                               # Loc expr size
	.byte	163                             # DW_OP_entry_value
	.byte	1                               # 1
	.byte	85                              # DW_OP_reg5
	.byte	159                             # DW_OP_stack_value
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc74:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Lfunc_begin9-.Lfunc_begin0    #   starting offset
	.uleb128 .Ltmp2638-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	84                              # DW_OP_reg4
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2638-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2655-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	94                              # DW_OP_reg14
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2655-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end9-.Lfunc_begin0      #   ending offset
	.byte	4                               # Loc expr size
	.byte	163                             # DW_OP_entry_value
	.byte	1                               # 1
	.byte	84                              # DW_OP_reg4
	.byte	159                             # DW_OP_stack_value
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc75:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Lfunc_begin9-.Lfunc_begin0    #   starting offset
	.uleb128 .Ltmp2638-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # DW_OP_reg1
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2638-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2654-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	83                              # DW_OP_reg3
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2654-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end9-.Lfunc_begin0      #   ending offset
	.byte	4                               # Loc expr size
	.byte	163                             # DW_OP_entry_value
	.byte	1                               # 1
	.byte	81                              # DW_OP_reg1
	.byte	159                             # DW_OP_stack_value
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc76:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Lfunc_begin9-.Lfunc_begin0    #   starting offset
	.uleb128 .Ltmp2638-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2638-.Lfunc_begin0        #   starting offset
	.uleb128 .Lfunc_end9-.Lfunc_begin0      #   ending offset
	.byte	4                               # Loc expr size
	.byte	163                             # DW_OP_entry_value
	.byte	1                               # 1
	.byte	82                              # DW_OP_reg2
	.byte	159                             # DW_OP_stack_value
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc77:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2638-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2648-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2649-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2650-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # DW_OP_reg0
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2651-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2653-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	80                              # DW_OP_reg0
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_loc78:
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2641-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2644-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	82                              # super-register DW_OP_reg2
	.byte	4                               # DW_LLE_offset_pair
	.uleb128 .Ltmp2644-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2645-.Lfunc_begin0        #   ending offset
	.byte	1                               # Loc expr size
	.byte	81                              # super-register DW_OP_reg1
	.byte	0                               # DW_LLE_end_of_list
.Ldebug_list_header_end0:
	.section	.debug_abbrev,"",@progbits
	.byte	1                               # Abbreviation Code
	.byte	17                              # DW_TAG_compile_unit
	.byte	1                               # DW_CHILDREN_yes
	.byte	37                              # DW_AT_producer
	.byte	37                              # DW_FORM_strx1
	.byte	19                              # DW_AT_language
	.byte	5                               # DW_FORM_data2
	.byte	3                               # DW_AT_name
	.byte	37                              # DW_FORM_strx1
	.byte	114                             # DW_AT_str_offsets_base
	.byte	23                              # DW_FORM_sec_offset
	.byte	16                              # DW_AT_stmt_list
	.byte	23                              # DW_FORM_sec_offset
	.byte	27                              # DW_AT_comp_dir
	.byte	37                              # DW_FORM_strx1
	.byte	17                              # DW_AT_low_pc
	.byte	27                              # DW_FORM_addrx
	.byte	18                              # DW_AT_high_pc
	.byte	6                               # DW_FORM_data4
	.byte	115                             # DW_AT_addr_base
	.byte	23                              # DW_FORM_sec_offset
	.byte	116                             # DW_AT_rnglists_base
	.byte	23                              # DW_FORM_sec_offset
	.ascii	"\214\001"                      # DW_AT_loclists_base
	.byte	23                              # DW_FORM_sec_offset
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	2                               # Abbreviation Code
	.byte	36                              # DW_TAG_base_type
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	38                              # DW_FORM_strx2
	.byte	62                              # DW_AT_encoding
	.byte	11                              # DW_FORM_data1
	.byte	11                              # DW_AT_byte_size
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	3                               # Abbreviation Code
	.byte	46                              # DW_TAG_subprogram
	.byte	1                               # DW_CHILDREN_yes
	.byte	17                              # DW_AT_low_pc
	.byte	27                              # DW_FORM_addrx
	.byte	18                              # DW_AT_high_pc
	.byte	6                               # DW_FORM_data4
	.byte	64                              # DW_AT_frame_base
	.byte	24                              # DW_FORM_exprloc
	.byte	122                             # DW_AT_call_all_calls
	.byte	25                              # DW_FORM_flag_present
	.byte	3                               # DW_AT_name
	.byte	38                              # DW_FORM_strx2
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	39                              # DW_AT_prototyped
	.byte	25                              # DW_FORM_flag_present
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	4                               # Abbreviation Code
	.byte	52                              # DW_TAG_variable
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	37                              # DW_FORM_strx1
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	2                               # DW_AT_location
	.byte	24                              # DW_FORM_exprloc
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	5                               # Abbreviation Code
	.byte	5                               # DW_TAG_formal_parameter
	.byte	0                               # DW_CHILDREN_no
	.byte	2                               # DW_AT_location
	.byte	34                              # DW_FORM_loclistx
	.byte	3                               # DW_AT_name
	.byte	38                              # DW_FORM_strx2
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	6                               # Abbreviation Code
	.byte	5                               # DW_TAG_formal_parameter
	.byte	0                               # DW_CHILDREN_no
	.byte	2                               # DW_AT_location
	.byte	34                              # DW_FORM_loclistx
	.byte	3                               # DW_AT_name
	.byte	37                              # DW_FORM_strx1
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	7                               # Abbreviation Code
	.byte	52                              # DW_TAG_variable
	.byte	0                               # DW_CHILDREN_no
	.byte	2                               # DW_AT_location
	.byte	34                              # DW_FORM_loclistx
	.byte	3                               # DW_AT_name
	.byte	37                              # DW_FORM_strx1
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	8                               # Abbreviation Code
	.byte	52                              # DW_TAG_variable
	.byte	0                               # DW_CHILDREN_no
	.byte	2                               # DW_AT_location
	.byte	34                              # DW_FORM_loclistx
	.byte	3                               # DW_AT_name
	.byte	38                              # DW_FORM_strx2
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	9                               # Abbreviation Code
	.byte	52                              # DW_TAG_variable
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	37                              # DW_FORM_strx1
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	10                              # Abbreviation Code
	.byte	52                              # DW_TAG_variable
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	38                              # DW_FORM_strx2
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	11                              # Abbreviation Code
	.byte	10                              # DW_TAG_label
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	38                              # DW_FORM_strx2
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	17                              # DW_AT_low_pc
	.byte	27                              # DW_FORM_addrx
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	12                              # Abbreviation Code
	.byte	29                              # DW_TAG_inlined_subroutine
	.byte	1                               # DW_CHILDREN_yes
	.byte	49                              # DW_AT_abstract_origin
	.byte	19                              # DW_FORM_ref4
	.byte	85                              # DW_AT_ranges
	.byte	35                              # DW_FORM_rnglistx
	.byte	88                              # DW_AT_call_file
	.byte	11                              # DW_FORM_data1
	.byte	89                              # DW_AT_call_line
	.byte	5                               # DW_FORM_data2
	.byte	87                              # DW_AT_call_column
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	13                              # Abbreviation Code
	.byte	5                               # DW_TAG_formal_parameter
	.byte	0                               # DW_CHILDREN_no
	.byte	2                               # DW_AT_location
	.byte	34                              # DW_FORM_loclistx
	.byte	49                              # DW_AT_abstract_origin
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	14                              # Abbreviation Code
	.byte	29                              # DW_TAG_inlined_subroutine
	.byte	1                               # DW_CHILDREN_yes
	.byte	49                              # DW_AT_abstract_origin
	.byte	19                              # DW_FORM_ref4
	.byte	17                              # DW_AT_low_pc
	.byte	27                              # DW_FORM_addrx
	.byte	18                              # DW_AT_high_pc
	.byte	6                               # DW_FORM_data4
	.byte	88                              # DW_AT_call_file
	.byte	11                              # DW_FORM_data1
	.byte	89                              # DW_AT_call_line
	.byte	5                               # DW_FORM_data2
	.byte	87                              # DW_AT_call_column
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	15                              # Abbreviation Code
	.byte	5                               # DW_TAG_formal_parameter
	.byte	0                               # DW_CHILDREN_no
	.byte	28                              # DW_AT_const_value
	.byte	15                              # DW_FORM_udata
	.byte	49                              # DW_AT_abstract_origin
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	16                              # Abbreviation Code
	.byte	11                              # DW_TAG_lexical_block
	.byte	1                               # DW_CHILDREN_yes
	.byte	85                              # DW_AT_ranges
	.byte	35                              # DW_FORM_rnglistx
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	17                              # Abbreviation Code
	.byte	5                               # DW_TAG_formal_parameter
	.byte	0                               # DW_CHILDREN_no
	.byte	2                               # DW_AT_location
	.byte	24                              # DW_FORM_exprloc
	.byte	49                              # DW_AT_abstract_origin
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	18                              # Abbreviation Code
	.byte	11                              # DW_TAG_lexical_block
	.byte	1                               # DW_CHILDREN_yes
	.byte	17                              # DW_AT_low_pc
	.byte	27                              # DW_FORM_addrx
	.byte	18                              # DW_AT_high_pc
	.byte	6                               # DW_FORM_data4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	19                              # Abbreviation Code
	.byte	52                              # DW_TAG_variable
	.byte	0                               # DW_CHILDREN_no
	.byte	2                               # DW_AT_location
	.byte	34                              # DW_FORM_loclistx
	.byte	49                              # DW_AT_abstract_origin
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	20                              # Abbreviation Code
	.byte	29                              # DW_TAG_inlined_subroutine
	.byte	1                               # DW_CHILDREN_yes
	.byte	49                              # DW_AT_abstract_origin
	.byte	19                              # DW_FORM_ref4
	.byte	85                              # DW_AT_ranges
	.byte	35                              # DW_FORM_rnglistx
	.byte	88                              # DW_AT_call_file
	.byte	11                              # DW_FORM_data1
	.byte	89                              # DW_AT_call_line
	.byte	11                              # DW_FORM_data1
	.byte	87                              # DW_AT_call_column
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	21                              # Abbreviation Code
	.byte	1                               # DW_TAG_array_type
	.byte	1                               # DW_CHILDREN_yes
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	22                              # Abbreviation Code
	.byte	33                              # DW_TAG_subrange_type
	.byte	0                               # DW_CHILDREN_no
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	55                              # DW_AT_count
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	23                              # Abbreviation Code
	.byte	38                              # DW_TAG_const_type
	.byte	0                               # DW_CHILDREN_no
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	24                              # Abbreviation Code
	.byte	22                              # DW_TAG_typedef
	.byte	0                               # DW_CHILDREN_no
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	3                               # DW_AT_name
	.byte	37                              # DW_FORM_strx1
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	25                              # Abbreviation Code
	.byte	4                               # DW_TAG_enumeration_type
	.byte	1                               # DW_CHILDREN_yes
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	11                              # DW_AT_byte_size
	.byte	11                              # DW_FORM_data1
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	26                              # Abbreviation Code
	.byte	40                              # DW_TAG_enumerator
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	37                              # DW_FORM_strx1
	.byte	28                              # DW_AT_const_value
	.byte	15                              # DW_FORM_udata
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	27                              # Abbreviation Code
	.byte	36                              # DW_TAG_base_type
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	37                              # DW_FORM_strx1
	.byte	62                              # DW_AT_encoding
	.byte	11                              # DW_FORM_data1
	.byte	11                              # DW_AT_byte_size
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	28                              # Abbreviation Code
	.byte	36                              # DW_TAG_base_type
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	37                              # DW_FORM_strx1
	.byte	11                              # DW_AT_byte_size
	.byte	11                              # DW_FORM_data1
	.byte	62                              # DW_AT_encoding
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	29                              # Abbreviation Code
	.byte	19                              # DW_TAG_structure_type
	.byte	1                               # DW_CHILDREN_yes
	.byte	3                               # DW_AT_name
	.byte	37                              # DW_FORM_strx1
	.byte	11                              # DW_AT_byte_size
	.byte	5                               # DW_FORM_data2
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	30                              # Abbreviation Code
	.byte	13                              # DW_TAG_member
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	37                              # DW_FORM_strx1
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	56                              # DW_AT_data_member_location
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	31                              # Abbreviation Code
	.byte	13                              # DW_TAG_member
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	37                              # DW_FORM_strx1
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	56                              # DW_AT_data_member_location
	.byte	5                               # DW_FORM_data2
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	32                              # Abbreviation Code
	.byte	13                              # DW_TAG_member
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	37                              # DW_FORM_strx1
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	56                              # DW_AT_data_member_location
	.byte	5                               # DW_FORM_data2
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	33                              # Abbreviation Code
	.byte	33                              # DW_TAG_subrange_type
	.byte	0                               # DW_CHILDREN_no
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	55                              # DW_AT_count
	.byte	5                               # DW_FORM_data2
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	34                              # Abbreviation Code
	.byte	19                              # DW_TAG_structure_type
	.byte	1                               # DW_CHILDREN_yes
	.byte	11                              # DW_AT_byte_size
	.byte	5                               # DW_FORM_data2
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	35                              # Abbreviation Code
	.byte	19                              # DW_TAG_structure_type
	.byte	1                               # DW_CHILDREN_yes
	.byte	11                              # DW_AT_byte_size
	.byte	11                              # DW_FORM_data1
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	36                              # Abbreviation Code
	.byte	15                              # DW_TAG_pointer_type
	.byte	0                               # DW_CHILDREN_no
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	37                              # Abbreviation Code
	.byte	15                              # DW_TAG_pointer_type
	.byte	0                               # DW_CHILDREN_no
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	38                              # Abbreviation Code
	.byte	46                              # DW_TAG_subprogram
	.byte	1                               # DW_CHILDREN_yes
	.byte	17                              # DW_AT_low_pc
	.byte	27                              # DW_FORM_addrx
	.byte	18                              # DW_AT_high_pc
	.byte	6                               # DW_FORM_data4
	.byte	64                              # DW_AT_frame_base
	.byte	24                              # DW_FORM_exprloc
	.byte	122                             # DW_AT_call_all_calls
	.byte	25                              # DW_FORM_flag_present
	.byte	49                              # DW_AT_abstract_origin
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	39                              # Abbreviation Code
	.byte	72                              # DW_TAG_call_site
	.byte	0                               # DW_CHILDREN_no
	.byte	127                             # DW_AT_call_origin
	.byte	19                              # DW_FORM_ref4
	.byte	125                             # DW_AT_call_return_pc
	.byte	27                              # DW_FORM_addrx
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	40                              # Abbreviation Code
	.byte	46                              # DW_TAG_subprogram
	.byte	1                               # DW_CHILDREN_yes
	.byte	3                               # DW_AT_name
	.byte	37                              # DW_FORM_strx1
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	39                              # DW_AT_prototyped
	.byte	25                              # DW_FORM_flag_present
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	60                              # DW_AT_declaration
	.byte	25                              # DW_FORM_flag_present
	.byte	63                              # DW_AT_external
	.byte	25                              # DW_FORM_flag_present
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	41                              # Abbreviation Code
	.byte	5                               # DW_TAG_formal_parameter
	.byte	0                               # DW_CHILDREN_no
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	42                              # Abbreviation Code
	.byte	22                              # DW_TAG_typedef
	.byte	0                               # DW_CHILDREN_no
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	3                               # DW_AT_name
	.byte	37                              # DW_FORM_strx1
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	43                              # Abbreviation Code
	.byte	19                              # DW_TAG_structure_type
	.byte	1                               # DW_CHILDREN_yes
	.byte	11                              # DW_AT_byte_size
	.byte	11                              # DW_FORM_data1
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	44                              # Abbreviation Code
	.byte	13                              # DW_TAG_member
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	37                              # DW_FORM_strx1
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	56                              # DW_AT_data_member_location
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	45                              # Abbreviation Code
	.byte	21                              # DW_TAG_subroutine_type
	.byte	1                               # DW_CHILDREN_yes
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	39                              # DW_AT_prototyped
	.byte	25                              # DW_FORM_flag_present
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	46                              # Abbreviation Code
	.byte	21                              # DW_TAG_subroutine_type
	.byte	1                               # DW_CHILDREN_yes
	.byte	39                              # DW_AT_prototyped
	.byte	25                              # DW_FORM_flag_present
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	47                              # Abbreviation Code
	.byte	46                              # DW_TAG_subprogram
	.byte	1                               # DW_CHILDREN_yes
	.byte	3                               # DW_AT_name
	.byte	37                              # DW_FORM_strx1
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	39                              # DW_AT_prototyped
	.byte	25                              # DW_FORM_flag_present
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	32                              # DW_AT_inline
	.byte	33                              # DW_FORM_implicit_const
	.byte	1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	48                              # Abbreviation Code
	.byte	5                               # DW_TAG_formal_parameter
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	37                              # DW_FORM_strx1
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	49                              # Abbreviation Code
	.byte	55                              # DW_TAG_restrict_type
	.byte	0                               # DW_CHILDREN_no
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	50                              # Abbreviation Code
	.byte	52                              # DW_TAG_variable
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	37                              # DW_FORM_strx1
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	51                              # Abbreviation Code
	.byte	11                              # DW_TAG_lexical_block
	.byte	1                               # DW_CHILDREN_yes
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	52                              # Abbreviation Code
	.byte	46                              # DW_TAG_subprogram
	.byte	1                               # DW_CHILDREN_yes
	.byte	3                               # DW_AT_name
	.byte	37                              # DW_FORM_strx1
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	39                              # DW_AT_prototyped
	.byte	25                              # DW_FORM_flag_present
	.byte	32                              # DW_AT_inline
	.byte	33                              # DW_FORM_implicit_const
	.byte	1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	53                              # Abbreviation Code
	.byte	46                              # DW_TAG_subprogram
	.byte	1                               # DW_CHILDREN_yes
	.byte	17                              # DW_AT_low_pc
	.byte	27                              # DW_FORM_addrx
	.byte	18                              # DW_AT_high_pc
	.byte	6                               # DW_FORM_data4
	.byte	64                              # DW_AT_frame_base
	.byte	24                              # DW_FORM_exprloc
	.byte	122                             # DW_AT_call_all_calls
	.byte	25                              # DW_FORM_flag_present
	.byte	3                               # DW_AT_name
	.byte	38                              # DW_FORM_strx2
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	39                              # DW_AT_prototyped
	.byte	25                              # DW_FORM_flag_present
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	54                              # Abbreviation Code
	.byte	5                               # DW_TAG_formal_parameter
	.byte	0                               # DW_CHILDREN_no
	.byte	2                               # DW_AT_location
	.byte	24                              # DW_FORM_exprloc
	.byte	3                               # DW_AT_name
	.byte	38                              # DW_FORM_strx2
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	55                              # Abbreviation Code
	.byte	52                              # DW_TAG_variable
	.byte	0                               # DW_CHILDREN_no
	.byte	2                               # DW_AT_location
	.byte	24                              # DW_FORM_exprloc
	.byte	3                               # DW_AT_name
	.byte	37                              # DW_FORM_strx1
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	56                              # Abbreviation Code
	.byte	52                              # DW_TAG_variable
	.byte	0                               # DW_CHILDREN_no
	.byte	28                              # DW_AT_const_value
	.byte	15                              # DW_FORM_udata
	.byte	49                              # DW_AT_abstract_origin
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	57                              # Abbreviation Code
	.byte	52                              # DW_TAG_variable
	.byte	0                               # DW_CHILDREN_no
	.byte	28                              # DW_AT_const_value
	.byte	15                              # DW_FORM_udata
	.byte	3                               # DW_AT_name
	.byte	37                              # DW_FORM_strx1
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	58                              # Abbreviation Code
	.byte	52                              # DW_TAG_variable
	.byte	0                               # DW_CHILDREN_no
	.byte	28                              # DW_AT_const_value
	.byte	15                              # DW_FORM_udata
	.byte	3                               # DW_AT_name
	.byte	38                              # DW_FORM_strx2
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	59                              # Abbreviation Code
	.byte	52                              # DW_TAG_variable
	.byte	0                               # DW_CHILDREN_no
	.byte	2                               # DW_AT_location
	.byte	24                              # DW_FORM_exprloc
	.byte	49                              # DW_AT_abstract_origin
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	60                              # Abbreviation Code
	.byte	46                              # DW_TAG_subprogram
	.byte	1                               # DW_CHILDREN_yes
	.byte	17                              # DW_AT_low_pc
	.byte	27                              # DW_FORM_addrx
	.byte	18                              # DW_AT_high_pc
	.byte	6                               # DW_FORM_data4
	.byte	64                              # DW_AT_frame_base
	.byte	24                              # DW_FORM_exprloc
	.byte	122                             # DW_AT_call_all_calls
	.byte	25                              # DW_FORM_flag_present
	.byte	3                               # DW_AT_name
	.byte	38                              # DW_FORM_strx2
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	39                              # DW_AT_prototyped
	.byte	25                              # DW_FORM_flag_present
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	63                              # DW_AT_external
	.byte	25                              # DW_FORM_flag_present
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	61                              # Abbreviation Code
	.byte	72                              # DW_TAG_call_site
	.byte	0                               # DW_CHILDREN_no
	.byte	127                             # DW_AT_call_origin
	.byte	19                              # DW_FORM_ref4
	.ascii	"\202\001"                      # DW_AT_call_tail_call
	.byte	25                              # DW_FORM_flag_present
	.ascii	"\201\001"                      # DW_AT_call_pc
	.byte	27                              # DW_FORM_addrx
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	62                              # Abbreviation Code
	.byte	19                              # DW_TAG_structure_type
	.byte	1                               # DW_CHILDREN_yes
	.byte	3                               # DW_AT_name
	.byte	37                              # DW_FORM_strx1
	.byte	11                              # DW_AT_byte_size
	.byte	11                              # DW_FORM_data1
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	63                              # Abbreviation Code
	.byte	22                              # DW_TAG_typedef
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	37                              # DW_FORM_strx1
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	64                              # Abbreviation Code
	.byte	38                              # DW_TAG_const_type
	.byte	0                               # DW_CHILDREN_no
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	65                              # Abbreviation Code
	.byte	22                              # DW_TAG_typedef
	.byte	0                               # DW_CHILDREN_no
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	3                               # DW_AT_name
	.byte	38                              # DW_FORM_strx2
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	66                              # Abbreviation Code
	.byte	46                              # DW_TAG_subprogram
	.byte	1                               # DW_CHILDREN_yes
	.byte	3                               # DW_AT_name
	.byte	38                              # DW_FORM_strx2
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	39                              # DW_AT_prototyped
	.byte	25                              # DW_FORM_flag_present
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	63                              # DW_AT_external
	.byte	25                              # DW_FORM_flag_present
	.byte	32                              # DW_AT_inline
	.byte	33                              # DW_FORM_implicit_const
	.byte	1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	67                              # Abbreviation Code
	.byte	5                               # DW_TAG_formal_parameter
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	38                              # DW_FORM_strx2
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	68                              # Abbreviation Code
	.byte	46                              # DW_TAG_subprogram
	.byte	1                               # DW_CHILDREN_yes
	.byte	3                               # DW_AT_name
	.byte	38                              # DW_FORM_strx2
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	39                              # DW_AT_prototyped
	.byte	25                              # DW_FORM_flag_present
	.byte	32                              # DW_AT_inline
	.byte	33                              # DW_FORM_implicit_const
	.byte	1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	69                              # Abbreviation Code
	.byte	5                               # DW_TAG_formal_parameter
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	37                              # DW_FORM_strx1
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	70                              # Abbreviation Code
	.byte	46                              # DW_TAG_subprogram
	.byte	1                               # DW_CHILDREN_yes
	.byte	3                               # DW_AT_name
	.byte	38                              # DW_FORM_strx2
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	39                              # DW_AT_prototyped
	.byte	25                              # DW_FORM_flag_present
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	60                              # DW_AT_declaration
	.byte	25                              # DW_FORM_flag_present
	.byte	63                              # DW_AT_external
	.byte	25                              # DW_FORM_flag_present
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	71                              # Abbreviation Code
	.byte	46                              # DW_TAG_subprogram
	.byte	1                               # DW_CHILDREN_yes
	.byte	3                               # DW_AT_name
	.byte	38                              # DW_FORM_strx2
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	39                              # DW_AT_prototyped
	.byte	25                              # DW_FORM_flag_present
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	32                              # DW_AT_inline
	.byte	33                              # DW_FORM_implicit_const
	.byte	1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	72                              # Abbreviation Code
	.byte	46                              # DW_TAG_subprogram
	.byte	1                               # DW_CHILDREN_yes
	.byte	3                               # DW_AT_name
	.byte	38                              # DW_FORM_strx2
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	39                              # DW_AT_prototyped
	.byte	25                              # DW_FORM_flag_present
	.byte	60                              # DW_AT_declaration
	.byte	25                              # DW_FORM_flag_present
	.byte	63                              # DW_AT_external
	.byte	25                              # DW_FORM_flag_present
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	0                               # EOM(3)
	.section	.debug_info,"",@progbits
.Lcu_begin0:
	.long	.Ldebug_info_end0-.Ldebug_info_start0 # Length of Unit
.Ldebug_info_start0:
	.short	5                               # DWARF version number
	.byte	1                               # DWARF Unit Type
	.byte	8                               # Address Size (in bytes)
	.long	.debug_abbrev                   # Offset Into Abbrev. Section
	.byte	1                               # Abbrev [1] 0xc:0x114e DW_TAG_compile_unit
	.byte	0                               # DW_AT_producer
	.short	12                              # DW_AT_language
	.byte	1                               # DW_AT_name
	.long	.Lstr_offsets_base0             # DW_AT_str_offsets_base
	.long	.Lline_table_start0             # DW_AT_stmt_list
	.byte	2                               # DW_AT_comp_dir
	.byte	1                               # DW_AT_low_pc
	.long	.Lfunc_end9-.Lfunc_begin0       # DW_AT_high_pc
	.long	.Laddr_table_base0              # DW_AT_addr_base
	.long	.Lrnglists_table_base0          # DW_AT_rnglists_base
	.long	.Lloclists_table_base0          # DW_AT_loclists_base
	.byte	2                               # Abbrev [2] 0x2b:0x5 DW_TAG_base_type
	.short	271                             # DW_AT_name
	.byte	7                               # DW_AT_encoding
	.byte	4                               # DW_AT_byte_size
	.byte	2                               # Abbrev [2] 0x30:0x5 DW_TAG_base_type
	.short	270                             # DW_AT_name
	.byte	7                               # DW_AT_encoding
	.byte	1                               # DW_AT_byte_size
	.byte	3                               # Abbrev [3] 0x35:0x254 DW_TAG_subprogram
	.byte	3                               # DW_AT_low_pc
	.long	.Lfunc_end1-.Lfunc_begin1       # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	87
                                        # DW_AT_call_all_calls
	.short	272                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	284                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	2741                            # DW_AT_type
	.byte	4                               # Abbrev [4] 0x46:0xc DW_TAG_variable
	.byte	3                               # DW_AT_name
	.long	649                             # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.short	457                             # DW_AT_decl_line
	.byte	2                               # DW_AT_location
	.byte	161
	.byte	0
	.byte	5                               # Abbrev [5] 0x52:0xb DW_TAG_formal_parameter
	.byte	5                               # DW_AT_location
	.short	263                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	284                             # DW_AT_decl_line
	.long	2840                            # DW_AT_type
	.byte	5                               # Abbrev [5] 0x5d:0xb DW_TAG_formal_parameter
	.byte	6                               # DW_AT_location
	.short	278                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	284                             # DW_AT_decl_line
	.long	3322                            # DW_AT_type
	.byte	6                               # Abbrev [6] 0x68:0xa DW_TAG_formal_parameter
	.byte	7                               # DW_AT_location
	.byte	175                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	285                             # DW_AT_decl_line
	.long	1899                            # DW_AT_type
	.byte	6                               # Abbrev [6] 0x72:0xa DW_TAG_formal_parameter
	.byte	8                               # DW_AT_location
	.byte	179                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	286                             # DW_AT_decl_line
	.long	1934                            # DW_AT_type
	.byte	6                               # Abbrev [6] 0x7c:0xa DW_TAG_formal_parameter
	.byte	9                               # DW_AT_location
	.byte	180                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	286                             # DW_AT_decl_line
	.long	1680                            # DW_AT_type
	.byte	7                               # Abbrev [7] 0x86:0xa DW_TAG_variable
	.byte	10                              # DW_AT_location
	.byte	206                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	288                             # DW_AT_decl_line
	.long	4421                            # DW_AT_type
	.byte	7                               # Abbrev [7] 0x90:0xa DW_TAG_variable
	.byte	12                              # DW_AT_location
	.byte	182                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	303                             # DW_AT_decl_line
	.long	1984                            # DW_AT_type
	.byte	8                               # Abbrev [8] 0x9a:0xb DW_TAG_variable
	.byte	13                              # DW_AT_location
	.short	279                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	305                             # DW_AT_decl_line
	.long	2086                            # DW_AT_type
	.byte	7                               # Abbrev [7] 0xa5:0xa DW_TAG_variable
	.byte	14                              # DW_AT_location
	.byte	69                              # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	308                             # DW_AT_decl_line
	.long	1590                            # DW_AT_type
	.byte	8                               # Abbrev [8] 0xaf:0xb DW_TAG_variable
	.byte	15                              # DW_AT_location
	.short	280                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	308                             # DW_AT_decl_line
	.long	1680                            # DW_AT_type
	.byte	7                               # Abbrev [7] 0xba:0xa DW_TAG_variable
	.byte	16                              # DW_AT_location
	.byte	76                              # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	311                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	7                               # Abbrev [7] 0xc4:0xa DW_TAG_variable
	.byte	17                              # DW_AT_location
	.byte	77                              # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	312                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	7                               # Abbrev [7] 0xce:0xa DW_TAG_variable
	.byte	18                              # DW_AT_location
	.byte	78                              # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	313                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	7                               # Abbrev [7] 0xd8:0xa DW_TAG_variable
	.byte	19                              # DW_AT_location
	.byte	79                              # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	314                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	7                               # Abbrev [7] 0xe2:0xa DW_TAG_variable
	.byte	20                              # DW_AT_location
	.byte	80                              # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	315                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	7                               # Abbrev [7] 0xec:0xa DW_TAG_variable
	.byte	21                              # DW_AT_location
	.byte	81                              # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	317                             # DW_AT_decl_line
	.long	2056                            # DW_AT_type
	.byte	7                               # Abbrev [7] 0xf6:0xa DW_TAG_variable
	.byte	22                              # DW_AT_location
	.byte	161                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	321                             # DW_AT_decl_line
	.long	1674                            # DW_AT_type
	.byte	7                               # Abbrev [7] 0x100:0xa DW_TAG_variable
	.byte	23                              # DW_AT_location
	.byte	162                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	322                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	7                               # Abbrev [7] 0x10a:0xa DW_TAG_variable
	.byte	24                              # DW_AT_location
	.byte	163                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	323                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	7                               # Abbrev [7] 0x114:0xa DW_TAG_variable
	.byte	25                              # DW_AT_location
	.byte	164                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	324                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	7                               # Abbrev [7] 0x11e:0xa DW_TAG_variable
	.byte	26                              # DW_AT_location
	.byte	165                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	325                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	8                               # Abbrev [8] 0x128:0xb DW_TAG_variable
	.byte	27                              # DW_AT_location
	.short	281                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	331                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	8                               # Abbrev [8] 0x133:0xb DW_TAG_variable
	.byte	28                              # DW_AT_location
	.short	282                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	333                             # DW_AT_decl_line
	.long	2741                            # DW_AT_type
	.byte	8                               # Abbrev [8] 0x13e:0xb DW_TAG_variable
	.byte	29                              # DW_AT_location
	.short	283                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	308                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	9                               # Abbrev [9] 0x149:0x9 DW_TAG_variable
	.byte	83                              # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	327                             # DW_AT_decl_line
	.long	2056                            # DW_AT_type
	.byte	9                               # Abbrev [9] 0x152:0x9 DW_TAG_variable
	.byte	82                              # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	328                             # DW_AT_decl_line
	.long	2056                            # DW_AT_type
	.byte	10                              # Abbrev [10] 0x15b:0xa DW_TAG_variable
	.short	287                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	337                             # DW_AT_decl_line
	.long	4426                            # DW_AT_type
	.byte	11                              # Abbrev [11] 0x165:0x7 DW_TAG_label
	.short	286                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	788                             # DW_AT_decl_line
	.byte	42                              # DW_AT_low_pc
	.byte	12                              # Abbrev [12] 0x16c:0x11 DW_TAG_inlined_subroutine
	.long	1849                            # DW_AT_abstract_origin
	.byte	0                               # DW_AT_ranges
	.byte	0                               # DW_AT_call_file
	.short	293                             # DW_AT_call_line
	.byte	7                               # DW_AT_call_column
	.byte	13                              # Abbrev [13] 0x176:0x6 DW_TAG_formal_parameter
	.byte	11                              # DW_AT_location
	.long	1857                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	14                              # Abbrev [14] 0x17d:0x15 DW_TAG_inlined_subroutine
	.long	1944                            # DW_AT_abstract_origin
	.byte	4                               # DW_AT_low_pc
	.long	.Ltmp100-.Ltmp99                # DW_AT_high_pc
	.byte	0                               # DW_AT_call_file
	.short	361                             # DW_AT_call_line
	.byte	12                              # DW_AT_call_column
	.byte	15                              # Abbrev [15] 0x18b:0x6 DW_TAG_formal_parameter
	.byte	0                               # DW_AT_const_value
	.long	1960                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	16                              # Abbrev [16] 0x192:0x2f DW_TAG_lexical_block
	.byte	1                               # DW_AT_ranges
	.byte	8                               # Abbrev [8] 0x194:0xb DW_TAG_variable
	.byte	40                              # DW_AT_location
	.short	284                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	422                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	8                               # Abbrev [8] 0x19f:0xb DW_TAG_variable
	.byte	41                              # DW_AT_location
	.short	285                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	423                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	14                              # Abbrev [14] 0x1aa:0x16 DW_TAG_inlined_subroutine
	.long	1944                            # DW_AT_abstract_origin
	.byte	5                               # DW_AT_low_pc
	.long	.Ltmp1665-.Ltmp1664             # DW_AT_high_pc
	.byte	0                               # DW_AT_call_file
	.short	390                             # DW_AT_call_line
	.byte	11                              # DW_AT_call_column
	.byte	17                              # Abbrev [17] 0x1b8:0x7 DW_TAG_formal_parameter
	.byte	1                               # DW_AT_location
	.byte	86
	.long	1960                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	14                              # Abbrev [14] 0x1c1:0x15 DW_TAG_inlined_subroutine
	.long	2091                            # DW_AT_abstract_origin
	.byte	6                               # DW_AT_low_pc
	.long	.Ltmp1963-.Ltmp1957             # DW_AT_high_pc
	.byte	0                               # DW_AT_call_file
	.short	474                             # DW_AT_call_line
	.byte	8                               # DW_AT_call_column
	.byte	13                              # Abbrev [13] 0x1cf:0x6 DW_TAG_formal_parameter
	.byte	42                              # DW_AT_location
	.long	2107                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	12                              # Abbrev [12] 0x1d6:0x11 DW_TAG_inlined_subroutine
	.long	2061                            # DW_AT_abstract_origin
	.byte	2                               # DW_AT_ranges
	.byte	0                               # DW_AT_call_file
	.short	670                             # DW_AT_call_line
	.byte	8                               # DW_AT_call_column
	.byte	13                              # Abbrev [13] 0x1e0:0x6 DW_TAG_formal_parameter
	.byte	34                              # DW_AT_location
	.long	2077                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	14                              # Abbrev [14] 0x1e7:0x15 DW_TAG_inlined_subroutine
	.long	2061                            # DW_AT_abstract_origin
	.byte	7                               # DW_AT_low_pc
	.long	.Ltmp368-.Ltmp367               # DW_AT_high_pc
	.byte	0                               # DW_AT_call_file
	.short	687                             # DW_AT_call_line
	.byte	8                               # DW_AT_call_column
	.byte	15                              # Abbrev [15] 0x1f5:0x6 DW_TAG_formal_parameter
	.byte	0                               # DW_AT_const_value
	.long	2077                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	12                              # Abbrev [12] 0x1fc:0x11 DW_TAG_inlined_subroutine
	.long	2091                            # DW_AT_abstract_origin
	.byte	3                               # DW_AT_ranges
	.byte	0                               # DW_AT_call_file
	.short	706                             # DW_AT_call_line
	.byte	10                              # DW_AT_call_column
	.byte	13                              # Abbrev [13] 0x206:0x6 DW_TAG_formal_parameter
	.byte	30                              # DW_AT_location
	.long	2107                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	14                              # Abbrev [14] 0x20d:0x16 DW_TAG_inlined_subroutine
	.long	1944                            # DW_AT_abstract_origin
	.byte	8                               # DW_AT_low_pc
	.long	.Ltmp416-.Ltmp415               # DW_AT_high_pc
	.byte	0                               # DW_AT_call_file
	.short	706                             # DW_AT_call_line
	.byte	10                              # DW_AT_call_column
	.byte	17                              # Abbrev [17] 0x21b:0x7 DW_TAG_formal_parameter
	.byte	1                               # DW_AT_location
	.byte	86
	.long	1960                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	16                              # Abbrev [16] 0x223:0xd DW_TAG_lexical_block
	.byte	4                               # DW_AT_ranges
	.byte	7                               # Abbrev [7] 0x225:0xa DW_TAG_variable
	.byte	31                              # DW_AT_location
	.byte	189                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	731                             # DW_AT_decl_line
	.long	2056                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	18                              # Abbrev [18] 0x230:0x11 DW_TAG_lexical_block
	.byte	9                               # DW_AT_low_pc
	.long	.Ltmp474-.Ltmp472               # DW_AT_high_pc
	.byte	7                               # Abbrev [7] 0x236:0xa DW_TAG_variable
	.byte	32                              # DW_AT_location
	.byte	189                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	743                             # DW_AT_decl_line
	.long	2056                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	18                              # Abbrev [18] 0x241:0x11 DW_TAG_lexical_block
	.byte	10                              # DW_AT_low_pc
	.long	.Ltmp480-.Ltmp474               # DW_AT_high_pc
	.byte	7                               # Abbrev [7] 0x247:0xa DW_TAG_variable
	.byte	33                              # DW_AT_location
	.byte	189                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	752                             # DW_AT_decl_line
	.long	2056                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	12                              # Abbrev [12] 0x252:0x36 DW_TAG_inlined_subroutine
	.long	2121                            # DW_AT_abstract_origin
	.byte	5                               # DW_AT_ranges
	.byte	0                               # DW_AT_call_file
	.short	779                             # DW_AT_call_line
	.byte	7                               # DW_AT_call_column
	.byte	13                              # Abbrev [13] 0x25c:0x6 DW_TAG_formal_parameter
	.byte	35                              # DW_AT_location
	.long	2137                            # DW_AT_abstract_origin
	.byte	19                              # Abbrev [19] 0x262:0x6 DW_TAG_variable
	.byte	36                              # DW_AT_location
	.long	2153                            # DW_AT_abstract_origin
	.byte	19                              # Abbrev [19] 0x268:0x6 DW_TAG_variable
	.byte	37                              # DW_AT_location
	.long	2161                            # DW_AT_abstract_origin
	.byte	20                              # Abbrev [20] 0x26e:0x10 DW_TAG_inlined_subroutine
	.long	1944                            # DW_AT_abstract_origin
	.byte	6                               # DW_AT_ranges
	.byte	12                              # DW_AT_call_file
	.byte	142                             # DW_AT_call_line
	.byte	27                              # DW_AT_call_column
	.byte	13                              # Abbrev [13] 0x277:0x6 DW_TAG_formal_parameter
	.byte	38                              # DW_AT_location
	.long	1960                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	16                              # Abbrev [16] 0x27e:0x9 DW_TAG_lexical_block
	.byte	7                               # DW_AT_ranges
	.byte	19                              # Abbrev [19] 0x280:0x6 DW_TAG_variable
	.byte	39                              # DW_AT_location
	.long	2170                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	21                              # Abbrev [21] 0x289:0xc DW_TAG_array_type
	.long	661                             # DW_AT_type
	.byte	22                              # Abbrev [22] 0x28e:0x6 DW_TAG_subrange_type
	.long	723                             # DW_AT_type
	.byte	12                              # DW_AT_count
	.byte	0                               # End Of Children Mark
	.byte	23                              # Abbrev [23] 0x295:0x5 DW_TAG_const_type
	.long	666                             # DW_AT_type
	.byte	24                              # Abbrev [24] 0x29a:0x8 DW_TAG_typedef
	.long	674                             # DW_AT_type
	.byte	17                              # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	69                              # DW_AT_decl_line
	.byte	25                              # Abbrev [25] 0x2a2:0x2d DW_TAG_enumeration_type
	.long	719                             # DW_AT_type
	.byte	4                               # DW_AT_byte_size
	.byte	1                               # DW_AT_decl_file
	.byte	56                              # DW_AT_decl_line
	.byte	26                              # Abbrev [26] 0x2aa:0x3 DW_TAG_enumerator
	.byte	5                               # DW_AT_name
	.byte	0                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x2ad:0x3 DW_TAG_enumerator
	.byte	6                               # DW_AT_name
	.byte	1                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x2b0:0x3 DW_TAG_enumerator
	.byte	7                               # DW_AT_name
	.byte	2                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x2b3:0x3 DW_TAG_enumerator
	.byte	8                               # DW_AT_name
	.byte	3                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x2b6:0x3 DW_TAG_enumerator
	.byte	9                               # DW_AT_name
	.byte	4                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x2b9:0x3 DW_TAG_enumerator
	.byte	10                              # DW_AT_name
	.byte	5                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x2bc:0x3 DW_TAG_enumerator
	.byte	11                              # DW_AT_name
	.byte	6                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x2bf:0x3 DW_TAG_enumerator
	.byte	12                              # DW_AT_name
	.byte	7                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x2c2:0x3 DW_TAG_enumerator
	.byte	13                              # DW_AT_name
	.byte	8                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x2c5:0x3 DW_TAG_enumerator
	.byte	14                              # DW_AT_name
	.byte	9                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x2c8:0x3 DW_TAG_enumerator
	.byte	15                              # DW_AT_name
	.byte	10                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x2cb:0x3 DW_TAG_enumerator
	.byte	16                              # DW_AT_name
	.byte	11                              # DW_AT_const_value
	.byte	0                               # End Of Children Mark
	.byte	27                              # Abbrev [27] 0x2cf:0x4 DW_TAG_base_type
	.byte	4                               # DW_AT_name
	.byte	7                               # DW_AT_encoding
	.byte	4                               # DW_AT_byte_size
	.byte	28                              # Abbrev [28] 0x2d3:0x4 DW_TAG_base_type
	.byte	18                              # DW_AT_name
	.byte	8                               # DW_AT_byte_size
	.byte	7                               # DW_AT_encoding
	.byte	25                              # Abbrev [25] 0x2d7:0x2d DW_TAG_enumeration_type
	.long	719                             # DW_AT_type
	.byte	4                               # DW_AT_byte_size
	.byte	2                               # DW_AT_decl_file
	.byte	57                              # DW_AT_decl_line
	.byte	26                              # Abbrev [26] 0x2df:0x3 DW_TAG_enumerator
	.byte	19                              # DW_AT_name
	.byte	0                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x2e2:0x3 DW_TAG_enumerator
	.byte	20                              # DW_AT_name
	.byte	1                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x2e5:0x3 DW_TAG_enumerator
	.byte	21                              # DW_AT_name
	.byte	2                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x2e8:0x3 DW_TAG_enumerator
	.byte	22                              # DW_AT_name
	.byte	3                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x2eb:0x3 DW_TAG_enumerator
	.byte	23                              # DW_AT_name
	.byte	4                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x2ee:0x3 DW_TAG_enumerator
	.byte	24                              # DW_AT_name
	.byte	5                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x2f1:0x3 DW_TAG_enumerator
	.byte	25                              # DW_AT_name
	.byte	6                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x2f4:0x3 DW_TAG_enumerator
	.byte	26                              # DW_AT_name
	.byte	7                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x2f7:0x3 DW_TAG_enumerator
	.byte	27                              # DW_AT_name
	.byte	8                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x2fa:0x3 DW_TAG_enumerator
	.byte	28                              # DW_AT_name
	.byte	9                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x2fd:0x3 DW_TAG_enumerator
	.byte	29                              # DW_AT_name
	.byte	10                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x300:0x3 DW_TAG_enumerator
	.byte	30                              # DW_AT_name
	.byte	11                              # DW_AT_const_value
	.byte	0                               # End Of Children Mark
	.byte	25                              # Abbrev [25] 0x304:0xf DW_TAG_enumeration_type
	.long	719                             # DW_AT_type
	.byte	4                               # DW_AT_byte_size
	.byte	3                               # DW_AT_decl_file
	.byte	138                             # DW_AT_decl_line
	.byte	26                              # Abbrev [26] 0x30c:0x3 DW_TAG_enumerator
	.byte	31                              # DW_AT_name
	.byte	1                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x30f:0x3 DW_TAG_enumerator
	.byte	32                              # DW_AT_name
	.byte	2                               # DW_AT_const_value
	.byte	0                               # End Of Children Mark
	.byte	25                              # Abbrev [25] 0x313:0x18 DW_TAG_enumeration_type
	.long	719                             # DW_AT_type
	.byte	4                               # DW_AT_byte_size
	.byte	3                               # DW_AT_decl_file
	.byte	58                              # DW_AT_decl_line
	.byte	26                              # Abbrev [26] 0x31b:0x3 DW_TAG_enumerator
	.byte	33                              # DW_AT_name
	.byte	3                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x31e:0x3 DW_TAG_enumerator
	.byte	34                              # DW_AT_name
	.byte	4                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x321:0x3 DW_TAG_enumerator
	.byte	35                              # DW_AT_name
	.byte	18                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x324:0x3 DW_TAG_enumerator
	.byte	36                              # DW_AT_name
	.byte	19                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x327:0x3 DW_TAG_enumerator
	.byte	37                              # DW_AT_name
	.byte	20                              # DW_AT_const_value
	.byte	0                               # End Of Children Mark
	.byte	25                              # Abbrev [25] 0x32b:0xc DW_TAG_enumeration_type
	.long	719                             # DW_AT_type
	.byte	4                               # DW_AT_byte_size
	.byte	2                               # DW_AT_decl_file
	.byte	44                              # DW_AT_decl_line
	.byte	26                              # Abbrev [26] 0x333:0x3 DW_TAG_enumerator
	.byte	38                              # DW_AT_name
	.byte	0                               # DW_AT_const_value
	.byte	0                               # End Of Children Mark
	.byte	25                              # Abbrev [25] 0x337:0x15 DW_TAG_enumeration_type
	.long	719                             # DW_AT_type
	.byte	4                               # DW_AT_byte_size
	.byte	2                               # DW_AT_decl_file
	.byte	250                             # DW_AT_decl_line
	.byte	26                              # Abbrev [26] 0x33f:0x3 DW_TAG_enumerator
	.byte	39                              # DW_AT_name
	.byte	0                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x342:0x3 DW_TAG_enumerator
	.byte	40                              # DW_AT_name
	.byte	1                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x345:0x3 DW_TAG_enumerator
	.byte	41                              # DW_AT_name
	.byte	2                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x348:0x3 DW_TAG_enumerator
	.byte	42                              # DW_AT_name
	.byte	3                               # DW_AT_const_value
	.byte	0                               # End Of Children Mark
	.byte	25                              # Abbrev [25] 0x34c:0x15 DW_TAG_enumeration_type
	.long	719                             # DW_AT_type
	.byte	4                               # DW_AT_byte_size
	.byte	4                               # DW_AT_decl_file
	.byte	27                              # DW_AT_decl_line
	.byte	26                              # Abbrev [26] 0x354:0x3 DW_TAG_enumerator
	.byte	43                              # DW_AT_name
	.byte	0                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x357:0x3 DW_TAG_enumerator
	.byte	44                              # DW_AT_name
	.byte	1                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x35a:0x3 DW_TAG_enumerator
	.byte	45                              # DW_AT_name
	.byte	4                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x35d:0x3 DW_TAG_enumerator
	.byte	46                              # DW_AT_name
	.byte	10                              # DW_AT_const_value
	.byte	0                               # End Of Children Mark
	.byte	29                              # Abbrev [29] 0x361:0x202 DW_TAG_structure_type
	.byte	166                             # DW_AT_name
	.short	28352                           # DW_AT_byte_size
	.byte	0                               # DW_AT_decl_file
	.byte	164                             # DW_AT_decl_line
	.byte	30                              # Abbrev [30] 0x367:0x9 DW_TAG_member
	.byte	47                              # DW_AT_name
	.long	1379                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.byte	170                             # DW_AT_decl_line
	.byte	0                               # DW_AT_data_member_location
	.byte	31                              # Abbrev [31] 0x370:0xa DW_TAG_member
	.byte	52                              # DW_AT_name
	.long	1426                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.byte	173                             # DW_AT_decl_line
	.short	24576                           # DW_AT_data_member_location
	.byte	31                              # Abbrev [31] 0x37a:0xa DW_TAG_member
	.byte	53                              # DW_AT_name
	.long	1444                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.byte	176                             # DW_AT_decl_line
	.short	24960                           # DW_AT_data_member_location
	.byte	31                              # Abbrev [31] 0x384:0xa DW_TAG_member
	.byte	54                              # DW_AT_name
	.long	1444                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.byte	180                             # DW_AT_decl_line
	.short	24984                           # DW_AT_data_member_location
	.byte	31                              # Abbrev [31] 0x38e:0xa DW_TAG_member
	.byte	55                              # DW_AT_name
	.long	1444                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.byte	184                             # DW_AT_decl_line
	.short	25008                           # DW_AT_data_member_location
	.byte	31                              # Abbrev [31] 0x398:0xa DW_TAG_member
	.byte	56                              # DW_AT_name
	.long	1444                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.byte	187                             # DW_AT_decl_line
	.short	25032                           # DW_AT_data_member_location
	.byte	31                              # Abbrev [31] 0x3a2:0xa DW_TAG_member
	.byte	57                              # DW_AT_name
	.long	1426                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.byte	191                             # DW_AT_decl_line
	.short	25056                           # DW_AT_data_member_location
	.byte	31                              # Abbrev [31] 0x3ac:0xa DW_TAG_member
	.byte	58                              # DW_AT_name
	.long	1456                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.byte	196                             # DW_AT_decl_line
	.short	25440                           # DW_AT_data_member_location
	.byte	31                              # Abbrev [31] 0x3b6:0xa DW_TAG_member
	.byte	59                              # DW_AT_name
	.long	1474                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.byte	200                             # DW_AT_decl_line
	.short	25952                           # DW_AT_data_member_location
	.byte	31                              # Abbrev [31] 0x3c0:0xa DW_TAG_member
	.byte	60                              # DW_AT_name
	.long	1486                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.byte	204                             # DW_AT_decl_line
	.short	26180                           # DW_AT_data_member_location
	.byte	31                              # Abbrev [31] 0x3ca:0xa DW_TAG_member
	.byte	61                              # DW_AT_name
	.long	1498                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.byte	207                             # DW_AT_decl_line
	.short	26212                           # DW_AT_data_member_location
	.byte	31                              # Abbrev [31] 0x3d4:0xa DW_TAG_member
	.byte	68                              # DW_AT_name
	.long	1498                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.byte	210                             # DW_AT_decl_line
	.short	27240                           # DW_AT_data_member_location
	.byte	31                              # Abbrev [31] 0x3de:0xa DW_TAG_member
	.byte	69                              # DW_AT_name
	.long	1590                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.byte	217                             # DW_AT_decl_line
	.short	28268                           # DW_AT_data_member_location
	.byte	31                              # Abbrev [31] 0x3e8:0xa DW_TAG_member
	.byte	76                              # DW_AT_name
	.long	666                             # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.byte	220                             # DW_AT_decl_line
	.short	28280                           # DW_AT_data_member_location
	.byte	31                              # Abbrev [31] 0x3f2:0xa DW_TAG_member
	.byte	77                              # DW_AT_name
	.long	1630                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.byte	222                             # DW_AT_decl_line
	.short	28284                           # DW_AT_data_member_location
	.byte	31                              # Abbrev [31] 0x3fc:0xa DW_TAG_member
	.byte	78                              # DW_AT_name
	.long	1630                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.byte	223                             # DW_AT_decl_line
	.short	28288                           # DW_AT_data_member_location
	.byte	31                              # Abbrev [31] 0x406:0xa DW_TAG_member
	.byte	79                              # DW_AT_name
	.long	1630                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.byte	224                             # DW_AT_decl_line
	.short	28292                           # DW_AT_data_member_location
	.byte	31                              # Abbrev [31] 0x410:0xa DW_TAG_member
	.byte	80                              # DW_AT_name
	.long	1630                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.byte	225                             # DW_AT_decl_line
	.short	28296                           # DW_AT_data_member_location
	.byte	31                              # Abbrev [31] 0x41a:0xa DW_TAG_member
	.byte	81                              # DW_AT_name
	.long	1630                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.byte	227                             # DW_AT_decl_line
	.short	28300                           # DW_AT_data_member_location
	.byte	31                              # Abbrev [31] 0x424:0xa DW_TAG_member
	.byte	82                              # DW_AT_name
	.long	1630                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.byte	228                             # DW_AT_decl_line
	.short	28304                           # DW_AT_data_member_location
	.byte	31                              # Abbrev [31] 0x42e:0xa DW_TAG_member
	.byte	83                              # DW_AT_name
	.long	1630                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.byte	229                             # DW_AT_decl_line
	.short	28308                           # DW_AT_data_member_location
	.byte	31                              # Abbrev [31] 0x438:0xa DW_TAG_member
	.byte	84                              # DW_AT_name
	.long	1646                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.byte	233                             # DW_AT_decl_line
	.short	28312                           # DW_AT_data_member_location
	.byte	32                              # Abbrev [32] 0x442:0xb DW_TAG_member
	.byte	89                              # DW_AT_name
	.long	1101                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.short	260                             # DW_AT_decl_line
	.short	28320                           # DW_AT_data_member_location
	.byte	25                              # Abbrev [25] 0x44d:0xde DW_TAG_enumeration_type
	.long	719                             # DW_AT_type
	.byte	4                               # DW_AT_byte_size
	.byte	0                               # DW_AT_decl_file
	.byte	240                             # DW_AT_decl_line
	.byte	26                              # Abbrev [26] 0x455:0x3 DW_TAG_enumerator
	.byte	90                              # DW_AT_name
	.byte	0                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x458:0x3 DW_TAG_enumerator
	.byte	91                              # DW_AT_name
	.byte	1                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x45b:0x3 DW_TAG_enumerator
	.byte	92                              # DW_AT_name
	.byte	2                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x45e:0x3 DW_TAG_enumerator
	.byte	93                              # DW_AT_name
	.byte	3                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x461:0x3 DW_TAG_enumerator
	.byte	94                              # DW_AT_name
	.byte	4                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x464:0x3 DW_TAG_enumerator
	.byte	95                              # DW_AT_name
	.byte	5                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x467:0x3 DW_TAG_enumerator
	.byte	96                              # DW_AT_name
	.byte	6                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x46a:0x3 DW_TAG_enumerator
	.byte	97                              # DW_AT_name
	.byte	7                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x46d:0x3 DW_TAG_enumerator
	.byte	98                              # DW_AT_name
	.byte	8                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x470:0x3 DW_TAG_enumerator
	.byte	99                              # DW_AT_name
	.byte	9                               # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x473:0x3 DW_TAG_enumerator
	.byte	100                             # DW_AT_name
	.byte	10                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x476:0x3 DW_TAG_enumerator
	.byte	101                             # DW_AT_name
	.byte	11                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x479:0x3 DW_TAG_enumerator
	.byte	102                             # DW_AT_name
	.byte	12                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x47c:0x3 DW_TAG_enumerator
	.byte	103                             # DW_AT_name
	.byte	13                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x47f:0x3 DW_TAG_enumerator
	.byte	104                             # DW_AT_name
	.byte	14                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x482:0x3 DW_TAG_enumerator
	.byte	105                             # DW_AT_name
	.byte	15                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x485:0x3 DW_TAG_enumerator
	.byte	106                             # DW_AT_name
	.byte	16                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x488:0x3 DW_TAG_enumerator
	.byte	107                             # DW_AT_name
	.byte	17                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x48b:0x3 DW_TAG_enumerator
	.byte	108                             # DW_AT_name
	.byte	18                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x48e:0x3 DW_TAG_enumerator
	.byte	109                             # DW_AT_name
	.byte	19                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x491:0x3 DW_TAG_enumerator
	.byte	110                             # DW_AT_name
	.byte	20                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x494:0x3 DW_TAG_enumerator
	.byte	111                             # DW_AT_name
	.byte	21                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x497:0x3 DW_TAG_enumerator
	.byte	112                             # DW_AT_name
	.byte	22                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x49a:0x3 DW_TAG_enumerator
	.byte	113                             # DW_AT_name
	.byte	23                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x49d:0x3 DW_TAG_enumerator
	.byte	114                             # DW_AT_name
	.byte	24                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4a0:0x3 DW_TAG_enumerator
	.byte	115                             # DW_AT_name
	.byte	25                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4a3:0x3 DW_TAG_enumerator
	.byte	116                             # DW_AT_name
	.byte	26                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4a6:0x3 DW_TAG_enumerator
	.byte	117                             # DW_AT_name
	.byte	27                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4a9:0x3 DW_TAG_enumerator
	.byte	118                             # DW_AT_name
	.byte	28                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4ac:0x3 DW_TAG_enumerator
	.byte	119                             # DW_AT_name
	.byte	29                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4af:0x3 DW_TAG_enumerator
	.byte	120                             # DW_AT_name
	.byte	30                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4b2:0x3 DW_TAG_enumerator
	.byte	121                             # DW_AT_name
	.byte	31                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4b5:0x3 DW_TAG_enumerator
	.byte	122                             # DW_AT_name
	.byte	32                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4b8:0x3 DW_TAG_enumerator
	.byte	123                             # DW_AT_name
	.byte	33                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4bb:0x3 DW_TAG_enumerator
	.byte	124                             # DW_AT_name
	.byte	34                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4be:0x3 DW_TAG_enumerator
	.byte	125                             # DW_AT_name
	.byte	35                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4c1:0x3 DW_TAG_enumerator
	.byte	126                             # DW_AT_name
	.byte	36                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4c4:0x3 DW_TAG_enumerator
	.byte	127                             # DW_AT_name
	.byte	37                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4c7:0x3 DW_TAG_enumerator
	.byte	128                             # DW_AT_name
	.byte	38                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4ca:0x3 DW_TAG_enumerator
	.byte	129                             # DW_AT_name
	.byte	39                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4cd:0x3 DW_TAG_enumerator
	.byte	130                             # DW_AT_name
	.byte	40                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4d0:0x3 DW_TAG_enumerator
	.byte	131                             # DW_AT_name
	.byte	41                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4d3:0x3 DW_TAG_enumerator
	.byte	132                             # DW_AT_name
	.byte	42                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4d6:0x3 DW_TAG_enumerator
	.byte	133                             # DW_AT_name
	.byte	43                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4d9:0x3 DW_TAG_enumerator
	.byte	134                             # DW_AT_name
	.byte	44                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4dc:0x3 DW_TAG_enumerator
	.byte	135                             # DW_AT_name
	.byte	45                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4df:0x3 DW_TAG_enumerator
	.byte	136                             # DW_AT_name
	.byte	46                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4e2:0x3 DW_TAG_enumerator
	.byte	137                             # DW_AT_name
	.byte	47                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4e5:0x3 DW_TAG_enumerator
	.byte	138                             # DW_AT_name
	.byte	48                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4e8:0x3 DW_TAG_enumerator
	.byte	139                             # DW_AT_name
	.byte	49                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4eb:0x3 DW_TAG_enumerator
	.byte	140                             # DW_AT_name
	.byte	50                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4ee:0x3 DW_TAG_enumerator
	.byte	141                             # DW_AT_name
	.byte	51                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4f1:0x3 DW_TAG_enumerator
	.byte	142                             # DW_AT_name
	.byte	52                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4f4:0x3 DW_TAG_enumerator
	.byte	143                             # DW_AT_name
	.byte	53                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4f7:0x3 DW_TAG_enumerator
	.byte	144                             # DW_AT_name
	.byte	54                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4fa:0x3 DW_TAG_enumerator
	.byte	145                             # DW_AT_name
	.byte	55                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x4fd:0x3 DW_TAG_enumerator
	.byte	146                             # DW_AT_name
	.byte	56                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x500:0x3 DW_TAG_enumerator
	.byte	147                             # DW_AT_name
	.byte	57                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x503:0x3 DW_TAG_enumerator
	.byte	148                             # DW_AT_name
	.byte	58                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x506:0x3 DW_TAG_enumerator
	.byte	149                             # DW_AT_name
	.byte	59                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x509:0x3 DW_TAG_enumerator
	.byte	150                             # DW_AT_name
	.byte	60                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x50c:0x3 DW_TAG_enumerator
	.byte	151                             # DW_AT_name
	.byte	61                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x50f:0x3 DW_TAG_enumerator
	.byte	152                             # DW_AT_name
	.byte	62                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x512:0x3 DW_TAG_enumerator
	.byte	153                             # DW_AT_name
	.byte	63                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x515:0x3 DW_TAG_enumerator
	.byte	154                             # DW_AT_name
	.byte	64                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x518:0x3 DW_TAG_enumerator
	.byte	155                             # DW_AT_name
	.byte	65                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x51b:0x3 DW_TAG_enumerator
	.byte	156                             # DW_AT_name
	.byte	66                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x51e:0x3 DW_TAG_enumerator
	.byte	157                             # DW_AT_name
	.byte	67                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x521:0x3 DW_TAG_enumerator
	.byte	158                             # DW_AT_name
	.byte	68                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x524:0x3 DW_TAG_enumerator
	.byte	159                             # DW_AT_name
	.byte	69                              # DW_AT_const_value
	.byte	26                              # Abbrev [26] 0x527:0x3 DW_TAG_enumerator
	.byte	160                             # DW_AT_name
	.byte	70                              # DW_AT_const_value
	.byte	0                               # End Of Children Mark
	.byte	32                              # Abbrev [32] 0x52b:0xb DW_TAG_member
	.byte	161                             # DW_AT_name
	.long	1674                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.short	263                             # DW_AT_decl_line
	.short	28328                           # DW_AT_data_member_location
	.byte	32                              # Abbrev [32] 0x536:0xb DW_TAG_member
	.byte	162                             # DW_AT_name
	.long	1630                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.short	267                             # DW_AT_decl_line
	.short	28336                           # DW_AT_data_member_location
	.byte	32                              # Abbrev [32] 0x541:0xb DW_TAG_member
	.byte	163                             # DW_AT_name
	.long	1630                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.short	271                             # DW_AT_decl_line
	.short	28340                           # DW_AT_data_member_location
	.byte	32                              # Abbrev [32] 0x54c:0xb DW_TAG_member
	.byte	164                             # DW_AT_name
	.long	1630                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.short	275                             # DW_AT_decl_line
	.short	28344                           # DW_AT_data_member_location
	.byte	32                              # Abbrev [32] 0x557:0xb DW_TAG_member
	.byte	165                             # DW_AT_name
	.long	1630                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.short	279                             # DW_AT_decl_line
	.short	28348                           # DW_AT_data_member_location
	.byte	0                               # End Of Children Mark
	.byte	21                              # Abbrev [21] 0x563:0x13 DW_TAG_array_type
	.long	1398                            # DW_AT_type
	.byte	22                              # Abbrev [22] 0x568:0x6 DW_TAG_subrange_type
	.long	723                             # DW_AT_type
	.byte	16                              # DW_AT_count
	.byte	33                              # Abbrev [33] 0x56e:0x7 DW_TAG_subrange_type
	.long	723                             # DW_AT_type
	.short	768                             # DW_AT_count
	.byte	0                               # End Of Children Mark
	.byte	24                              # Abbrev [24] 0x576:0x8 DW_TAG_typedef
	.long	1406                            # DW_AT_type
	.byte	51                              # DW_AT_name
	.byte	7                               # DW_AT_decl_file
	.byte	71                              # DW_AT_decl_line
	.byte	24                              # Abbrev [24] 0x57e:0x8 DW_TAG_typedef
	.long	1414                            # DW_AT_type
	.byte	50                              # DW_AT_name
	.byte	6                               # DW_AT_decl_file
	.byte	25                              # DW_AT_decl_line
	.byte	24                              # Abbrev [24] 0x586:0x8 DW_TAG_typedef
	.long	1422                            # DW_AT_type
	.byte	49                              # DW_AT_name
	.byte	5                               # DW_AT_decl_file
	.byte	40                              # DW_AT_decl_line
	.byte	27                              # Abbrev [27] 0x58e:0x4 DW_TAG_base_type
	.byte	48                              # DW_AT_name
	.byte	7                               # DW_AT_encoding
	.byte	2                               # DW_AT_byte_size
	.byte	21                              # Abbrev [21] 0x592:0x12 DW_TAG_array_type
	.long	1398                            # DW_AT_type
	.byte	22                              # Abbrev [22] 0x597:0x6 DW_TAG_subrange_type
	.long	723                             # DW_AT_type
	.byte	12                              # DW_AT_count
	.byte	22                              # Abbrev [22] 0x59d:0x6 DW_TAG_subrange_type
	.long	723                             # DW_AT_type
	.byte	16                              # DW_AT_count
	.byte	0                               # End Of Children Mark
	.byte	21                              # Abbrev [21] 0x5a4:0xc DW_TAG_array_type
	.long	1398                            # DW_AT_type
	.byte	22                              # Abbrev [22] 0x5a9:0x6 DW_TAG_subrange_type
	.long	723                             # DW_AT_type
	.byte	12                              # DW_AT_count
	.byte	0                               # End Of Children Mark
	.byte	21                              # Abbrev [21] 0x5b0:0x12 DW_TAG_array_type
	.long	1398                            # DW_AT_type
	.byte	22                              # Abbrev [22] 0x5b5:0x6 DW_TAG_subrange_type
	.long	723                             # DW_AT_type
	.byte	4                               # DW_AT_count
	.byte	22                              # Abbrev [22] 0x5bb:0x6 DW_TAG_subrange_type
	.long	723                             # DW_AT_type
	.byte	64                              # DW_AT_count
	.byte	0                               # End Of Children Mark
	.byte	21                              # Abbrev [21] 0x5c2:0xc DW_TAG_array_type
	.long	1398                            # DW_AT_type
	.byte	22                              # Abbrev [22] 0x5c7:0x6 DW_TAG_subrange_type
	.long	723                             # DW_AT_type
	.byte	114                             # DW_AT_count
	.byte	0                               # End Of Children Mark
	.byte	21                              # Abbrev [21] 0x5ce:0xc DW_TAG_array_type
	.long	1398                            # DW_AT_type
	.byte	22                              # Abbrev [22] 0x5d3:0x6 DW_TAG_subrange_type
	.long	723                             # DW_AT_type
	.byte	16                              # DW_AT_count
	.byte	0                               # End Of Children Mark
	.byte	24                              # Abbrev [24] 0x5da:0x8 DW_TAG_typedef
	.long	1506                            # DW_AT_type
	.byte	67                              # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.byte	161                             # DW_AT_decl_line
	.byte	34                              # Abbrev [34] 0x5e2:0x35 DW_TAG_structure_type
	.short	1028                            # DW_AT_byte_size
	.byte	0                               # DW_AT_decl_file
	.byte	155                             # DW_AT_decl_line
	.byte	30                              # Abbrev [30] 0x5e7:0x9 DW_TAG_member
	.byte	62                              # DW_AT_name
	.long	1398                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.byte	156                             # DW_AT_decl_line
	.byte	0                               # DW_AT_data_member_location
	.byte	30                              # Abbrev [30] 0x5f0:0x9 DW_TAG_member
	.byte	63                              # DW_AT_name
	.long	1398                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.byte	157                             # DW_AT_decl_line
	.byte	2                               # DW_AT_data_member_location
	.byte	30                              # Abbrev [30] 0x5f9:0x9 DW_TAG_member
	.byte	64                              # DW_AT_name
	.long	1559                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.byte	158                             # DW_AT_decl_line
	.byte	4                               # DW_AT_data_member_location
	.byte	31                              # Abbrev [31] 0x602:0xa DW_TAG_member
	.byte	65                              # DW_AT_name
	.long	1559                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.byte	159                             # DW_AT_decl_line
	.short	260                             # DW_AT_data_member_location
	.byte	31                              # Abbrev [31] 0x60c:0xa DW_TAG_member
	.byte	66                              # DW_AT_name
	.long	1577                            # DW_AT_type
	.byte	0                               # DW_AT_decl_file
	.byte	160                             # DW_AT_decl_line
	.short	516                             # DW_AT_data_member_location
	.byte	0                               # End Of Children Mark
	.byte	21                              # Abbrev [21] 0x617:0x12 DW_TAG_array_type
	.long	1398                            # DW_AT_type
	.byte	22                              # Abbrev [22] 0x61c:0x6 DW_TAG_subrange_type
	.long	723                             # DW_AT_type
	.byte	16                              # DW_AT_count
	.byte	22                              # Abbrev [22] 0x622:0x6 DW_TAG_subrange_type
	.long	723                             # DW_AT_type
	.byte	8                               # DW_AT_count
	.byte	0                               # End Of Children Mark
	.byte	21                              # Abbrev [21] 0x629:0xd DW_TAG_array_type
	.long	1398                            # DW_AT_type
	.byte	33                              # Abbrev [33] 0x62e:0x7 DW_TAG_subrange_type
	.long	723                             # DW_AT_type
	.short	256                             # DW_AT_count
	.byte	0                               # End Of Children Mark
	.byte	24                              # Abbrev [24] 0x636:0x8 DW_TAG_typedef
	.long	1598                            # DW_AT_type
	.byte	75                              # DW_AT_name
	.byte	8                               # DW_AT_decl_file
	.byte	24                              # DW_AT_decl_line
	.byte	35                              # Abbrev [35] 0x63e:0x20 DW_TAG_structure_type
	.byte	12                              # DW_AT_byte_size
	.byte	8                               # DW_AT_decl_file
	.byte	20                              # DW_AT_decl_line
	.byte	30                              # Abbrev [30] 0x642:0x9 DW_TAG_member
	.byte	70                              # DW_AT_name
	.long	1630                            # DW_AT_type
	.byte	8                               # DW_AT_decl_file
	.byte	21                              # DW_AT_decl_line
	.byte	0                               # DW_AT_data_member_location
	.byte	30                              # Abbrev [30] 0x64b:0x9 DW_TAG_member
	.byte	73                              # DW_AT_name
	.long	1630                            # DW_AT_type
	.byte	8                               # DW_AT_decl_file
	.byte	22                              # DW_AT_decl_line
	.byte	4                               # DW_AT_data_member_location
	.byte	30                              # Abbrev [30] 0x654:0x9 DW_TAG_member
	.byte	74                              # DW_AT_name
	.long	1630                            # DW_AT_type
	.byte	8                               # DW_AT_decl_file
	.byte	23                              # DW_AT_decl_line
	.byte	8                               # DW_AT_data_member_location
	.byte	0                               # End Of Children Mark
	.byte	24                              # Abbrev [24] 0x65e:0x8 DW_TAG_typedef
	.long	1638                            # DW_AT_type
	.byte	72                              # DW_AT_name
	.byte	6                               # DW_AT_decl_file
	.byte	26                              # DW_AT_decl_line
	.byte	24                              # Abbrev [24] 0x666:0x8 DW_TAG_typedef
	.long	719                             # DW_AT_type
	.byte	71                              # DW_AT_name
	.byte	5                               # DW_AT_decl_file
	.byte	42                              # DW_AT_decl_line
	.byte	24                              # Abbrev [24] 0x66e:0x8 DW_TAG_typedef
	.long	1654                            # DW_AT_type
	.byte	88                              # DW_AT_name
	.byte	9                               # DW_AT_decl_file
	.byte	63                              # DW_AT_decl_line
	.byte	24                              # Abbrev [24] 0x676:0x8 DW_TAG_typedef
	.long	1662                            # DW_AT_type
	.byte	87                              # DW_AT_name
	.byte	6                               # DW_AT_decl_file
	.byte	27                              # DW_AT_decl_line
	.byte	24                              # Abbrev [24] 0x67e:0x8 DW_TAG_typedef
	.long	1670                            # DW_AT_type
	.byte	86                              # DW_AT_name
	.byte	5                               # DW_AT_decl_file
	.byte	45                              # DW_AT_decl_line
	.byte	27                              # Abbrev [27] 0x686:0x4 DW_TAG_base_type
	.byte	85                              # DW_AT_name
	.byte	7                               # DW_AT_encoding
	.byte	8                               # DW_AT_byte_size
	.byte	36                              # Abbrev [36] 0x68a:0x5 DW_TAG_pointer_type
	.long	1398                            # DW_AT_type
	.byte	37                              # Abbrev [37] 0x68f:0x1 DW_TAG_pointer_type
	.byte	24                              # Abbrev [24] 0x690:0x8 DW_TAG_typedef
	.long	1670                            # DW_AT_type
	.byte	167                             # DW_AT_name
	.byte	10                              # DW_AT_decl_file
	.byte	18                              # DW_AT_decl_line
	.byte	38                              # Abbrev [38] 0x698:0x31 DW_TAG_subprogram
	.byte	1                               # DW_AT_low_pc
	.long	.Lfunc_end0-.Lfunc_begin0       # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	87
                                        # DW_AT_call_all_calls
	.long	3715                            # DW_AT_abstract_origin
	.byte	13                              # Abbrev [13] 0x6a4:0x6 DW_TAG_formal_parameter
	.byte	0                               # DW_AT_location
	.long	3725                            # DW_AT_abstract_origin
	.byte	13                              # Abbrev [13] 0x6aa:0x6 DW_TAG_formal_parameter
	.byte	1                               # DW_AT_location
	.long	3735                            # DW_AT_abstract_origin
	.byte	13                              # Abbrev [13] 0x6b0:0x6 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.long	3745                            # DW_AT_abstract_origin
	.byte	13                              # Abbrev [13] 0x6b6:0x6 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.long	3755                            # DW_AT_abstract_origin
	.byte	19                              # Abbrev [19] 0x6bc:0x6 DW_TAG_variable
	.byte	4                               # DW_AT_location
	.long	3765                            # DW_AT_abstract_origin
	.byte	39                              # Abbrev [39] 0x6c2:0x6 DW_TAG_call_site
	.long	1737                            # DW_AT_call_origin
	.byte	2                               # DW_AT_call_return_pc
	.byte	0                               # End Of Children Mark
	.byte	40                              # Abbrev [40] 0x6c9:0x13 DW_TAG_subprogram
	.byte	168                             # DW_AT_name
	.byte	11                              # DW_AT_decl_file
	.byte	211                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	1679                            # DW_AT_type
                                        # DW_AT_declaration
                                        # DW_AT_external
	.byte	41                              # Abbrev [41] 0x6d1:0x5 DW_TAG_formal_parameter
	.long	1680                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0x6d6:0x5 DW_TAG_formal_parameter
	.long	1756                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	36                              # Abbrev [36] 0x6dc:0x5 DW_TAG_pointer_type
	.long	1761                            # DW_AT_type
	.byte	42                              # Abbrev [42] 0x6e1:0x9 DW_TAG_typedef
	.long	1770                            # DW_AT_type
	.byte	172                             # DW_AT_name
	.byte	2                               # DW_AT_decl_file
	.short	403                             # DW_AT_decl_line
	.byte	43                              # Abbrev [43] 0x6ea:0x24 DW_TAG_structure_type
	.byte	24                              # DW_AT_byte_size
	.byte	2                               # DW_AT_decl_file
	.short	341                             # DW_AT_decl_line
	.byte	44                              # Abbrev [44] 0x6ef:0xa DW_TAG_member
	.byte	169                             # DW_AT_name
	.long	1806                            # DW_AT_type
	.byte	2                               # DW_AT_decl_file
	.short	376                             # DW_AT_decl_line
	.byte	0                               # DW_AT_data_member_location
	.byte	44                              # Abbrev [44] 0x6f9:0xa DW_TAG_member
	.byte	170                             # DW_AT_name
	.long	1832                            # DW_AT_type
	.byte	2                               # DW_AT_decl_file
	.short	390                             # DW_AT_decl_line
	.byte	8                               # DW_AT_data_member_location
	.byte	44                              # Abbrev [44] 0x703:0xa DW_TAG_member
	.byte	171                             # DW_AT_name
	.long	1679                            # DW_AT_type
	.byte	2                               # DW_AT_decl_file
	.short	401                             # DW_AT_decl_line
	.byte	16                              # DW_AT_data_member_location
	.byte	0                               # End Of Children Mark
	.byte	36                              # Abbrev [36] 0x70e:0x5 DW_TAG_pointer_type
	.long	1811                            # DW_AT_type
	.byte	45                              # Abbrev [45] 0x713:0x15 DW_TAG_subroutine_type
	.long	1679                            # DW_AT_type
                                        # DW_AT_prototyped
	.byte	41                              # Abbrev [41] 0x718:0x5 DW_TAG_formal_parameter
	.long	1679                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0x71d:0x5 DW_TAG_formal_parameter
	.long	1680                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0x722:0x5 DW_TAG_formal_parameter
	.long	1680                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	36                              # Abbrev [36] 0x728:0x5 DW_TAG_pointer_type
	.long	1837                            # DW_AT_type
	.byte	46                              # Abbrev [46] 0x72d:0xc DW_TAG_subroutine_type
                                        # DW_AT_prototyped
	.byte	41                              # Abbrev [41] 0x72e:0x5 DW_TAG_formal_parameter
	.long	1679                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0x733:0x5 DW_TAG_formal_parameter
	.long	1679                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	47                              # Abbrev [47] 0x739:0x29 DW_TAG_subprogram
	.byte	173                             # DW_AT_name
	.byte	8                               # DW_AT_decl_file
	.byte	29                              # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	1890                            # DW_AT_type
                                        # DW_AT_inline
	.byte	48                              # Abbrev [48] 0x741:0x8 DW_TAG_formal_parameter
	.byte	69                              # DW_AT_name
	.byte	8                               # DW_AT_decl_file
	.byte	29                              # DW_AT_decl_line
	.long	1894                            # DW_AT_type
	.byte	48                              # Abbrev [48] 0x749:0x8 DW_TAG_formal_parameter
	.byte	175                             # DW_AT_name
	.byte	8                               # DW_AT_decl_file
	.byte	29                              # DW_AT_decl_line
	.long	1899                            # DW_AT_type
	.byte	48                              # Abbrev [48] 0x751:0x8 DW_TAG_formal_parameter
	.byte	179                             # DW_AT_name
	.byte	8                               # DW_AT_decl_file
	.byte	30                              # DW_AT_decl_line
	.long	1934                            # DW_AT_type
	.byte	48                              # Abbrev [48] 0x759:0x8 DW_TAG_formal_parameter
	.byte	180                             # DW_AT_name
	.byte	8                               # DW_AT_decl_file
	.byte	30                              # DW_AT_decl_line
	.long	1680                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	27                              # Abbrev [27] 0x762:0x4 DW_TAG_base_type
	.byte	174                             # DW_AT_name
	.byte	2                               # DW_AT_encoding
	.byte	1                               # DW_AT_byte_size
	.byte	36                              # Abbrev [36] 0x766:0x5 DW_TAG_pointer_type
	.long	1590                            # DW_AT_type
	.byte	49                              # Abbrev [49] 0x76b:0x5 DW_TAG_restrict_type
	.long	1904                            # DW_AT_type
	.byte	36                              # Abbrev [36] 0x770:0x5 DW_TAG_pointer_type
	.long	1909                            # DW_AT_type
	.byte	23                              # Abbrev [23] 0x775:0x5 DW_TAG_const_type
	.long	1914                            # DW_AT_type
	.byte	24                              # Abbrev [24] 0x77a:0x8 DW_TAG_typedef
	.long	1922                            # DW_AT_type
	.byte	178                             # DW_AT_name
	.byte	6                               # DW_AT_decl_file
	.byte	24                              # DW_AT_decl_line
	.byte	24                              # Abbrev [24] 0x782:0x8 DW_TAG_typedef
	.long	1930                            # DW_AT_type
	.byte	177                             # DW_AT_name
	.byte	5                               # DW_AT_decl_file
	.byte	38                              # DW_AT_decl_line
	.byte	27                              # Abbrev [27] 0x78a:0x4 DW_TAG_base_type
	.byte	176                             # DW_AT_name
	.byte	8                               # DW_AT_encoding
	.byte	1                               # DW_AT_byte_size
	.byte	49                              # Abbrev [49] 0x78e:0x5 DW_TAG_restrict_type
	.long	1939                            # DW_AT_type
	.byte	36                              # Abbrev [36] 0x793:0x5 DW_TAG_pointer_type
	.long	1680                            # DW_AT_type
	.byte	47                              # Abbrev [47] 0x798:0x19 DW_TAG_subprogram
	.byte	181                             # DW_AT_name
	.byte	12                              # DW_AT_decl_file
	.byte	103                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	1914                            # DW_AT_type
                                        # DW_AT_inline
	.byte	48                              # Abbrev [48] 0x7a0:0x8 DW_TAG_formal_parameter
	.byte	182                             # DW_AT_name
	.byte	12                              # DW_AT_decl_file
	.byte	103                             # DW_AT_decl_line
	.long	1969                            # DW_AT_type
	.byte	48                              # Abbrev [48] 0x7a8:0x8 DW_TAG_formal_parameter
	.byte	189                             # DW_AT_name
	.byte	12                              # DW_AT_decl_file
	.byte	103                             # DW_AT_decl_line
	.long	2056                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	23                              # Abbrev [23] 0x7b1:0x5 DW_TAG_const_type
	.long	1974                            # DW_AT_type
	.byte	36                              # Abbrev [36] 0x7b6:0x5 DW_TAG_pointer_type
	.long	1979                            # DW_AT_type
	.byte	23                              # Abbrev [23] 0x7bb:0x5 DW_TAG_const_type
	.long	1984                            # DW_AT_type
	.byte	24                              # Abbrev [24] 0x7c0:0x8 DW_TAG_typedef
	.long	1992                            # DW_AT_type
	.byte	188                             # DW_AT_name
	.byte	12                              # DW_AT_decl_file
	.byte	44                              # DW_AT_decl_line
	.byte	35                              # Abbrev [35] 0x7c8:0x3b DW_TAG_structure_type
	.byte	48                              # DW_AT_byte_size
	.byte	12                              # DW_AT_decl_file
	.byte	20                              # DW_AT_decl_line
	.byte	30                              # Abbrev [30] 0x7cc:0x9 DW_TAG_member
	.byte	183                             # DW_AT_name
	.long	2051                            # DW_AT_type
	.byte	12                              # DW_AT_decl_file
	.byte	24                              # DW_AT_decl_line
	.byte	0                               # DW_AT_data_member_location
	.byte	30                              # Abbrev [30] 0x7d5:0x9 DW_TAG_member
	.byte	184                             # DW_AT_name
	.long	1680                            # DW_AT_type
	.byte	12                              # DW_AT_decl_file
	.byte	28                              # DW_AT_decl_line
	.byte	8                               # DW_AT_data_member_location
	.byte	30                              # Abbrev [30] 0x7de:0x9 DW_TAG_member
	.byte	185                             # DW_AT_name
	.long	1680                            # DW_AT_type
	.byte	12                              # DW_AT_decl_file
	.byte	33                              # DW_AT_decl_line
	.byte	16                              # DW_AT_data_member_location
	.byte	30                              # Abbrev [30] 0x7e7:0x9 DW_TAG_member
	.byte	163                             # DW_AT_name
	.long	1680                            # DW_AT_type
	.byte	12                              # DW_AT_decl_file
	.byte	36                              # DW_AT_decl_line
	.byte	24                              # DW_AT_data_member_location
	.byte	30                              # Abbrev [30] 0x7f0:0x9 DW_TAG_member
	.byte	186                             # DW_AT_name
	.long	1680                            # DW_AT_type
	.byte	12                              # DW_AT_decl_file
	.byte	39                              # DW_AT_decl_line
	.byte	32                              # DW_AT_data_member_location
	.byte	30                              # Abbrev [30] 0x7f9:0x9 DW_TAG_member
	.byte	187                             # DW_AT_name
	.long	1890                            # DW_AT_type
	.byte	12                              # DW_AT_decl_file
	.byte	42                              # DW_AT_decl_line
	.byte	40                              # DW_AT_data_member_location
	.byte	0                               # End Of Children Mark
	.byte	36                              # Abbrev [36] 0x803:0x5 DW_TAG_pointer_type
	.long	1914                            # DW_AT_type
	.byte	23                              # Abbrev [23] 0x808:0x5 DW_TAG_const_type
	.long	1630                            # DW_AT_type
	.byte	47                              # Abbrev [47] 0x80d:0x19 DW_TAG_subprogram
	.byte	190                             # DW_AT_name
	.byte	12                              # DW_AT_decl_file
	.byte	120                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	1890                            # DW_AT_type
                                        # DW_AT_inline
	.byte	48                              # Abbrev [48] 0x815:0x8 DW_TAG_formal_parameter
	.byte	182                             # DW_AT_name
	.byte	12                              # DW_AT_decl_file
	.byte	120                             # DW_AT_decl_line
	.long	1969                            # DW_AT_type
	.byte	48                              # Abbrev [48] 0x81d:0x8 DW_TAG_formal_parameter
	.byte	189                             # DW_AT_name
	.byte	12                              # DW_AT_decl_file
	.byte	120                             # DW_AT_decl_line
	.long	2086                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	23                              # Abbrev [23] 0x826:0x5 DW_TAG_const_type
	.long	1680                            # DW_AT_type
	.byte	47                              # Abbrev [47] 0x82b:0x19 DW_TAG_subprogram
	.byte	191                             # DW_AT_name
	.byte	12                              # DW_AT_decl_file
	.byte	187                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	1890                            # DW_AT_type
                                        # DW_AT_inline
	.byte	48                              # Abbrev [48] 0x833:0x8 DW_TAG_formal_parameter
	.byte	182                             # DW_AT_name
	.byte	12                              # DW_AT_decl_file
	.byte	187                             # DW_AT_decl_line
	.long	2116                            # DW_AT_type
	.byte	48                              # Abbrev [48] 0x83b:0x8 DW_TAG_formal_parameter
	.byte	192                             # DW_AT_name
	.byte	12                              # DW_AT_decl_file
	.byte	187                             # DW_AT_decl_line
	.long	1914                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	36                              # Abbrev [36] 0x844:0x5 DW_TAG_pointer_type
	.long	1984                            # DW_AT_type
	.byte	47                              # Abbrev [47] 0x849:0x43 DW_TAG_subprogram
	.byte	193                             # DW_AT_name
	.byte	12                              # DW_AT_decl_file
	.byte	128                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	1890                            # DW_AT_type
                                        # DW_AT_inline
	.byte	48                              # Abbrev [48] 0x851:0x8 DW_TAG_formal_parameter
	.byte	182                             # DW_AT_name
	.byte	12                              # DW_AT_decl_file
	.byte	128                             # DW_AT_decl_line
	.long	2116                            # DW_AT_type
	.byte	48                              # Abbrev [48] 0x859:0x8 DW_TAG_formal_parameter
	.byte	189                             # DW_AT_name
	.byte	12                              # DW_AT_decl_file
	.byte	128                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	48                              # Abbrev [48] 0x861:0x8 DW_TAG_formal_parameter
	.byte	165                             # DW_AT_name
	.byte	12                              # DW_AT_decl_file
	.byte	128                             # DW_AT_decl_line
	.long	2188                            # DW_AT_type
	.byte	50                              # Abbrev [50] 0x869:0x8 DW_TAG_variable
	.byte	194                             # DW_AT_name
	.byte	12                              # DW_AT_decl_file
	.byte	131                             # DW_AT_decl_line
	.long	2086                            # DW_AT_type
	.byte	50                              # Abbrev [50] 0x871:0x8 DW_TAG_variable
	.byte	195                             # DW_AT_name
	.byte	12                              # DW_AT_decl_file
	.byte	132                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	51                              # Abbrev [51] 0x879:0x12 DW_TAG_lexical_block
	.byte	50                              # Abbrev [50] 0x87a:0x8 DW_TAG_variable
	.byte	196                             # DW_AT_name
	.byte	12                              # DW_AT_decl_file
	.byte	160                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	50                              # Abbrev [50] 0x882:0x8 DW_TAG_variable
	.byte	197                             # DW_AT_name
	.byte	12                              # DW_AT_decl_file
	.byte	158                             # DW_AT_decl_line
	.long	2056                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	36                              # Abbrev [36] 0x88c:0x5 DW_TAG_pointer_type
	.long	1630                            # DW_AT_type
	.byte	52                              # Abbrev [52] 0x891:0x39 DW_TAG_subprogram
	.byte	198                             # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	129                             # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_inline
	.byte	48                              # Abbrev [48] 0x895:0x8 DW_TAG_formal_parameter
	.byte	161                             # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	129                             # DW_AT_decl_line
	.long	2250                            # DW_AT_type
	.byte	48                              # Abbrev [48] 0x89d:0x8 DW_TAG_formal_parameter
	.byte	199                             # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	130                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	48                              # Abbrev [48] 0x8a5:0x8 DW_TAG_formal_parameter
	.byte	200                             # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	130                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	50                              # Abbrev [50] 0x8ad:0x8 DW_TAG_variable
	.byte	201                             # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	134                             # DW_AT_decl_line
	.long	2056                            # DW_AT_type
	.byte	51                              # Abbrev [51] 0x8b5:0x14 DW_TAG_lexical_block
	.byte	50                              # Abbrev [50] 0x8b6:0x8 DW_TAG_variable
	.byte	202                             # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	136                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	51                              # Abbrev [51] 0x8be:0xa DW_TAG_lexical_block
	.byte	50                              # Abbrev [50] 0x8bf:0x8 DW_TAG_variable
	.byte	203                             # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	137                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	36                              # Abbrev [36] 0x8ca:0x5 DW_TAG_pointer_type
	.long	2255                            # DW_AT_type
	.byte	21                              # Abbrev [21] 0x8cf:0xd DW_TAG_array_type
	.long	1398                            # DW_AT_type
	.byte	33                              # Abbrev [33] 0x8d4:0x7 DW_TAG_subrange_type
	.long	723                             # DW_AT_type
	.short	768                             # DW_AT_count
	.byte	0                               # End Of Children Mark
	.byte	53                              # Abbrev [53] 0x8dc:0x15e DW_TAG_subprogram
	.byte	11                              # DW_AT_low_pc
	.long	.Lfunc_end2-.Lfunc_begin2       # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	87
                                        # DW_AT_call_all_calls
	.short	273                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	856                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.byte	54                              # Abbrev [54] 0x8e9:0xc DW_TAG_formal_parameter
	.byte	1                               # DW_AT_location
	.byte	85
	.short	263                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	856                             # DW_AT_decl_line
	.long	2840                            # DW_AT_type
	.byte	5                               # Abbrev [5] 0x8f5:0xb DW_TAG_formal_parameter
	.byte	43                              # DW_AT_location
	.short	260                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	856                             # DW_AT_decl_line
	.long	3344                            # DW_AT_type
	.byte	55                              # Abbrev [55] 0x900:0xb DW_TAG_variable
	.byte	1                               # DW_AT_location
	.byte	85
	.byte	206                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	858                             # DW_AT_decl_line
	.long	3810                            # DW_AT_type
	.byte	7                               # Abbrev [7] 0x90b:0xa DW_TAG_variable
	.byte	44                              # DW_AT_location
	.byte	219                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	859                             # DW_AT_decl_line
	.long	3429                            # DW_AT_type
	.byte	8                               # Abbrev [8] 0x915:0xb DW_TAG_variable
	.byte	52                              # DW_AT_location
	.short	289                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	906                             # DW_AT_decl_line
	.long	2056                            # DW_AT_type
	.byte	14                              # Abbrev [14] 0x920:0x38 DW_TAG_inlined_subroutine
	.long	2193                            # DW_AT_abstract_origin
	.byte	12                              # DW_AT_low_pc
	.long	.Ltmp2501-.Ltmp2492             # DW_AT_high_pc
	.byte	0                               # DW_AT_call_file
	.short	868                             # DW_AT_call_line
	.byte	2                               # DW_AT_call_column
	.byte	17                              # Abbrev [17] 0x92e:0x7 DW_TAG_formal_parameter
	.byte	1                               # DW_AT_location
	.byte	85
	.long	2197                            # DW_AT_abstract_origin
	.byte	13                              # Abbrev [13] 0x935:0x6 DW_TAG_formal_parameter
	.byte	45                              # DW_AT_location
	.long	2213                            # DW_AT_abstract_origin
	.byte	19                              # Abbrev [19] 0x93b:0x6 DW_TAG_variable
	.byte	46                              # DW_AT_location
	.long	2221                            # DW_AT_abstract_origin
	.byte	18                              # Abbrev [18] 0x941:0x16 DW_TAG_lexical_block
	.byte	13                              # DW_AT_low_pc
	.long	.Ltmp2501-.Ltmp2495             # DW_AT_high_pc
	.byte	19                              # Abbrev [19] 0x947:0x6 DW_TAG_variable
	.byte	47                              # DW_AT_location
	.long	2230                            # DW_AT_abstract_origin
	.byte	16                              # Abbrev [16] 0x94d:0x9 DW_TAG_lexical_block
	.byte	8                               # DW_AT_ranges
	.byte	56                              # Abbrev [56] 0x94f:0x6 DW_TAG_variable
	.byte	0                               # DW_AT_const_value
	.long	2239                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	18                              # Abbrev [18] 0x958:0x1e DW_TAG_lexical_block
	.byte	14                              # DW_AT_low_pc
	.long	.Ltmp2563-.Ltmp2503             # DW_AT_high_pc
	.byte	7                               # Abbrev [7] 0x95e:0xa DW_TAG_variable
	.byte	48                              # DW_AT_location
	.byte	202                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	885                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	16                              # Abbrev [16] 0x968:0xd DW_TAG_lexical_block
	.byte	9                               # DW_AT_ranges
	.byte	7                               # Abbrev [7] 0x96a:0xa DW_TAG_variable
	.byte	49                              # DW_AT_location
	.byte	203                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	886                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	18                              # Abbrev [18] 0x976:0x22 DW_TAG_lexical_block
	.byte	15                              # DW_AT_low_pc
	.long	.Ltmp2564-.Ltmp2563             # DW_AT_high_pc
	.byte	57                              # Abbrev [57] 0x97c:0xa DW_TAG_variable
	.byte	0                               # DW_AT_const_value
	.byte	202                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	897                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	18                              # Abbrev [18] 0x986:0x11 DW_TAG_lexical_block
	.byte	15                              # DW_AT_low_pc
	.long	.Ltmp2564-.Ltmp2563             # DW_AT_high_pc
	.byte	10                              # Abbrev [10] 0x98c:0xa DW_TAG_variable
	.short	288                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	898                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	18                              # Abbrev [18] 0x998:0x11 DW_TAG_lexical_block
	.byte	16                              # DW_AT_low_pc
	.long	.Ltmp2568-.Ltmp2564             # DW_AT_high_pc
	.byte	7                               # Abbrev [7] 0x99e:0xa DW_TAG_variable
	.byte	50                              # DW_AT_location
	.byte	202                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	900                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	18                              # Abbrev [18] 0x9a9:0x12 DW_TAG_lexical_block
	.byte	17                              # DW_AT_low_pc
	.long	.Ltmp2570-.Ltmp2568             # DW_AT_high_pc
	.byte	8                               # Abbrev [8] 0x9af:0xb DW_TAG_variable
	.byte	51                              # DW_AT_location
	.short	288                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	903                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	18                              # Abbrev [18] 0x9bb:0x5a DW_TAG_lexical_block
	.byte	18                              # DW_AT_low_pc
	.long	.Ltmp2583-.Ltmp2574             # DW_AT_high_pc
	.byte	8                               # Abbrev [8] 0x9c1:0xb DW_TAG_variable
	.byte	53                              # DW_AT_location
	.short	281                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	912                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	18                              # Abbrev [18] 0x9cc:0x12 DW_TAG_lexical_block
	.byte	18                              # DW_AT_low_pc
	.long	.Ltmp2576-.Ltmp2574             # DW_AT_high_pc
	.byte	8                               # Abbrev [8] 0x9d2:0xb DW_TAG_variable
	.byte	54                              # DW_AT_location
	.short	288                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	913                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	18                              # Abbrev [18] 0x9de:0x12 DW_TAG_lexical_block
	.byte	19                              # DW_AT_low_pc
	.long	.Ltmp2577-.Ltmp2576             # DW_AT_high_pc
	.byte	8                               # Abbrev [8] 0x9e4:0xb DW_TAG_variable
	.byte	55                              # DW_AT_location
	.short	288                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	915                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	18                              # Abbrev [18] 0x9f0:0x12 DW_TAG_lexical_block
	.byte	20                              # DW_AT_low_pc
	.long	.Ltmp2579-.Ltmp2578             # DW_AT_high_pc
	.byte	8                               # Abbrev [8] 0x9f6:0xb DW_TAG_variable
	.byte	56                              # DW_AT_location
	.short	288                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	918                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	18                              # Abbrev [18] 0xa02:0x12 DW_TAG_lexical_block
	.byte	21                              # DW_AT_low_pc
	.long	.Ltmp2580-.Ltmp2579             # DW_AT_high_pc
	.byte	8                               # Abbrev [8] 0xa08:0xb DW_TAG_variable
	.byte	57                              # DW_AT_location
	.short	288                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	920                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	18                              # Abbrev [18] 0xa15:0x12 DW_TAG_lexical_block
	.byte	22                              # DW_AT_low_pc
	.long	.Ltmp2584-.Ltmp2583             # DW_AT_high_pc
	.byte	58                              # Abbrev [58] 0xa1b:0xb DW_TAG_variable
	.byte	0                               # DW_AT_const_value
	.short	288                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	924                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	18                              # Abbrev [18] 0xa27:0x12 DW_TAG_lexical_block
	.byte	23                              # DW_AT_low_pc
	.long	.Ltmp2585-.Ltmp2584             # DW_AT_high_pc
	.byte	58                              # Abbrev [58] 0xa2d:0xb DW_TAG_variable
	.byte	0                               # DW_AT_const_value
	.short	288                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	925                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	38                              # Abbrev [38] 0xa3a:0x22 DW_TAG_subprogram
	.byte	24                              # DW_AT_low_pc
	.long	.Lfunc_end3-.Lfunc_begin3       # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	87
                                        # DW_AT_call_all_calls
	.long	3775                            # DW_AT_abstract_origin
	.byte	17                              # Abbrev [17] 0xa46:0x7 DW_TAG_formal_parameter
	.byte	1                               # DW_AT_location
	.byte	85
	.long	3781                            # DW_AT_abstract_origin
	.byte	17                              # Abbrev [17] 0xa4d:0x7 DW_TAG_formal_parameter
	.byte	1                               # DW_AT_location
	.byte	84
	.long	3791                            # DW_AT_abstract_origin
	.byte	59                              # Abbrev [59] 0xa54:0x7 DW_TAG_variable
	.byte	1                               # DW_AT_location
	.byte	85
	.long	3800                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	60                              # Abbrev [60] 0xa5c:0x3c DW_TAG_subprogram
	.byte	25                              # DW_AT_low_pc
	.long	.Lfunc_end4-.Lfunc_begin4       # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	87
                                        # DW_AT_call_all_calls
	.short	274                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	984                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	2741                            # DW_AT_type
                                        # DW_AT_external
	.byte	54                              # Abbrev [54] 0xa6d:0xc DW_TAG_formal_parameter
	.byte	1                               # DW_AT_location
	.byte	85
	.short	290                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	984                             # DW_AT_decl_line
	.long	2749                            # DW_AT_type
	.byte	54                              # Abbrev [54] 0xa79:0xc DW_TAG_formal_parameter
	.byte	1                               # DW_AT_location
	.byte	84
	.short	259                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	984                             # DW_AT_decl_line
	.long	1756                            # DW_AT_type
	.byte	54                              # Abbrev [54] 0xa85:0xc DW_TAG_formal_parameter
	.byte	1                               # DW_AT_location
	.byte	81
	.short	291                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	985                             # DW_AT_decl_line
	.long	3102                            # DW_AT_type
	.byte	61                              # Abbrev [61] 0xa91:0x6 DW_TAG_call_site
	.long	2712                            # DW_AT_call_origin
                                        # DW_AT_call_tail_call
	.byte	26                              # DW_AT_call_pc
	.byte	0                               # End Of Children Mark
	.byte	40                              # Abbrev [40] 0xa98:0x1d DW_TAG_subprogram
	.byte	204                             # DW_AT_name
	.byte	12                              # DW_AT_decl_file
	.byte	85                              # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	2741                            # DW_AT_type
                                        # DW_AT_declaration
                                        # DW_AT_external
	.byte	41                              # Abbrev [41] 0xaa0:0x5 DW_TAG_formal_parameter
	.long	2749                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0xaa5:0x5 DW_TAG_formal_parameter
	.long	1756                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0xaaa:0x5 DW_TAG_formal_parameter
	.long	3102                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0xaaf:0x5 DW_TAG_formal_parameter
	.long	3187                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	24                              # Abbrev [24] 0xab5:0x8 DW_TAG_typedef
	.long	727                             # DW_AT_type
	.byte	205                             # DW_AT_name
	.byte	2                               # DW_AT_decl_file
	.byte	237                             # DW_AT_decl_line
	.byte	36                              # Abbrev [36] 0xabd:0x5 DW_TAG_pointer_type
	.long	2754                            # DW_AT_type
	.byte	24                              # Abbrev [24] 0xac2:0x8 DW_TAG_typedef
	.long	2762                            # DW_AT_type
	.byte	222                             # DW_AT_name
	.byte	11                              # DW_AT_decl_file
	.byte	80                              # DW_AT_decl_line
	.byte	62                              # Abbrev [62] 0xaca:0x4e DW_TAG_structure_type
	.byte	221                             # DW_AT_name
	.byte	64                              # DW_AT_byte_size
	.byte	11                              # DW_AT_decl_file
	.byte	124                             # DW_AT_decl_line
	.byte	30                              # Abbrev [30] 0xacf:0x9 DW_TAG_member
	.byte	206                             # DW_AT_name
	.long	2840                            # DW_AT_type
	.byte	11                              # DW_AT_decl_file
	.byte	126                             # DW_AT_decl_line
	.byte	0                               # DW_AT_data_member_location
	.byte	30                              # Abbrev [30] 0xad8:0x9 DW_TAG_member
	.byte	208                             # DW_AT_name
	.long	1646                            # DW_AT_type
	.byte	11                              # DW_AT_decl_file
	.byte	130                             # DW_AT_decl_line
	.byte	8                               # DW_AT_data_member_location
	.byte	30                              # Abbrev [30] 0xae1:0x9 DW_TAG_member
	.byte	209                             # DW_AT_name
	.long	2849                            # DW_AT_type
	.byte	11                              # DW_AT_decl_file
	.byte	136                             # DW_AT_decl_line
	.byte	16                              # DW_AT_data_member_location
	.byte	30                              # Abbrev [30] 0xaea:0x9 DW_TAG_member
	.byte	73                              # DW_AT_name
	.long	2857                            # DW_AT_type
	.byte	11                              # DW_AT_decl_file
	.byte	139                             # DW_AT_decl_line
	.byte	24                              # DW_AT_data_member_location
	.byte	30                              # Abbrev [30] 0xaf3:0x9 DW_TAG_member
	.byte	213                             # DW_AT_name
	.long	2935                            # DW_AT_type
	.byte	11                              # DW_AT_decl_file
	.byte	144                             # DW_AT_decl_line
	.byte	32                              # DW_AT_data_member_location
	.byte	30                              # Abbrev [30] 0xafc:0x9 DW_TAG_member
	.byte	215                             # DW_AT_name
	.long	2960                            # DW_AT_type
	.byte	11                              # DW_AT_decl_file
	.byte	148                             # DW_AT_decl_line
	.byte	40                              # DW_AT_data_member_location
	.byte	30                              # Abbrev [30] 0xb05:0x9 DW_TAG_member
	.byte	217                             # DW_AT_name
	.long	2994                            # DW_AT_type
	.byte	11                              # DW_AT_decl_file
	.byte	152                             # DW_AT_decl_line
	.byte	48                              # DW_AT_data_member_location
	.byte	30                              # Abbrev [30] 0xb0e:0x9 DW_TAG_member
	.byte	218                             # DW_AT_name
	.long	3030                            # DW_AT_type
	.byte	11                              # DW_AT_decl_file
	.byte	157                             # DW_AT_decl_line
	.byte	56                              # DW_AT_data_member_location
	.byte	0                               # End Of Children Mark
	.byte	36                              # Abbrev [36] 0xb18:0x5 DW_TAG_pointer_type
	.long	2845                            # DW_AT_type
	.byte	63                              # Abbrev [63] 0xb1d:0x4 DW_TAG_typedef
	.byte	207                             # DW_AT_name
	.byte	11                              # DW_AT_decl_file
	.byte	78                              # DW_AT_decl_line
	.byte	24                              # Abbrev [24] 0xb21:0x8 DW_TAG_typedef
	.long	1670                            # DW_AT_type
	.byte	210                             # DW_AT_name
	.byte	13                              # DW_AT_decl_file
	.byte	90                              # DW_AT_decl_line
	.byte	24                              # Abbrev [24] 0xb29:0x8 DW_TAG_typedef
	.long	2865                            # DW_AT_type
	.byte	212                             # DW_AT_name
	.byte	11                              # DW_AT_decl_file
	.byte	94                              # DW_AT_decl_line
	.byte	36                              # Abbrev [36] 0xb31:0x5 DW_TAG_pointer_type
	.long	2870                            # DW_AT_type
	.byte	45                              # Abbrev [45] 0xb36:0x33 DW_TAG_subroutine_type
	.long	2741                            # DW_AT_type
                                        # DW_AT_prototyped
	.byte	41                              # Abbrev [41] 0xb3b:0x5 DW_TAG_formal_parameter
	.long	2840                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0xb40:0x5 DW_TAG_formal_parameter
	.long	1756                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0xb45:0x5 DW_TAG_formal_parameter
	.long	1899                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0xb4a:0x5 DW_TAG_formal_parameter
	.long	1934                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0xb4f:0x5 DW_TAG_formal_parameter
	.long	1680                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0xb54:0x5 DW_TAG_formal_parameter
	.long	2921                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0xb59:0x5 DW_TAG_formal_parameter
	.long	1934                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0xb5e:0x5 DW_TAG_formal_parameter
	.long	1680                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0xb63:0x5 DW_TAG_formal_parameter
	.long	2926                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	49                              # Abbrev [49] 0xb69:0x5 DW_TAG_restrict_type
	.long	2051                            # DW_AT_type
	.byte	42                              # Abbrev [42] 0xb6e:0x9 DW_TAG_typedef
	.long	823                             # DW_AT_type
	.byte	211                             # DW_AT_name
	.byte	2                               # DW_AT_decl_file
	.short	322                             # DW_AT_decl_line
	.byte	24                              # Abbrev [24] 0xb77:0x8 DW_TAG_typedef
	.long	2943                            # DW_AT_type
	.byte	214                             # DW_AT_name
	.byte	11                              # DW_AT_decl_file
	.byte	102                             # DW_AT_decl_line
	.byte	36                              # Abbrev [36] 0xb7f:0x5 DW_TAG_pointer_type
	.long	2948                            # DW_AT_type
	.byte	46                              # Abbrev [46] 0xb84:0xc DW_TAG_subroutine_type
                                        # DW_AT_prototyped
	.byte	41                              # Abbrev [41] 0xb85:0x5 DW_TAG_formal_parameter
	.long	2840                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0xb8a:0x5 DW_TAG_formal_parameter
	.long	1756                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	36                              # Abbrev [36] 0xb90:0x5 DW_TAG_pointer_type
	.long	2965                            # DW_AT_type
	.byte	45                              # Abbrev [45] 0xb95:0xb DW_TAG_subroutine_type
	.long	2976                            # DW_AT_type
                                        # DW_AT_prototyped
	.byte	41                              # Abbrev [41] 0xb9a:0x5 DW_TAG_formal_parameter
	.long	2984                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	24                              # Abbrev [24] 0xba0:0x8 DW_TAG_typedef
	.long	844                             # DW_AT_type
	.byte	216                             # DW_AT_name
	.byte	4                               # DW_AT_decl_file
	.byte	55                              # DW_AT_decl_line
	.byte	36                              # Abbrev [36] 0xba8:0x5 DW_TAG_pointer_type
	.long	2989                            # DW_AT_type
	.byte	23                              # Abbrev [23] 0xbad:0x5 DW_TAG_const_type
	.long	2845                            # DW_AT_type
	.byte	36                              # Abbrev [36] 0xbb2:0x5 DW_TAG_pointer_type
	.long	2999                            # DW_AT_type
	.byte	45                              # Abbrev [45] 0xbb7:0x1a DW_TAG_subroutine_type
	.long	2741                            # DW_AT_type
                                        # DW_AT_prototyped
	.byte	41                              # Abbrev [41] 0xbbc:0x5 DW_TAG_formal_parameter
	.long	2840                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0xbc1:0x5 DW_TAG_formal_parameter
	.long	3025                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0xbc6:0x5 DW_TAG_formal_parameter
	.long	3025                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0xbcb:0x5 DW_TAG_formal_parameter
	.long	1654                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	36                              # Abbrev [36] 0xbd1:0x5 DW_TAG_pointer_type
	.long	1654                            # DW_AT_type
	.byte	36                              # Abbrev [36] 0xbd6:0x5 DW_TAG_pointer_type
	.long	3035                            # DW_AT_type
	.byte	45                              # Abbrev [45] 0xbdb:0x1a DW_TAG_subroutine_type
	.long	2741                            # DW_AT_type
                                        # DW_AT_prototyped
	.byte	41                              # Abbrev [41] 0xbe0:0x5 DW_TAG_formal_parameter
	.long	2840                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0xbe5:0x5 DW_TAG_formal_parameter
	.long	1756                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0xbea:0x5 DW_TAG_formal_parameter
	.long	3061                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0xbef:0x5 DW_TAG_formal_parameter
	.long	3061                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	36                              # Abbrev [36] 0xbf5:0x5 DW_TAG_pointer_type
	.long	3066                            # DW_AT_type
	.byte	23                              # Abbrev [23] 0xbfa:0x5 DW_TAG_const_type
	.long	3071                            # DW_AT_type
	.byte	24                              # Abbrev [24] 0xbff:0x8 DW_TAG_typedef
	.long	3079                            # DW_AT_type
	.byte	220                             # DW_AT_name
	.byte	14                              # DW_AT_decl_file
	.byte	65                              # DW_AT_decl_line
	.byte	35                              # Abbrev [35] 0xc07:0x17 DW_TAG_structure_type
	.byte	16                              # DW_AT_byte_size
	.byte	14                              # DW_AT_decl_file
	.byte	43                              # DW_AT_decl_line
	.byte	30                              # Abbrev [30] 0xc0b:0x9 DW_TAG_member
	.byte	208                             # DW_AT_name
	.long	1646                            # DW_AT_type
	.byte	14                              # DW_AT_decl_file
	.byte	54                              # DW_AT_decl_line
	.byte	0                               # DW_AT_data_member_location
	.byte	30                              # Abbrev [30] 0xc14:0x9 DW_TAG_member
	.byte	219                             # DW_AT_name
	.long	1679                            # DW_AT_type
	.byte	14                              # DW_AT_decl_file
	.byte	63                              # DW_AT_decl_line
	.byte	8                               # DW_AT_data_member_location
	.byte	0                               # End Of Children Mark
	.byte	36                              # Abbrev [36] 0xc1e:0x5 DW_TAG_pointer_type
	.long	3107                            # DW_AT_type
	.byte	23                              # Abbrev [23] 0xc23:0x5 DW_TAG_const_type
	.long	3112                            # DW_AT_type
	.byte	24                              # Abbrev [24] 0xc28:0x8 DW_TAG_typedef
	.long	3120                            # DW_AT_type
	.byte	225                             # DW_AT_name
	.byte	11                              # DW_AT_decl_file
	.byte	82                              # DW_AT_decl_line
	.byte	62                              # Abbrev [62] 0xc30:0x21 DW_TAG_structure_type
	.byte	224                             # DW_AT_name
	.byte	24                              # DW_AT_byte_size
	.byte	11                              # DW_AT_decl_file
	.byte	109                             # DW_AT_decl_line
	.byte	30                              # Abbrev [30] 0xc35:0x9 DW_TAG_member
	.byte	208                             # DW_AT_name
	.long	1646                            # DW_AT_type
	.byte	11                              # DW_AT_decl_file
	.byte	112                             # DW_AT_decl_line
	.byte	0                               # DW_AT_data_member_location
	.byte	30                              # Abbrev [30] 0xc3e:0x9 DW_TAG_member
	.byte	209                             # DW_AT_name
	.long	3153                            # DW_AT_type
	.byte	11                              # DW_AT_decl_file
	.byte	116                             # DW_AT_decl_line
	.byte	8                               # DW_AT_data_member_location
	.byte	30                              # Abbrev [30] 0xc47:0x9 DW_TAG_member
	.byte	219                             # DW_AT_name
	.long	1679                            # DW_AT_type
	.byte	11                              # DW_AT_decl_file
	.byte	119                             # DW_AT_decl_line
	.byte	16                              # DW_AT_data_member_location
	.byte	0                               # End Of Children Mark
	.byte	24                              # Abbrev [24] 0xc51:0x8 DW_TAG_typedef
	.long	3161                            # DW_AT_type
	.byte	223                             # DW_AT_name
	.byte	11                              # DW_AT_decl_file
	.byte	86                              # DW_AT_decl_line
	.byte	36                              # Abbrev [36] 0xc59:0x5 DW_TAG_pointer_type
	.long	3166                            # DW_AT_type
	.byte	45                              # Abbrev [45] 0xc5e:0x15 DW_TAG_subroutine_type
	.long	2741                            # DW_AT_type
                                        # DW_AT_prototyped
	.byte	41                              # Abbrev [41] 0xc63:0x5 DW_TAG_formal_parameter
	.long	2749                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0xc68:0x5 DW_TAG_formal_parameter
	.long	1756                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0xc6d:0x5 DW_TAG_formal_parameter
	.long	3102                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	36                              # Abbrev [36] 0xc73:0x5 DW_TAG_pointer_type
	.long	3192                            # DW_AT_type
	.byte	45                              # Abbrev [45] 0xc78:0x1a DW_TAG_subroutine_type
	.long	2741                            # DW_AT_type
                                        # DW_AT_prototyped
	.byte	41                              # Abbrev [41] 0xc7d:0x5 DW_TAG_formal_parameter
	.long	3218                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0xc82:0x5 DW_TAG_formal_parameter
	.long	1756                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0xc87:0x5 DW_TAG_formal_parameter
	.long	3344                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0xc8c:0x5 DW_TAG_formal_parameter
	.long	3367                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	36                              # Abbrev [36] 0xc92:0x5 DW_TAG_pointer_type
	.long	3223                            # DW_AT_type
	.byte	24                              # Abbrev [24] 0xc97:0x8 DW_TAG_typedef
	.long	3231                            # DW_AT_type
	.byte	228                             # DW_AT_name
	.byte	12                              # DW_AT_decl_file
	.byte	72                              # DW_AT_decl_line
	.byte	35                              # Abbrev [35] 0xc9f:0x32 DW_TAG_structure_type
	.byte	40                              # DW_AT_byte_size
	.byte	12                              # DW_AT_decl_file
	.byte	54                              # DW_AT_decl_line
	.byte	30                              # Abbrev [30] 0xca3:0x9 DW_TAG_member
	.byte	206                             # DW_AT_name
	.long	2840                            # DW_AT_type
	.byte	12                              # DW_AT_decl_file
	.byte	56                              # DW_AT_decl_line
	.byte	0                               # DW_AT_data_member_location
	.byte	30                              # Abbrev [30] 0xcac:0x9 DW_TAG_member
	.byte	73                              # DW_AT_name
	.long	3281                            # DW_AT_type
	.byte	12                              # DW_AT_decl_file
	.byte	59                              # DW_AT_decl_line
	.byte	8                               # DW_AT_data_member_location
	.byte	30                              # Abbrev [30] 0xcb5:0x9 DW_TAG_member
	.byte	226                             # DW_AT_name
	.long	3327                            # DW_AT_type
	.byte	12                              # DW_AT_decl_file
	.byte	63                              # DW_AT_decl_line
	.byte	16                              # DW_AT_data_member_location
	.byte	30                              # Abbrev [30] 0xcbe:0x9 DW_TAG_member
	.byte	227                             # DW_AT_name
	.long	3350                            # DW_AT_type
	.byte	12                              # DW_AT_decl_file
	.byte	66                              # DW_AT_decl_line
	.byte	24                              # DW_AT_data_member_location
	.byte	30                              # Abbrev [30] 0xcc7:0x9 DW_TAG_member
	.byte	213                             # DW_AT_name
	.long	2943                            # DW_AT_type
	.byte	12                              # DW_AT_decl_file
	.byte	70                              # DW_AT_decl_line
	.byte	32                              # DW_AT_data_member_location
	.byte	0                               # End Of Children Mark
	.byte	36                              # Abbrev [36] 0xcd1:0x5 DW_TAG_pointer_type
	.long	3286                            # DW_AT_type
	.byte	45                              # Abbrev [45] 0xcd6:0x1f DW_TAG_subroutine_type
	.long	2741                            # DW_AT_type
                                        # DW_AT_prototyped
	.byte	41                              # Abbrev [41] 0xcdb:0x5 DW_TAG_formal_parameter
	.long	3317                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0xce0:0x5 DW_TAG_formal_parameter
	.long	3322                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0xce5:0x5 DW_TAG_formal_parameter
	.long	1899                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0xcea:0x5 DW_TAG_formal_parameter
	.long	1934                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0xcef:0x5 DW_TAG_formal_parameter
	.long	1680                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	49                              # Abbrev [49] 0xcf5:0x5 DW_TAG_restrict_type
	.long	2840                            # DW_AT_type
	.byte	49                              # Abbrev [49] 0xcfa:0x5 DW_TAG_restrict_type
	.long	2116                            # DW_AT_type
	.byte	36                              # Abbrev [36] 0xcff:0x5 DW_TAG_pointer_type
	.long	3332                            # DW_AT_type
	.byte	46                              # Abbrev [46] 0xd04:0xc DW_TAG_subroutine_type
                                        # DW_AT_prototyped
	.byte	41                              # Abbrev [41] 0xd05:0x5 DW_TAG_formal_parameter
	.long	2840                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0xd0a:0x5 DW_TAG_formal_parameter
	.long	3344                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	36                              # Abbrev [36] 0xd10:0x5 DW_TAG_pointer_type
	.long	3349                            # DW_AT_type
	.byte	64                              # Abbrev [64] 0xd15:0x1 DW_TAG_const_type
	.byte	36                              # Abbrev [36] 0xd16:0x5 DW_TAG_pointer_type
	.long	3355                            # DW_AT_type
	.byte	46                              # Abbrev [46] 0xd1b:0xc DW_TAG_subroutine_type
                                        # DW_AT_prototyped
	.byte	41                              # Abbrev [41] 0xd1c:0x5 DW_TAG_formal_parameter
	.long	2840                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0xd21:0x5 DW_TAG_formal_parameter
	.long	1646                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	36                              # Abbrev [36] 0xd27:0x5 DW_TAG_pointer_type
	.long	3372                            # DW_AT_type
	.byte	24                              # Abbrev [24] 0xd2c:0x8 DW_TAG_typedef
	.long	3380                            # DW_AT_type
	.byte	232                             # DW_AT_name
	.byte	12                              # DW_AT_decl_file
	.byte	51                              # DW_AT_decl_line
	.byte	35                              # Abbrev [35] 0xd34:0x20 DW_TAG_structure_type
	.byte	24                              # DW_AT_byte_size
	.byte	12                              # DW_AT_decl_file
	.byte	47                              # DW_AT_decl_line
	.byte	30                              # Abbrev [30] 0xd38:0x9 DW_TAG_member
	.byte	229                             # DW_AT_name
	.long	1680                            # DW_AT_type
	.byte	12                              # DW_AT_decl_file
	.byte	48                              # DW_AT_decl_line
	.byte	0                               # DW_AT_data_member_location
	.byte	30                              # Abbrev [30] 0xd41:0x9 DW_TAG_member
	.byte	230                             # DW_AT_name
	.long	1904                            # DW_AT_type
	.byte	12                              # DW_AT_decl_file
	.byte	49                              # DW_AT_decl_line
	.byte	8                               # DW_AT_data_member_location
	.byte	30                              # Abbrev [30] 0xd4a:0x9 DW_TAG_member
	.byte	231                             # DW_AT_name
	.long	1680                            # DW_AT_type
	.byte	12                              # DW_AT_decl_file
	.byte	50                              # DW_AT_decl_line
	.byte	16                              # DW_AT_data_member_location
	.byte	0                               # End Of Children Mark
	.byte	47                              # Abbrev [47] 0xd54:0x11 DW_TAG_subprogram
	.byte	233                             # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	33                              # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	1890                            # DW_AT_type
                                        # DW_AT_inline
	.byte	48                              # Abbrev [48] 0xd5c:0x8 DW_TAG_formal_parameter
	.byte	219                             # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	33                              # DW_AT_decl_line
	.long	3429                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	36                              # Abbrev [36] 0xd65:0x5 DW_TAG_pointer_type
	.long	3434                            # DW_AT_type
	.byte	23                              # Abbrev [23] 0xd6a:0x5 DW_TAG_const_type
	.long	3439                            # DW_AT_type
	.byte	65                              # Abbrev [65] 0xd6f:0xa DW_TAG_typedef
	.long	3449                            # DW_AT_type
	.short	256                             # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.short	399                             # DW_AT_decl_line
	.byte	35                              # Abbrev [35] 0xd79:0xf2 DW_TAG_structure_type
	.byte	112                             # DW_AT_byte_size
	.byte	3                               # DW_AT_decl_file
	.byte	185                             # DW_AT_decl_line
	.byte	30                              # Abbrev [30] 0xd7d:0x9 DW_TAG_member
	.byte	229                             # DW_AT_name
	.long	1630                            # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.byte	217                             # DW_AT_decl_line
	.byte	0                               # DW_AT_data_member_location
	.byte	30                              # Abbrev [30] 0xd86:0x9 DW_TAG_member
	.byte	230                             # DW_AT_name
	.long	1904                            # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.byte	240                             # DW_AT_decl_line
	.byte	8                               # DW_AT_data_member_location
	.byte	30                              # Abbrev [30] 0xd8f:0x9 DW_TAG_member
	.byte	231                             # DW_AT_name
	.long	1630                            # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.byte	254                             # DW_AT_decl_line
	.byte	16                              # DW_AT_data_member_location
	.byte	44                              # Abbrev [44] 0xd98:0xa DW_TAG_member
	.byte	199                             # DW_AT_name
	.long	1630                            # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.short	281                             # DW_AT_decl_line
	.byte	20                              # DW_AT_data_member_location
	.byte	44                              # Abbrev [44] 0xda2:0xa DW_TAG_member
	.byte	200                             # DW_AT_name
	.long	1630                            # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.short	293                             # DW_AT_decl_line
	.byte	24                              # DW_AT_data_member_location
	.byte	44                              # Abbrev [44] 0xdac:0xa DW_TAG_member
	.byte	234                             # DW_AT_name
	.long	1630                            # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.short	316                             # DW_AT_decl_line
	.byte	28                              # DW_AT_data_member_location
	.byte	44                              # Abbrev [44] 0xdb6:0xa DW_TAG_member
	.byte	235                             # DW_AT_name
	.long	3691                            # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.short	322                             # DW_AT_decl_line
	.byte	32                              # DW_AT_data_member_location
	.byte	44                              # Abbrev [44] 0xdc0:0xa DW_TAG_member
	.byte	237                             # DW_AT_name
	.long	1630                            # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.short	342                             # DW_AT_decl_line
	.byte	36                              # DW_AT_data_member_location
	.byte	44                              # Abbrev [44] 0xdca:0xa DW_TAG_member
	.byte	238                             # DW_AT_name
	.long	3699                            # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.short	345                             # DW_AT_decl_line
	.byte	40                              # DW_AT_data_member_location
	.byte	44                              # Abbrev [44] 0xdd4:0xa DW_TAG_member
	.byte	240                             # DW_AT_name
	.long	1630                            # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.short	375                             # DW_AT_decl_line
	.byte	44                              # DW_AT_data_member_location
	.byte	44                              # Abbrev [44] 0xdde:0xa DW_TAG_member
	.byte	241                             # DW_AT_name
	.long	1630                            # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.short	384                             # DW_AT_decl_line
	.byte	48                              # DW_AT_data_member_location
	.byte	44                              # Abbrev [44] 0xde8:0xa DW_TAG_member
	.byte	242                             # DW_AT_name
	.long	1630                            # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.short	385                             # DW_AT_decl_line
	.byte	52                              # DW_AT_data_member_location
	.byte	44                              # Abbrev [44] 0xdf2:0xa DW_TAG_member
	.byte	243                             # DW_AT_name
	.long	1630                            # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.short	386                             # DW_AT_decl_line
	.byte	56                              # DW_AT_data_member_location
	.byte	44                              # Abbrev [44] 0xdfc:0xa DW_TAG_member
	.byte	244                             # DW_AT_name
	.long	1630                            # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.short	387                             # DW_AT_decl_line
	.byte	60                              # DW_AT_data_member_location
	.byte	44                              # Abbrev [44] 0xe06:0xa DW_TAG_member
	.byte	245                             # DW_AT_name
	.long	1630                            # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.short	388                             # DW_AT_decl_line
	.byte	64                              # DW_AT_data_member_location
	.byte	44                              # Abbrev [44] 0xe10:0xa DW_TAG_member
	.byte	246                             # DW_AT_name
	.long	1630                            # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.short	389                             # DW_AT_decl_line
	.byte	68                              # DW_AT_data_member_location
	.byte	44                              # Abbrev [44] 0xe1a:0xa DW_TAG_member
	.byte	247                             # DW_AT_name
	.long	1630                            # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.short	390                             # DW_AT_decl_line
	.byte	72                              # DW_AT_data_member_location
	.byte	44                              # Abbrev [44] 0xe24:0xa DW_TAG_member
	.byte	248                             # DW_AT_name
	.long	1630                            # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.short	391                             # DW_AT_decl_line
	.byte	76                              # DW_AT_data_member_location
	.byte	44                              # Abbrev [44] 0xe2e:0xa DW_TAG_member
	.byte	249                             # DW_AT_name
	.long	3707                            # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.short	392                             # DW_AT_decl_line
	.byte	80                              # DW_AT_data_member_location
	.byte	44                              # Abbrev [44] 0xe38:0xa DW_TAG_member
	.byte	251                             # DW_AT_name
	.long	3707                            # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.short	393                             # DW_AT_decl_line
	.byte	84                              # DW_AT_data_member_location
	.byte	44                              # Abbrev [44] 0xe42:0xa DW_TAG_member
	.byte	252                             # DW_AT_name
	.long	3707                            # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.short	394                             # DW_AT_decl_line
	.byte	88                              # DW_AT_data_member_location
	.byte	44                              # Abbrev [44] 0xe4c:0xa DW_TAG_member
	.byte	253                             # DW_AT_name
	.long	3707                            # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.short	395                             # DW_AT_decl_line
	.byte	92                              # DW_AT_data_member_location
	.byte	44                              # Abbrev [44] 0xe56:0xa DW_TAG_member
	.byte	254                             # DW_AT_name
	.long	1679                            # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.short	396                             # DW_AT_decl_line
	.byte	96                              # DW_AT_data_member_location
	.byte	44                              # Abbrev [44] 0xe60:0xa DW_TAG_member
	.byte	255                             # DW_AT_name
	.long	1679                            # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.short	397                             # DW_AT_decl_line
	.byte	104                             # DW_AT_data_member_location
	.byte	0                               # End Of Children Mark
	.byte	24                              # Abbrev [24] 0xe6b:0x8 DW_TAG_typedef
	.long	772                             # DW_AT_type
	.byte	236                             # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	155                             # DW_AT_decl_line
	.byte	24                              # Abbrev [24] 0xe73:0x8 DW_TAG_typedef
	.long	787                             # DW_AT_type
	.byte	239                             # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	111                             # DW_AT_decl_line
	.byte	24                              # Abbrev [24] 0xe7b:0x8 DW_TAG_typedef
	.long	811                             # DW_AT_type
	.byte	250                             # DW_AT_name
	.byte	2                               # DW_AT_decl_file
	.byte	46                              # DW_AT_decl_line
	.byte	66                              # Abbrev [66] 0xe83:0x3c DW_TAG_subprogram
	.short	257                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	939                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	2741                            # DW_AT_type
                                        # DW_AT_external
                                        # DW_AT_inline
	.byte	67                              # Abbrev [67] 0xe8d:0xa DW_TAG_formal_parameter
	.short	258                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	939                             # DW_AT_decl_line
	.long	3218                            # DW_AT_type
	.byte	67                              # Abbrev [67] 0xe97:0xa DW_TAG_formal_parameter
	.short	259                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	939                             # DW_AT_decl_line
	.long	1756                            # DW_AT_type
	.byte	67                              # Abbrev [67] 0xea1:0xa DW_TAG_formal_parameter
	.short	260                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	940                             # DW_AT_decl_line
	.long	3344                            # DW_AT_type
	.byte	67                              # Abbrev [67] 0xeab:0xa DW_TAG_formal_parameter
	.short	261                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	940                             # DW_AT_decl_line
	.long	3367                            # DW_AT_type
	.byte	9                               # Abbrev [9] 0xeb5:0x9 DW_TAG_variable
	.byte	219                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	954                             # DW_AT_decl_line
	.long	3429                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	68                              # Abbrev [68] 0xebf:0x23 DW_TAG_subprogram
	.short	262                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	840                             # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_inline
	.byte	67                              # Abbrev [67] 0xec5:0xa DW_TAG_formal_parameter
	.short	263                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	840                             # DW_AT_decl_line
	.long	2840                            # DW_AT_type
	.byte	69                              # Abbrev [69] 0xecf:0x9 DW_TAG_formal_parameter
	.byte	84                              # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	840                             # DW_AT_decl_line
	.long	1646                            # DW_AT_type
	.byte	9                               # Abbrev [9] 0xed8:0x9 DW_TAG_variable
	.byte	206                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	842                             # DW_AT_decl_line
	.long	3810                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	36                              # Abbrev [36] 0xee2:0x5 DW_TAG_pointer_type
	.long	865                             # DW_AT_type
	.byte	3                               # Abbrev [3] 0xee7:0xc1 DW_TAG_subprogram
	.byte	27                              # DW_AT_low_pc
	.long	.Lfunc_end5-.Lfunc_begin5       # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	87
                                        # DW_AT_call_all_calls
	.short	275                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	967                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	2741                            # DW_AT_type
	.byte	5                               # Abbrev [5] 0xef8:0xb DW_TAG_formal_parameter
	.byte	58                              # DW_AT_location
	.short	258                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	967                             # DW_AT_decl_line
	.long	3218                            # DW_AT_type
	.byte	5                               # Abbrev [5] 0xf03:0xb DW_TAG_formal_parameter
	.byte	59                              # DW_AT_location
	.short	259                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	967                             # DW_AT_decl_line
	.long	1756                            # DW_AT_type
	.byte	6                               # Abbrev [6] 0xf0e:0xa DW_TAG_formal_parameter
	.byte	60                              # DW_AT_location
	.byte	219                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	968                             # DW_AT_decl_line
	.long	3344                            # DW_AT_type
	.byte	5                               # Abbrev [5] 0xf18:0xb DW_TAG_formal_parameter
	.byte	61                              # DW_AT_location
	.short	261                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	968                             # DW_AT_decl_line
	.long	3367                            # DW_AT_type
	.byte	14                              # Abbrev [14] 0xf23:0x16 DW_TAG_inlined_subroutine
	.long	3412                            # DW_AT_abstract_origin
	.byte	27                              # DW_AT_low_pc
	.long	.Ltmp2592-.Lfunc_begin5         # DW_AT_high_pc
	.byte	0                               # DW_AT_call_file
	.short	970                             # DW_AT_call_line
	.byte	7                               # DW_AT_call_column
	.byte	17                              # Abbrev [17] 0xf31:0x7 DW_TAG_formal_parameter
	.byte	1                               # DW_AT_location
	.byte	81
	.long	3420                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	16                              # Abbrev [16] 0xf39:0x36 DW_TAG_lexical_block
	.byte	10                              # DW_AT_ranges
	.byte	10                              # Abbrev [10] 0xf3b:0xa DW_TAG_variable
	.short	292                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	973                             # DW_AT_decl_line
	.long	4431                            # DW_AT_type
	.byte	12                              # Abbrev [12] 0xf45:0x29 DW_TAG_inlined_subroutine
	.long	3715                            # DW_AT_abstract_origin
	.byte	11                              # DW_AT_ranges
	.byte	0                               # DW_AT_call_file
	.short	973                             # DW_AT_call_line
	.byte	2                               # DW_AT_call_column
	.byte	13                              # Abbrev [13] 0xf4f:0x6 DW_TAG_formal_parameter
	.byte	62                              # DW_AT_location
	.long	3725                            # DW_AT_abstract_origin
	.byte	13                              # Abbrev [13] 0xf55:0x6 DW_TAG_formal_parameter
	.byte	63                              # DW_AT_location
	.long	3735                            # DW_AT_abstract_origin
	.byte	13                              # Abbrev [13] 0xf5b:0x6 DW_TAG_formal_parameter
	.byte	64                              # DW_AT_location
	.long	3745                            # DW_AT_abstract_origin
	.byte	13                              # Abbrev [13] 0xf61:0x6 DW_TAG_formal_parameter
	.byte	65                              # DW_AT_location
	.long	3755                            # DW_AT_abstract_origin
	.byte	19                              # Abbrev [19] 0xf67:0x6 DW_TAG_variable
	.byte	66                              # DW_AT_location
	.long	3765                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	14                              # Abbrev [14] 0xf6f:0x2c DW_TAG_inlined_subroutine
	.long	3775                            # DW_AT_abstract_origin
	.byte	28                              # DW_AT_low_pc
	.long	.Ltmp2609-.Ltmp2608             # DW_AT_high_pc
	.byte	0                               # DW_AT_call_file
	.short	977                             # DW_AT_call_line
	.byte	2                               # DW_AT_call_column
	.byte	17                              # Abbrev [17] 0xf7d:0x7 DW_TAG_formal_parameter
	.byte	1                               # DW_AT_location
	.byte	80
	.long	3781                            # DW_AT_abstract_origin
	.byte	15                              # Abbrev [15] 0xf84:0xf DW_TAG_formal_parameter
	.ascii	"\377\377\377\377\377\377\377\377\377\001" # DW_AT_const_value
	.long	3791                            # DW_AT_abstract_origin
	.byte	59                              # Abbrev [59] 0xf93:0x7 DW_TAG_variable
	.byte	1                               # DW_AT_location
	.byte	80
	.long	3800                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	39                              # Abbrev [39] 0xf9b:0x6 DW_TAG_call_site
	.long	1737                            # DW_AT_call_origin
	.byte	29                              # DW_AT_call_return_pc
	.byte	39                              # Abbrev [39] 0xfa1:0x6 DW_TAG_call_site
	.long	2268                            # DW_AT_call_origin
	.byte	30                              # DW_AT_call_return_pc
	.byte	0                               # End Of Children Mark
	.byte	38                              # Abbrev [38] 0xfa8:0x1a DW_TAG_subprogram
	.byte	31                              # DW_AT_low_pc
	.long	.Lfunc_end6-.Lfunc_begin6       # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	87
                                        # DW_AT_call_all_calls
	.long	4198                            # DW_AT_abstract_origin
	.byte	17                              # Abbrev [17] 0xfb4:0x7 DW_TAG_formal_parameter
	.byte	1                               # DW_AT_location
	.byte	85
	.long	4208                            # DW_AT_abstract_origin
	.byte	13                              # Abbrev [13] 0xfbb:0x6 DW_TAG_formal_parameter
	.byte	67                              # DW_AT_location
	.long	4217                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	38                              # Abbrev [38] 0xfc2:0x1f DW_TAG_subprogram
	.byte	32                              # DW_AT_low_pc
	.long	.Lfunc_end7-.Lfunc_begin7       # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	87
                                        # DW_AT_call_all_calls
	.long	4080                            # DW_AT_abstract_origin
	.byte	13                              # Abbrev [13] 0xfce:0x6 DW_TAG_formal_parameter
	.byte	68                              # DW_AT_location
	.long	4090                            # DW_AT_abstract_origin
	.byte	19                              # Abbrev [19] 0xfd4:0x6 DW_TAG_variable
	.byte	69                              # DW_AT_location
	.long	4099                            # DW_AT_abstract_origin
	.byte	39                              # Abbrev [39] 0xfda:0x6 DW_TAG_call_site
	.long	4065                            # DW_AT_call_origin
	.byte	33                              # DW_AT_call_return_pc
	.byte	0                               # End Of Children Mark
	.byte	70                              # Abbrev [70] 0xfe1:0xf DW_TAG_subprogram
	.short	264                             # DW_AT_name
	.byte	12                              # DW_AT_decl_file
	.byte	91                              # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	1654                            # DW_AT_type
                                        # DW_AT_declaration
                                        # DW_AT_external
	.byte	41                              # Abbrev [41] 0xfea:0x5 DW_TAG_formal_parameter
	.long	1680                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	66                              # Abbrev [66] 0xff0:0x1e DW_TAG_subprogram
	.short	265                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	1013                            # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	1654                            # DW_AT_type
                                        # DW_AT_external
                                        # DW_AT_inline
	.byte	69                              # Abbrev [69] 0xffa:0x9 DW_TAG_formal_parameter
	.byte	219                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	1013                            # DW_AT_decl_line
	.long	3344                            # DW_AT_type
	.byte	10                              # Abbrev [10] 0x1003:0xa DW_TAG_variable
	.short	260                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	1015                            # DW_AT_decl_line
	.long	4110                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	23                              # Abbrev [23] 0x100e:0x5 DW_TAG_const_type
	.long	3429                            # DW_AT_type
	.byte	60                              # Abbrev [60] 0x1013:0x53 DW_TAG_subprogram
	.byte	34                              # DW_AT_low_pc
	.long	.Lfunc_end8-.Lfunc_begin8       # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	87
                                        # DW_AT_call_all_calls
	.short	276                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	1021                            # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	1654                            # DW_AT_type
                                        # DW_AT_external
	.byte	6                               # Abbrev [6] 0x1024:0xa DW_TAG_formal_parameter
	.byte	70                              # DW_AT_location
	.byte	219                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	1021                            # DW_AT_decl_line
	.long	3344                            # DW_AT_type
	.byte	14                              # Abbrev [14] 0x102e:0x16 DW_TAG_inlined_subroutine
	.long	3412                            # DW_AT_abstract_origin
	.byte	34                              # DW_AT_low_pc
	.long	.Ltmp2627-.Lfunc_begin8         # DW_AT_high_pc
	.byte	0                               # DW_AT_call_file
	.short	1023                            # DW_AT_call_line
	.byte	7                               # DW_AT_call_column
	.byte	17                              # Abbrev [17] 0x103c:0x7 DW_TAG_formal_parameter
	.byte	1                               # DW_AT_location
	.byte	85
	.long	3420                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	14                              # Abbrev [14] 0x1044:0x1b DW_TAG_inlined_subroutine
	.long	4080                            # DW_AT_abstract_origin
	.byte	35                              # DW_AT_low_pc
	.long	.Ltmp2632-.Ltmp2629             # DW_AT_high_pc
	.byte	0                               # DW_AT_call_file
	.short	1026                            # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	13                              # Abbrev [13] 0x1052:0x6 DW_TAG_formal_parameter
	.byte	71                              # DW_AT_location
	.long	4090                            # DW_AT_abstract_origin
	.byte	19                              # Abbrev [19] 0x1058:0x6 DW_TAG_variable
	.byte	72                              # DW_AT_location
	.long	4099                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	39                              # Abbrev [39] 0x105f:0x6 DW_TAG_call_site
	.long	4065                            # DW_AT_call_origin
	.byte	36                              # DW_AT_call_return_pc
	.byte	0                               # End Of Children Mark
	.byte	66                              # Abbrev [66] 0x1066:0x1d DW_TAG_subprogram
	.short	266                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	997                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	1890                            # DW_AT_type
                                        # DW_AT_external
                                        # DW_AT_inline
	.byte	69                              # Abbrev [69] 0x1070:0x9 DW_TAG_formal_parameter
	.byte	219                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	997                             # DW_AT_decl_line
	.long	4227                            # DW_AT_type
	.byte	69                              # Abbrev [69] 0x1079:0x9 DW_TAG_formal_parameter
	.byte	192                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	997                             # DW_AT_decl_line
	.long	1914                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	36                              # Abbrev [36] 0x1083:0x5 DW_TAG_pointer_type
	.long	3439                            # DW_AT_type
	.byte	71                              # Abbrev [71] 0x1088:0x1e DW_TAG_subprogram
	.short	267                             # DW_AT_name
	.byte	15                              # DW_AT_decl_file
	.short	311                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	1630                            # DW_AT_type
                                        # DW_AT_inline
	.byte	69                              # Abbrev [69] 0x1092:0x9 DW_TAG_formal_parameter
	.byte	183                             # DW_AT_name
	.byte	15                              # DW_AT_decl_file
	.short	311                             # DW_AT_decl_line
	.long	1904                            # DW_AT_type
	.byte	10                              # Abbrev [10] 0x109b:0xa DW_TAG_variable
	.short	268                             # DW_AT_name
	.byte	15                              # DW_AT_decl_file
	.short	313                             # DW_AT_decl_line
	.long	1630                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	60                              # Abbrev [60] 0x10a6:0x8f DW_TAG_subprogram
	.byte	37                              # DW_AT_low_pc
	.long	.Lfunc_end9-.Lfunc_begin9       # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	87
                                        # DW_AT_call_all_calls
	.short	277                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	1031                            # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	2741                            # DW_AT_type
                                        # DW_AT_external
	.byte	6                               # Abbrev [6] 0x10b7:0xa DW_TAG_formal_parameter
	.byte	73                              # DW_AT_location
	.byte	219                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	1031                            # DW_AT_decl_line
	.long	4436                            # DW_AT_type
	.byte	5                               # Abbrev [5] 0x10c1:0xb DW_TAG_formal_parameter
	.byte	74                              # DW_AT_location
	.short	259                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	1031                            # DW_AT_decl_line
	.long	1756                            # DW_AT_type
	.byte	5                               # Abbrev [5] 0x10cc:0xb DW_TAG_formal_parameter
	.byte	75                              # DW_AT_location
	.short	293                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	1032                            # DW_AT_decl_line
	.long	1904                            # DW_AT_type
	.byte	5                               # Abbrev [5] 0x10d7:0xb DW_TAG_formal_parameter
	.byte	76                              # DW_AT_location
	.short	294                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	1032                            # DW_AT_decl_line
	.long	1680                            # DW_AT_type
	.byte	8                               # Abbrev [8] 0x10e2:0xb DW_TAG_variable
	.byte	77                              # DW_AT_location
	.short	260                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	1037                            # DW_AT_decl_line
	.long	4227                            # DW_AT_type
	.byte	11                              # Abbrev [11] 0x10ed:0x7 DW_TAG_label
	.short	295                             # DW_AT_name
	.byte	0                               # DW_AT_decl_file
	.short	1057                            # DW_AT_decl_line
	.byte	43                              # DW_AT_low_pc
	.byte	14                              # Abbrev [14] 0x10f4:0x1c DW_TAG_inlined_subroutine
	.long	4198                            # DW_AT_abstract_origin
	.byte	38                              # DW_AT_low_pc
	.long	.Ltmp2646-.Ltmp2641             # DW_AT_high_pc
	.byte	0                               # DW_AT_call_file
	.short	1042                            # DW_AT_call_line
	.byte	6                               # DW_AT_call_column
	.byte	17                              # Abbrev [17] 0x1102:0x7 DW_TAG_formal_parameter
	.byte	1                               # DW_AT_location
	.byte	80
	.long	4208                            # DW_AT_abstract_origin
	.byte	13                              # Abbrev [13] 0x1109:0x6 DW_TAG_formal_parameter
	.byte	78                              # DW_AT_location
	.long	4217                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	14                              # Abbrev [14] 0x1110:0x18 DW_TAG_inlined_subroutine
	.long	4232                            # DW_AT_abstract_origin
	.byte	39                              # DW_AT_low_pc
	.long	.Ltmp2652-.Ltmp2651             # DW_AT_high_pc
	.byte	0                               # DW_AT_call_file
	.short	1048                            # DW_AT_call_line
	.byte	19                              # DW_AT_call_column
	.byte	17                              # Abbrev [17] 0x111e:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	115
	.byte	1
	.byte	159
	.long	4242                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	39                              # Abbrev [39] 0x1128:0x6 DW_TAG_call_site
	.long	1737                            # DW_AT_call_origin
	.byte	40                              # DW_AT_call_return_pc
	.byte	39                              # Abbrev [39] 0x112e:0x6 DW_TAG_call_site
	.long	4405                            # DW_AT_call_origin
	.byte	41                              # DW_AT_call_return_pc
	.byte	0                               # End Of Children Mark
	.byte	72                              # Abbrev [72] 0x1135:0x10 DW_TAG_subprogram
	.short	269                             # DW_AT_name
	.byte	11                              # DW_AT_decl_file
	.byte	215                             # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_declaration
                                        # DW_AT_external
	.byte	41                              # Abbrev [41] 0x113a:0x5 DW_TAG_formal_parameter
	.long	1679                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0x113f:0x5 DW_TAG_formal_parameter
	.long	1756                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	49                              # Abbrev [49] 0x1145:0x5 DW_TAG_restrict_type
	.long	3810                            # DW_AT_type
	.byte	23                              # Abbrev [23] 0x114a:0x5 DW_TAG_const_type
	.long	1890                            # DW_AT_type
	.byte	23                              # Abbrev [23] 0x114f:0x5 DW_TAG_const_type
	.long	2741                            # DW_AT_type
	.byte	36                              # Abbrev [36] 0x1154:0x5 DW_TAG_pointer_type
	.long	1679                            # DW_AT_type
	.byte	0                               # End Of Children Mark
.Ldebug_info_end0:
	.section	.debug_rnglists,"",@progbits
	.long	.Ldebug_list_header_end1-.Ldebug_list_header_start1 # Length
.Ldebug_list_header_start1:
	.short	5                               # Version
	.byte	8                               # Address size
	.byte	0                               # Segment selector size
	.long	12                              # Offset entry count
.Lrnglists_table_base0:
	.long	.Ldebug_ranges0-.Lrnglists_table_base0
	.long	.Ldebug_ranges1-.Lrnglists_table_base0
	.long	.Ldebug_ranges2-.Lrnglists_table_base0
	.long	.Ldebug_ranges3-.Lrnglists_table_base0
	.long	.Ldebug_ranges4-.Lrnglists_table_base0
	.long	.Ldebug_ranges5-.Lrnglists_table_base0
	.long	.Ldebug_ranges6-.Lrnglists_table_base0
	.long	.Ldebug_ranges7-.Lrnglists_table_base0
	.long	.Ldebug_ranges8-.Lrnglists_table_base0
	.long	.Ldebug_ranges9-.Lrnglists_table_base0
	.long	.Ldebug_ranges10-.Lrnglists_table_base0
	.long	.Ldebug_ranges11-.Lrnglists_table_base0
.Ldebug_ranges0:
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp18-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp24-.Lfunc_begin0          #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp61-.Lfunc_begin0          #   starting offset
	.uleb128 .Ltmp62-.Lfunc_begin0          #   ending offset
	.byte	0                               # DW_RLE_end_of_list
.Ldebug_ranges1:
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp1664-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1953-.Lfunc_begin0        #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp2231-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2234-.Lfunc_begin0        #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp2245-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2246-.Lfunc_begin0        #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp2252-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2253-.Lfunc_begin0        #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp2300-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2303-.Lfunc_begin0        #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp2319-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2320-.Lfunc_begin0        #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp2333-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2334-.Lfunc_begin0        #   ending offset
	.byte	0                               # DW_RLE_end_of_list
.Ldebug_ranges2:
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp1306-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1307-.Lfunc_begin0        #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp1584-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1585-.Lfunc_begin0        #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp2103-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2104-.Lfunc_begin0        #   ending offset
	.byte	0                               # DW_RLE_end_of_list
.Ldebug_ranges3:
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp412-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp414-.Lfunc_begin0         #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp416-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp422-.Lfunc_begin0         #   ending offset
	.byte	0                               # DW_RLE_end_of_list
.Ldebug_ranges4:
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp442-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp445-.Lfunc_begin0         #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp449-.Lfunc_begin0         #   starting offset
	.uleb128 .Ltmp450-.Lfunc_begin0         #   ending offset
	.byte	0                               # DW_RLE_end_of_list
.Ldebug_ranges5:
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp1590-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1608-.Lfunc_begin0        #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp1637-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1664-.Lfunc_begin0        #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp1963-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1970-.Lfunc_begin0        #   ending offset
	.byte	0                               # DW_RLE_end_of_list
.Ldebug_ranges6:
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp1637-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1638-.Lfunc_begin0        #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp1644-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1645-.Lfunc_begin0        #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp1646-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1648-.Lfunc_begin0        #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp1649-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1650-.Lfunc_begin0        #   ending offset
	.byte	0                               # DW_RLE_end_of_list
.Ldebug_ranges7:
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp1653-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1662-.Lfunc_begin0        #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp1963-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp1965-.Lfunc_begin0        #   ending offset
	.byte	0                               # DW_RLE_end_of_list
.Ldebug_ranges8:
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp2495-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2496-.Lfunc_begin0        #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp2497-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2498-.Lfunc_begin0        #   ending offset
	.byte	0                               # DW_RLE_end_of_list
.Ldebug_ranges9:
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp2503-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2507-.Lfunc_begin0        #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp2508-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2512-.Lfunc_begin0        #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp2513-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2517-.Lfunc_begin0        #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp2518-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2522-.Lfunc_begin0        #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp2523-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2527-.Lfunc_begin0        #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp2528-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2532-.Lfunc_begin0        #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp2533-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2537-.Lfunc_begin0        #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp2538-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2542-.Lfunc_begin0        #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp2543-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2547-.Lfunc_begin0        #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp2548-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2552-.Lfunc_begin0        #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp2553-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2557-.Lfunc_begin0        #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp2558-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2562-.Lfunc_begin0        #   ending offset
	.byte	0                               # DW_RLE_end_of_list
.Ldebug_ranges10:
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp2593-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2605-.Lfunc_begin0        #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp2612-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2613-.Lfunc_begin0        #   ending offset
	.byte	0                               # DW_RLE_end_of_list
.Ldebug_ranges11:
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp2593-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2605-.Lfunc_begin0        #   ending offset
	.byte	4                               # DW_RLE_offset_pair
	.uleb128 .Ltmp2612-.Lfunc_begin0        #   starting offset
	.uleb128 .Ltmp2613-.Lfunc_begin0        #   ending offset
	.byte	0                               # DW_RLE_end_of_list
.Ldebug_list_header_end1:
	.section	.debug_str_offsets,"",@progbits
	.long	1188                            # Length of String Offsets Set
	.short	5
	.short	0
.Lstr_offsets_base0:
	.section	.debug_str,"MS",@progbits,1
.Linfo_string0:
	.asciz	"clang version 19.0.0git (git@github.com:QuqqU/GPUISel-llvm.git ed922481952e7fbe7b5da8613bc5ccf78f796536)" # string offset=0
.Linfo_string1:
	.asciz	"liblzma/lzma/lzma_decoder.c"   # string offset=105
.Linfo_string2:
	.asciz	"/home/yjs/workspace/xz-test/src" # string offset=133
.Linfo_string3:
	.asciz	"next_state"                    # string offset=165
.Linfo_string4:
	.asciz	"unsigned int"                  # string offset=176
.Linfo_string5:
	.asciz	"STATE_LIT_LIT"                 # string offset=189
.Linfo_string6:
	.asciz	"STATE_MATCH_LIT_LIT"           # string offset=203
.Linfo_string7:
	.asciz	"STATE_REP_LIT_LIT"             # string offset=223
.Linfo_string8:
	.asciz	"STATE_SHORTREP_LIT_LIT"        # string offset=241
.Linfo_string9:
	.asciz	"STATE_MATCH_LIT"               # string offset=264
.Linfo_string10:
	.asciz	"STATE_REP_LIT"                 # string offset=280
.Linfo_string11:
	.asciz	"STATE_SHORTREP_LIT"            # string offset=294
.Linfo_string12:
	.asciz	"STATE_LIT_MATCH"               # string offset=313
.Linfo_string13:
	.asciz	"STATE_LIT_LONGREP"             # string offset=329
.Linfo_string14:
	.asciz	"STATE_LIT_SHORTREP"            # string offset=347
.Linfo_string15:
	.asciz	"STATE_NONLIT_MATCH"            # string offset=366
.Linfo_string16:
	.asciz	"STATE_NONLIT_REP"              # string offset=385
.Linfo_string17:
	.asciz	"lzma_lzma_state"               # string offset=402
.Linfo_string18:
	.asciz	"__ARRAY_SIZE_TYPE__"           # string offset=418
.Linfo_string19:
	.asciz	"LZMA_OK"                       # string offset=438
.Linfo_string20:
	.asciz	"LZMA_STREAM_END"               # string offset=446
.Linfo_string21:
	.asciz	"LZMA_NO_CHECK"                 # string offset=462
.Linfo_string22:
	.asciz	"LZMA_UNSUPPORTED_CHECK"        # string offset=476
.Linfo_string23:
	.asciz	"LZMA_GET_CHECK"                # string offset=499
.Linfo_string24:
	.asciz	"LZMA_MEM_ERROR"                # string offset=514
.Linfo_string25:
	.asciz	"LZMA_MEMLIMIT_ERROR"           # string offset=529
.Linfo_string26:
	.asciz	"LZMA_FORMAT_ERROR"             # string offset=549
.Linfo_string27:
	.asciz	"LZMA_OPTIONS_ERROR"            # string offset=567
.Linfo_string28:
	.asciz	"LZMA_DATA_ERROR"               # string offset=586
.Linfo_string29:
	.asciz	"LZMA_BUF_ERROR"                # string offset=602
.Linfo_string30:
	.asciz	"LZMA_PROG_ERROR"               # string offset=617
.Linfo_string31:
	.asciz	"LZMA_MODE_FAST"                # string offset=633
.Linfo_string32:
	.asciz	"LZMA_MODE_NORMAL"              # string offset=648
.Linfo_string33:
	.asciz	"LZMA_MF_HC3"                   # string offset=665
.Linfo_string34:
	.asciz	"LZMA_MF_HC4"                   # string offset=677
.Linfo_string35:
	.asciz	"LZMA_MF_BT2"                   # string offset=689
.Linfo_string36:
	.asciz	"LZMA_MF_BT3"                   # string offset=701
.Linfo_string37:
	.asciz	"LZMA_MF_BT4"                   # string offset=713
.Linfo_string38:
	.asciz	"LZMA_RESERVED_ENUM"            # string offset=725
.Linfo_string39:
	.asciz	"LZMA_RUN"                      # string offset=744
.Linfo_string40:
	.asciz	"LZMA_SYNC_FLUSH"               # string offset=753
.Linfo_string41:
	.asciz	"LZMA_FULL_FLUSH"               # string offset=769
.Linfo_string42:
	.asciz	"LZMA_FINISH"                   # string offset=785
.Linfo_string43:
	.asciz	"LZMA_CHECK_NONE"               # string offset=797
.Linfo_string44:
	.asciz	"LZMA_CHECK_CRC32"              # string offset=813
.Linfo_string45:
	.asciz	"LZMA_CHECK_CRC64"              # string offset=830
.Linfo_string46:
	.asciz	"LZMA_CHECK_SHA256"             # string offset=847
.Linfo_string47:
	.asciz	"literal"                       # string offset=865
.Linfo_string48:
	.asciz	"unsigned short"                # string offset=873
.Linfo_string49:
	.asciz	"__uint16_t"                    # string offset=888
.Linfo_string50:
	.asciz	"uint16_t"                      # string offset=899
.Linfo_string51:
	.asciz	"probability"                   # string offset=908
.Linfo_string52:
	.asciz	"is_match"                      # string offset=920
.Linfo_string53:
	.asciz	"is_rep"                        # string offset=929
.Linfo_string54:
	.asciz	"is_rep0"                       # string offset=936
.Linfo_string55:
	.asciz	"is_rep1"                       # string offset=944
.Linfo_string56:
	.asciz	"is_rep2"                       # string offset=952
.Linfo_string57:
	.asciz	"is_rep0_long"                  # string offset=960
.Linfo_string58:
	.asciz	"pos_slot"                      # string offset=973
.Linfo_string59:
	.asciz	"pos_special"                   # string offset=982
.Linfo_string60:
	.asciz	"pos_align"                     # string offset=994
.Linfo_string61:
	.asciz	"match_len_decoder"             # string offset=1004
.Linfo_string62:
	.asciz	"choice"                        # string offset=1022
.Linfo_string63:
	.asciz	"choice2"                       # string offset=1029
.Linfo_string64:
	.asciz	"low"                           # string offset=1037
.Linfo_string65:
	.asciz	"mid"                           # string offset=1041
.Linfo_string66:
	.asciz	"high"                          # string offset=1045
.Linfo_string67:
	.asciz	"lzma_length_decoder"           # string offset=1050
.Linfo_string68:
	.asciz	"rep_len_decoder"               # string offset=1070
.Linfo_string69:
	.asciz	"rc"                            # string offset=1086
.Linfo_string70:
	.asciz	"range"                         # string offset=1089
.Linfo_string71:
	.asciz	"__uint32_t"                    # string offset=1095
.Linfo_string72:
	.asciz	"uint32_t"                      # string offset=1106
.Linfo_string73:
	.asciz	"code"                          # string offset=1115
.Linfo_string74:
	.asciz	"init_bytes_left"               # string offset=1120
.Linfo_string75:
	.asciz	"lzma_range_decoder"            # string offset=1136
.Linfo_string76:
	.asciz	"state"                         # string offset=1155
.Linfo_string77:
	.asciz	"rep0"                          # string offset=1161
.Linfo_string78:
	.asciz	"rep1"                          # string offset=1166
.Linfo_string79:
	.asciz	"rep2"                          # string offset=1171
.Linfo_string80:
	.asciz	"rep3"                          # string offset=1176
.Linfo_string81:
	.asciz	"pos_mask"                      # string offset=1181
.Linfo_string82:
	.asciz	"literal_context_bits"          # string offset=1190
.Linfo_string83:
	.asciz	"literal_pos_mask"              # string offset=1211
.Linfo_string84:
	.asciz	"uncompressed_size"             # string offset=1228
.Linfo_string85:
	.asciz	"unsigned long"                 # string offset=1246
.Linfo_string86:
	.asciz	"__uint64_t"                    # string offset=1260
.Linfo_string87:
	.asciz	"uint64_t"                      # string offset=1271
.Linfo_string88:
	.asciz	"lzma_vli"                      # string offset=1280
.Linfo_string89:
	.asciz	"sequence"                      # string offset=1289
.Linfo_string90:
	.asciz	"SEQ_NORMALIZE"                 # string offset=1298
.Linfo_string91:
	.asciz	"SEQ_IS_MATCH"                  # string offset=1312
.Linfo_string92:
	.asciz	"SEQ_LITERAL0"                  # string offset=1325
.Linfo_string93:
	.asciz	"SEQ_LITERAL1"                  # string offset=1338
.Linfo_string94:
	.asciz	"SEQ_LITERAL2"                  # string offset=1351
.Linfo_string95:
	.asciz	"SEQ_LITERAL3"                  # string offset=1364
.Linfo_string96:
	.asciz	"SEQ_LITERAL4"                  # string offset=1377
.Linfo_string97:
	.asciz	"SEQ_LITERAL5"                  # string offset=1390
.Linfo_string98:
	.asciz	"SEQ_LITERAL6"                  # string offset=1403
.Linfo_string99:
	.asciz	"SEQ_LITERAL7"                  # string offset=1416
.Linfo_string100:
	.asciz	"SEQ_LITERAL_MATCHED0"          # string offset=1429
.Linfo_string101:
	.asciz	"SEQ_LITERAL_MATCHED1"          # string offset=1450
.Linfo_string102:
	.asciz	"SEQ_LITERAL_MATCHED2"          # string offset=1471
.Linfo_string103:
	.asciz	"SEQ_LITERAL_MATCHED3"          # string offset=1492
.Linfo_string104:
	.asciz	"SEQ_LITERAL_MATCHED4"          # string offset=1513
.Linfo_string105:
	.asciz	"SEQ_LITERAL_MATCHED5"          # string offset=1534
.Linfo_string106:
	.asciz	"SEQ_LITERAL_MATCHED6"          # string offset=1555
.Linfo_string107:
	.asciz	"SEQ_LITERAL_MATCHED7"          # string offset=1576
.Linfo_string108:
	.asciz	"SEQ_LITERAL_WRITE"             # string offset=1597
.Linfo_string109:
	.asciz	"SEQ_IS_REP"                    # string offset=1615
.Linfo_string110:
	.asciz	"SEQ_MATCH_LEN_CHOICE"          # string offset=1626
.Linfo_string111:
	.asciz	"SEQ_MATCH_LEN_LOW0"            # string offset=1647
.Linfo_string112:
	.asciz	"SEQ_MATCH_LEN_LOW1"            # string offset=1666
.Linfo_string113:
	.asciz	"SEQ_MATCH_LEN_LOW2"            # string offset=1685
.Linfo_string114:
	.asciz	"SEQ_MATCH_LEN_CHOICE2"         # string offset=1704
.Linfo_string115:
	.asciz	"SEQ_MATCH_LEN_MID0"            # string offset=1726
.Linfo_string116:
	.asciz	"SEQ_MATCH_LEN_MID1"            # string offset=1745
.Linfo_string117:
	.asciz	"SEQ_MATCH_LEN_MID2"            # string offset=1764
.Linfo_string118:
	.asciz	"SEQ_MATCH_LEN_HIGH0"           # string offset=1783
.Linfo_string119:
	.asciz	"SEQ_MATCH_LEN_HIGH1"           # string offset=1803
.Linfo_string120:
	.asciz	"SEQ_MATCH_LEN_HIGH2"           # string offset=1823
.Linfo_string121:
	.asciz	"SEQ_MATCH_LEN_HIGH3"           # string offset=1843
.Linfo_string122:
	.asciz	"SEQ_MATCH_LEN_HIGH4"           # string offset=1863
.Linfo_string123:
	.asciz	"SEQ_MATCH_LEN_HIGH5"           # string offset=1883
.Linfo_string124:
	.asciz	"SEQ_MATCH_LEN_HIGH6"           # string offset=1903
.Linfo_string125:
	.asciz	"SEQ_MATCH_LEN_HIGH7"           # string offset=1923
.Linfo_string126:
	.asciz	"SEQ_POS_SLOT0"                 # string offset=1943
.Linfo_string127:
	.asciz	"SEQ_POS_SLOT1"                 # string offset=1957
.Linfo_string128:
	.asciz	"SEQ_POS_SLOT2"                 # string offset=1971
.Linfo_string129:
	.asciz	"SEQ_POS_SLOT3"                 # string offset=1985
.Linfo_string130:
	.asciz	"SEQ_POS_SLOT4"                 # string offset=1999
.Linfo_string131:
	.asciz	"SEQ_POS_SLOT5"                 # string offset=2013
.Linfo_string132:
	.asciz	"SEQ_POS_MODEL"                 # string offset=2027
.Linfo_string133:
	.asciz	"SEQ_DIRECT"                    # string offset=2041
.Linfo_string134:
	.asciz	"SEQ_ALIGN0"                    # string offset=2052
.Linfo_string135:
	.asciz	"SEQ_ALIGN1"                    # string offset=2063
.Linfo_string136:
	.asciz	"SEQ_ALIGN2"                    # string offset=2074
.Linfo_string137:
	.asciz	"SEQ_ALIGN3"                    # string offset=2085
.Linfo_string138:
	.asciz	"SEQ_EOPM"                      # string offset=2096
.Linfo_string139:
	.asciz	"SEQ_IS_REP0"                   # string offset=2105
.Linfo_string140:
	.asciz	"SEQ_SHORTREP"                  # string offset=2117
.Linfo_string141:
	.asciz	"SEQ_IS_REP0_LONG"              # string offset=2130
.Linfo_string142:
	.asciz	"SEQ_IS_REP1"                   # string offset=2147
.Linfo_string143:
	.asciz	"SEQ_IS_REP2"                   # string offset=2159
.Linfo_string144:
	.asciz	"SEQ_REP_LEN_CHOICE"            # string offset=2171
.Linfo_string145:
	.asciz	"SEQ_REP_LEN_LOW0"              # string offset=2190
.Linfo_string146:
	.asciz	"SEQ_REP_LEN_LOW1"              # string offset=2207
.Linfo_string147:
	.asciz	"SEQ_REP_LEN_LOW2"              # string offset=2224
.Linfo_string148:
	.asciz	"SEQ_REP_LEN_CHOICE2"           # string offset=2241
.Linfo_string149:
	.asciz	"SEQ_REP_LEN_MID0"              # string offset=2261
.Linfo_string150:
	.asciz	"SEQ_REP_LEN_MID1"              # string offset=2278
.Linfo_string151:
	.asciz	"SEQ_REP_LEN_MID2"              # string offset=2295
.Linfo_string152:
	.asciz	"SEQ_REP_LEN_HIGH0"             # string offset=2312
.Linfo_string153:
	.asciz	"SEQ_REP_LEN_HIGH1"             # string offset=2330
.Linfo_string154:
	.asciz	"SEQ_REP_LEN_HIGH2"             # string offset=2348
.Linfo_string155:
	.asciz	"SEQ_REP_LEN_HIGH3"             # string offset=2366
.Linfo_string156:
	.asciz	"SEQ_REP_LEN_HIGH4"             # string offset=2384
.Linfo_string157:
	.asciz	"SEQ_REP_LEN_HIGH5"             # string offset=2402
.Linfo_string158:
	.asciz	"SEQ_REP_LEN_HIGH6"             # string offset=2420
.Linfo_string159:
	.asciz	"SEQ_REP_LEN_HIGH7"             # string offset=2438
.Linfo_string160:
	.asciz	"SEQ_COPY"                      # string offset=2456
.Linfo_string161:
	.asciz	"probs"                         # string offset=2465
.Linfo_string162:
	.asciz	"symbol"                        # string offset=2471
.Linfo_string163:
	.asciz	"limit"                         # string offset=2478
.Linfo_string164:
	.asciz	"offset"                        # string offset=2484
.Linfo_string165:
	.asciz	"len"                           # string offset=2491
.Linfo_string166:
	.asciz	"lzma_coder_s"                  # string offset=2495
.Linfo_string167:
	.asciz	"size_t"                        # string offset=2508
.Linfo_string168:
	.asciz	"lzma_alloc"                    # string offset=2515
.Linfo_string169:
	.asciz	"alloc"                         # string offset=2526
.Linfo_string170:
	.asciz	"free"                          # string offset=2532
.Linfo_string171:
	.asciz	"opaque"                        # string offset=2537
.Linfo_string172:
	.asciz	"lzma_allocator"                # string offset=2544
.Linfo_string173:
	.asciz	"rc_read_init"                  # string offset=2559
.Linfo_string174:
	.asciz	"_Bool"                         # string offset=2572
.Linfo_string175:
	.asciz	"in"                            # string offset=2578
.Linfo_string176:
	.asciz	"unsigned char"                 # string offset=2581
.Linfo_string177:
	.asciz	"__uint8_t"                     # string offset=2595
.Linfo_string178:
	.asciz	"uint8_t"                       # string offset=2605
.Linfo_string179:
	.asciz	"in_pos"                        # string offset=2613
.Linfo_string180:
	.asciz	"in_size"                       # string offset=2620
.Linfo_string181:
	.asciz	"dict_get"                      # string offset=2628
.Linfo_string182:
	.asciz	"dict"                          # string offset=2637
.Linfo_string183:
	.asciz	"buf"                           # string offset=2642
.Linfo_string184:
	.asciz	"pos"                           # string offset=2646
.Linfo_string185:
	.asciz	"full"                          # string offset=2650
.Linfo_string186:
	.asciz	"size"                          # string offset=2655
.Linfo_string187:
	.asciz	"need_reset"                    # string offset=2660
.Linfo_string188:
	.asciz	"lzma_dict"                     # string offset=2671
.Linfo_string189:
	.asciz	"distance"                      # string offset=2681
.Linfo_string190:
	.asciz	"dict_is_distance_valid"        # string offset=2690
.Linfo_string191:
	.asciz	"dict_put"                      # string offset=2713
.Linfo_string192:
	.asciz	"byte"                          # string offset=2722
.Linfo_string193:
	.asciz	"dict_repeat"                   # string offset=2727
.Linfo_string194:
	.asciz	"dict_avail"                    # string offset=2739
.Linfo_string195:
	.asciz	"left"                          # string offset=2750
.Linfo_string196:
	.asciz	"copy_size"                     # string offset=2755
.Linfo_string197:
	.asciz	"copy_pos"                      # string offset=2765
.Linfo_string198:
	.asciz	"literal_init"                  # string offset=2774
.Linfo_string199:
	.asciz	"lc"                            # string offset=2787
.Linfo_string200:
	.asciz	"lp"                            # string offset=2790
.Linfo_string201:
	.asciz	"coders"                        # string offset=2793
.Linfo_string202:
	.asciz	"i"                             # string offset=2800
.Linfo_string203:
	.asciz	"j"                             # string offset=2802
.Linfo_string204:
	.asciz	"lzma_lz_decoder_init"          # string offset=2804
.Linfo_string205:
	.asciz	"lzma_ret"                      # string offset=2825
.Linfo_string206:
	.asciz	"coder"                         # string offset=2834
.Linfo_string207:
	.asciz	"lzma_coder"                    # string offset=2840
.Linfo_string208:
	.asciz	"id"                            # string offset=2851
.Linfo_string209:
	.asciz	"init"                          # string offset=2854
.Linfo_string210:
	.asciz	"uintptr_t"                     # string offset=2859
.Linfo_string211:
	.asciz	"lzma_action"                   # string offset=2869
.Linfo_string212:
	.asciz	"lzma_code_function"            # string offset=2881
.Linfo_string213:
	.asciz	"end"                           # string offset=2900
.Linfo_string214:
	.asciz	"lzma_end_function"             # string offset=2904
.Linfo_string215:
	.asciz	"get_check"                     # string offset=2922
.Linfo_string216:
	.asciz	"lzma_check"                    # string offset=2932
.Linfo_string217:
	.asciz	"memconfig"                     # string offset=2943
.Linfo_string218:
	.asciz	"update"                        # string offset=2953
.Linfo_string219:
	.asciz	"options"                       # string offset=2960
.Linfo_string220:
	.asciz	"lzma_filter"                   # string offset=2968
.Linfo_string221:
	.asciz	"lzma_next_coder_s"             # string offset=2980
.Linfo_string222:
	.asciz	"lzma_next_coder"               # string offset=2998
.Linfo_string223:
	.asciz	"lzma_init_function"            # string offset=3014
.Linfo_string224:
	.asciz	"lzma_filter_info_s"            # string offset=3033
.Linfo_string225:
	.asciz	"lzma_filter_info"              # string offset=3052
.Linfo_string226:
	.asciz	"reset"                         # string offset=3069
.Linfo_string227:
	.asciz	"set_uncompressed"              # string offset=3075
.Linfo_string228:
	.asciz	"lzma_lz_decoder"               # string offset=3092
.Linfo_string229:
	.asciz	"dict_size"                     # string offset=3108
.Linfo_string230:
	.asciz	"preset_dict"                   # string offset=3118
.Linfo_string231:
	.asciz	"preset_dict_size"              # string offset=3130
.Linfo_string232:
	.asciz	"lzma_lz_options"               # string offset=3147
.Linfo_string233:
	.asciz	"is_lclppb_valid"               # string offset=3163
.Linfo_string234:
	.asciz	"pb"                            # string offset=3179
.Linfo_string235:
	.asciz	"mode"                          # string offset=3182
.Linfo_string236:
	.asciz	"lzma_mode"                     # string offset=3187
.Linfo_string237:
	.asciz	"nice_len"                      # string offset=3197
.Linfo_string238:
	.asciz	"mf"                            # string offset=3206
.Linfo_string239:
	.asciz	"lzma_match_finder"             # string offset=3209
.Linfo_string240:
	.asciz	"depth"                         # string offset=3227
.Linfo_string241:
	.asciz	"reserved_int1"                 # string offset=3233
.Linfo_string242:
	.asciz	"reserved_int2"                 # string offset=3247
.Linfo_string243:
	.asciz	"reserved_int3"                 # string offset=3261
.Linfo_string244:
	.asciz	"reserved_int4"                 # string offset=3275
.Linfo_string245:
	.asciz	"reserved_int5"                 # string offset=3289
.Linfo_string246:
	.asciz	"reserved_int6"                 # string offset=3303
.Linfo_string247:
	.asciz	"reserved_int7"                 # string offset=3317
.Linfo_string248:
	.asciz	"reserved_int8"                 # string offset=3331
.Linfo_string249:
	.asciz	"reserved_enum1"                # string offset=3345
.Linfo_string250:
	.asciz	"lzma_reserved_enum"            # string offset=3360
.Linfo_string251:
	.asciz	"reserved_enum2"                # string offset=3379
.Linfo_string252:
	.asciz	"reserved_enum3"                # string offset=3394
.Linfo_string253:
	.asciz	"reserved_enum4"                # string offset=3409
.Linfo_string254:
	.asciz	"reserved_ptr1"                 # string offset=3424
.Linfo_string255:
	.asciz	"reserved_ptr2"                 # string offset=3438
.Linfo_string256:
	.asciz	"lzma_options_lzma"             # string offset=3452
.Linfo_string257:
	.asciz	"lzma_lzma_decoder_create"      # string offset=3470
.Linfo_string258:
	.asciz	"lz"                            # string offset=3495
.Linfo_string259:
	.asciz	"allocator"                     # string offset=3498
.Linfo_string260:
	.asciz	"opt"                           # string offset=3508
.Linfo_string261:
	.asciz	"lz_options"                    # string offset=3512
.Linfo_string262:
	.asciz	"lzma_decoder_uncompressed"     # string offset=3523
.Linfo_string263:
	.asciz	"pcoder"                        # string offset=3549
.Linfo_string264:
	.asciz	"lzma_lz_decoder_memusage"      # string offset=3556
.Linfo_string265:
	.asciz	"lzma_lzma_decoder_memusage_nocheck" # string offset=3581
.Linfo_string266:
	.asciz	"lzma_lzma_lclppb_decode"       # string offset=3616
.Linfo_string267:
	.asciz	"unaligned_read32le"            # string offset=3640
.Linfo_string268:
	.asciz	"num"                           # string offset=3659
.Linfo_string269:
	.asciz	"lzma_free"                     # string offset=3663
.Linfo_string270:
	.asciz	"DW_ATE_unsigned_8"             # string offset=3673
.Linfo_string271:
	.asciz	"DW_ATE_unsigned_32"            # string offset=3691
.Linfo_string272:
	.asciz	"lzma_decode"                   # string offset=3710
.Linfo_string273:
	.asciz	"lzma_decoder_reset"            # string offset=3722
.Linfo_string274:
	.asciz	"lzma_lzma_decoder_init"        # string offset=3741
.Linfo_string275:
	.asciz	"lzma_decoder_init"             # string offset=3764
.Linfo_string276:
	.asciz	"lzma_lzma_decoder_memusage"    # string offset=3782
.Linfo_string277:
	.asciz	"lzma_lzma_props_decode"        # string offset=3809
.Linfo_string278:
	.asciz	"dictptr"                       # string offset=3832
.Linfo_string279:
	.asciz	"dict_start"                    # string offset=3840
.Linfo_string280:
	.asciz	"rc_in_pos"                     # string offset=3851
.Linfo_string281:
	.asciz	"pos_state"                     # string offset=3861
.Linfo_string282:
	.asciz	"ret"                           # string offset=3871
.Linfo_string283:
	.asciz	"rc_bound"                      # string offset=3875
.Linfo_string284:
	.asciz	"match_bit"                     # string offset=3884
.Linfo_string285:
	.asciz	"subcoder_index"                # string offset=3894
.Linfo_string286:
	.asciz	"out"                           # string offset=3909
.Linfo_string287:
	.asciz	"no_eopm"                       # string offset=3913
.Linfo_string288:
	.asciz	"bt_i"                          # string offset=3921
.Linfo_string289:
	.asciz	"num_pos_states"                # string offset=3926
.Linfo_string290:
	.asciz	"next"                          # string offset=3941
.Linfo_string291:
	.asciz	"filters"                       # string offset=3946
.Linfo_string292:
	.asciz	"ret_"                          # string offset=3954
.Linfo_string293:
	.asciz	"props"                         # string offset=3959
.Linfo_string294:
	.asciz	"props_size"                    # string offset=3965
.Linfo_string295:
	.asciz	"error"                         # string offset=3976
	.section	.debug_str_offsets,"",@progbits
	.long	.Linfo_string0
	.long	.Linfo_string1
	.long	.Linfo_string2
	.long	.Linfo_string3
	.long	.Linfo_string4
	.long	.Linfo_string5
	.long	.Linfo_string6
	.long	.Linfo_string7
	.long	.Linfo_string8
	.long	.Linfo_string9
	.long	.Linfo_string10
	.long	.Linfo_string11
	.long	.Linfo_string12
	.long	.Linfo_string13
	.long	.Linfo_string14
	.long	.Linfo_string15
	.long	.Linfo_string16
	.long	.Linfo_string17
	.long	.Linfo_string18
	.long	.Linfo_string19
	.long	.Linfo_string20
	.long	.Linfo_string21
	.long	.Linfo_string22
	.long	.Linfo_string23
	.long	.Linfo_string24
	.long	.Linfo_string25
	.long	.Linfo_string26
	.long	.Linfo_string27
	.long	.Linfo_string28
	.long	.Linfo_string29
	.long	.Linfo_string30
	.long	.Linfo_string31
	.long	.Linfo_string32
	.long	.Linfo_string33
	.long	.Linfo_string34
	.long	.Linfo_string35
	.long	.Linfo_string36
	.long	.Linfo_string37
	.long	.Linfo_string38
	.long	.Linfo_string39
	.long	.Linfo_string40
	.long	.Linfo_string41
	.long	.Linfo_string42
	.long	.Linfo_string43
	.long	.Linfo_string44
	.long	.Linfo_string45
	.long	.Linfo_string46
	.long	.Linfo_string47
	.long	.Linfo_string48
	.long	.Linfo_string49
	.long	.Linfo_string50
	.long	.Linfo_string51
	.long	.Linfo_string52
	.long	.Linfo_string53
	.long	.Linfo_string54
	.long	.Linfo_string55
	.long	.Linfo_string56
	.long	.Linfo_string57
	.long	.Linfo_string58
	.long	.Linfo_string59
	.long	.Linfo_string60
	.long	.Linfo_string61
	.long	.Linfo_string62
	.long	.Linfo_string63
	.long	.Linfo_string64
	.long	.Linfo_string65
	.long	.Linfo_string66
	.long	.Linfo_string67
	.long	.Linfo_string68
	.long	.Linfo_string69
	.long	.Linfo_string70
	.long	.Linfo_string71
	.long	.Linfo_string72
	.long	.Linfo_string73
	.long	.Linfo_string74
	.long	.Linfo_string75
	.long	.Linfo_string76
	.long	.Linfo_string77
	.long	.Linfo_string78
	.long	.Linfo_string79
	.long	.Linfo_string80
	.long	.Linfo_string81
	.long	.Linfo_string82
	.long	.Linfo_string83
	.long	.Linfo_string84
	.long	.Linfo_string85
	.long	.Linfo_string86
	.long	.Linfo_string87
	.long	.Linfo_string88
	.long	.Linfo_string89
	.long	.Linfo_string90
	.long	.Linfo_string91
	.long	.Linfo_string92
	.long	.Linfo_string93
	.long	.Linfo_string94
	.long	.Linfo_string95
	.long	.Linfo_string96
	.long	.Linfo_string97
	.long	.Linfo_string98
	.long	.Linfo_string99
	.long	.Linfo_string100
	.long	.Linfo_string101
	.long	.Linfo_string102
	.long	.Linfo_string103
	.long	.Linfo_string104
	.long	.Linfo_string105
	.long	.Linfo_string106
	.long	.Linfo_string107
	.long	.Linfo_string108
	.long	.Linfo_string109
	.long	.Linfo_string110
	.long	.Linfo_string111
	.long	.Linfo_string112
	.long	.Linfo_string113
	.long	.Linfo_string114
	.long	.Linfo_string115
	.long	.Linfo_string116
	.long	.Linfo_string117
	.long	.Linfo_string118
	.long	.Linfo_string119
	.long	.Linfo_string120
	.long	.Linfo_string121
	.long	.Linfo_string122
	.long	.Linfo_string123
	.long	.Linfo_string124
	.long	.Linfo_string125
	.long	.Linfo_string126
	.long	.Linfo_string127
	.long	.Linfo_string128
	.long	.Linfo_string129
	.long	.Linfo_string130
	.long	.Linfo_string131
	.long	.Linfo_string132
	.long	.Linfo_string133
	.long	.Linfo_string134
	.long	.Linfo_string135
	.long	.Linfo_string136
	.long	.Linfo_string137
	.long	.Linfo_string138
	.long	.Linfo_string139
	.long	.Linfo_string140
	.long	.Linfo_string141
	.long	.Linfo_string142
	.long	.Linfo_string143
	.long	.Linfo_string144
	.long	.Linfo_string145
	.long	.Linfo_string146
	.long	.Linfo_string147
	.long	.Linfo_string148
	.long	.Linfo_string149
	.long	.Linfo_string150
	.long	.Linfo_string151
	.long	.Linfo_string152
	.long	.Linfo_string153
	.long	.Linfo_string154
	.long	.Linfo_string155
	.long	.Linfo_string156
	.long	.Linfo_string157
	.long	.Linfo_string158
	.long	.Linfo_string159
	.long	.Linfo_string160
	.long	.Linfo_string161
	.long	.Linfo_string162
	.long	.Linfo_string163
	.long	.Linfo_string164
	.long	.Linfo_string165
	.long	.Linfo_string166
	.long	.Linfo_string167
	.long	.Linfo_string168
	.long	.Linfo_string169
	.long	.Linfo_string170
	.long	.Linfo_string171
	.long	.Linfo_string172
	.long	.Linfo_string173
	.long	.Linfo_string174
	.long	.Linfo_string175
	.long	.Linfo_string176
	.long	.Linfo_string177
	.long	.Linfo_string178
	.long	.Linfo_string179
	.long	.Linfo_string180
	.long	.Linfo_string181
	.long	.Linfo_string182
	.long	.Linfo_string183
	.long	.Linfo_string184
	.long	.Linfo_string185
	.long	.Linfo_string186
	.long	.Linfo_string187
	.long	.Linfo_string188
	.long	.Linfo_string189
	.long	.Linfo_string190
	.long	.Linfo_string191
	.long	.Linfo_string192
	.long	.Linfo_string193
	.long	.Linfo_string194
	.long	.Linfo_string195
	.long	.Linfo_string196
	.long	.Linfo_string197
	.long	.Linfo_string198
	.long	.Linfo_string199
	.long	.Linfo_string200
	.long	.Linfo_string201
	.long	.Linfo_string202
	.long	.Linfo_string203
	.long	.Linfo_string204
	.long	.Linfo_string205
	.long	.Linfo_string206
	.long	.Linfo_string207
	.long	.Linfo_string208
	.long	.Linfo_string209
	.long	.Linfo_string210
	.long	.Linfo_string211
	.long	.Linfo_string212
	.long	.Linfo_string213
	.long	.Linfo_string214
	.long	.Linfo_string215
	.long	.Linfo_string216
	.long	.Linfo_string217
	.long	.Linfo_string218
	.long	.Linfo_string219
	.long	.Linfo_string220
	.long	.Linfo_string221
	.long	.Linfo_string222
	.long	.Linfo_string223
	.long	.Linfo_string224
	.long	.Linfo_string225
	.long	.Linfo_string226
	.long	.Linfo_string227
	.long	.Linfo_string228
	.long	.Linfo_string229
	.long	.Linfo_string230
	.long	.Linfo_string231
	.long	.Linfo_string232
	.long	.Linfo_string233
	.long	.Linfo_string234
	.long	.Linfo_string235
	.long	.Linfo_string236
	.long	.Linfo_string237
	.long	.Linfo_string238
	.long	.Linfo_string239
	.long	.Linfo_string240
	.long	.Linfo_string241
	.long	.Linfo_string242
	.long	.Linfo_string243
	.long	.Linfo_string244
	.long	.Linfo_string245
	.long	.Linfo_string246
	.long	.Linfo_string247
	.long	.Linfo_string248
	.long	.Linfo_string249
	.long	.Linfo_string250
	.long	.Linfo_string251
	.long	.Linfo_string252
	.long	.Linfo_string253
	.long	.Linfo_string254
	.long	.Linfo_string255
	.long	.Linfo_string256
	.long	.Linfo_string257
	.long	.Linfo_string258
	.long	.Linfo_string259
	.long	.Linfo_string260
	.long	.Linfo_string261
	.long	.Linfo_string262
	.long	.Linfo_string263
	.long	.Linfo_string264
	.long	.Linfo_string265
	.long	.Linfo_string266
	.long	.Linfo_string267
	.long	.Linfo_string268
	.long	.Linfo_string269
	.long	.Linfo_string270
	.long	.Linfo_string271
	.long	.Linfo_string272
	.long	.Linfo_string273
	.long	.Linfo_string274
	.long	.Linfo_string275
	.long	.Linfo_string276
	.long	.Linfo_string277
	.long	.Linfo_string278
	.long	.Linfo_string279
	.long	.Linfo_string280
	.long	.Linfo_string281
	.long	.Linfo_string282
	.long	.Linfo_string283
	.long	.Linfo_string284
	.long	.Linfo_string285
	.long	.Linfo_string286
	.long	.Linfo_string287
	.long	.Linfo_string288
	.long	.Linfo_string289
	.long	.Linfo_string290
	.long	.Linfo_string291
	.long	.Linfo_string292
	.long	.Linfo_string293
	.long	.Linfo_string294
	.long	.Linfo_string295
	.section	.debug_addr,"",@progbits
	.long	.Ldebug_addr_end0-.Ldebug_addr_start0 # Length of contribution
.Ldebug_addr_start0:
	.short	5                               # DWARF version number
	.byte	8                               # Address size
	.byte	0                               # Segment selector size
.Laddr_table_base0:
	.quad	lzma_decode.next_state
	.quad	.Lfunc_begin0
	.quad	.Ltmp5
	.quad	.Lfunc_begin1
	.quad	.Ltmp99
	.quad	.Ltmp1664
	.quad	.Ltmp1957
	.quad	.Ltmp367
	.quad	.Ltmp415
	.quad	.Ltmp472
	.quad	.Ltmp474
	.quad	.Lfunc_begin2
	.quad	.Ltmp2492
	.quad	.Ltmp2495
	.quad	.Ltmp2503
	.quad	.Ltmp2563
	.quad	.Ltmp2564
	.quad	.Ltmp2568
	.quad	.Ltmp2574
	.quad	.Ltmp2576
	.quad	.Ltmp2578
	.quad	.Ltmp2579
	.quad	.Ltmp2583
	.quad	.Ltmp2584
	.quad	.Lfunc_begin3
	.quad	.Lfunc_begin4
	.quad	.Ltmp2588
	.quad	.Lfunc_begin5
	.quad	.Ltmp2608
	.quad	.Ltmp2600
	.quad	.Ltmp2607
	.quad	.Lfunc_begin6
	.quad	.Lfunc_begin7
	.quad	.Ltmp2623
	.quad	.Lfunc_begin8
	.quad	.Ltmp2629
	.quad	.Ltmp2631
	.quad	.Lfunc_begin9
	.quad	.Ltmp2641
	.quad	.Ltmp2651
	.quad	.Ltmp2638
	.quad	.Ltmp2648
	.quad	.Ltmp1616
	.quad	.Ltmp2647
.Ldebug_addr_end0:
	.ident	"clang version 19.0.0git (git@github.com:QuqqU/GPUISel-llvm.git ed922481952e7fbe7b5da8613bc5ccf78f796536)"
	.section	".note.GNU-stack","",@progbits
	.section	.debug_line,"",@progbits
.Lline_table_start0:
